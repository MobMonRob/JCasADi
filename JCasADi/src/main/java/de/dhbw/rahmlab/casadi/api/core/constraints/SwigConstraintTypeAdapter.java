package de.dhbw.rahmlab.casadi.api.core.constraints;

import de.dhbw.rahmlab.casadi.impl.casadi.ConstraintType;

/**
 * Translates our API comparison operators and classes to the ConstraintType enum generated by SWIG.
 * This adapter is used to map custom constraints to types expected by the CasADi solver.
 */
public final class SwigConstraintTypeAdapter {

    /** Private constructor to prevent instantiation of this utility class. */
    private SwigConstraintTypeAdapter() {}

    /**
     * Returns the SWIG ConstraintType corresponding to the given Constraint object,
     * as expected by the CasADi solver.
     *
     * @param c the Constraint object to be translated
     * @return the corresponding ConstraintType for the CasADi solver
     * @throws IllegalArgumentException if the comparison type is unknown
     */
    public static ConstraintType toSwigType(Constraint c) {
        Comparison cmp = c.getComparison();
        // Extend this switch statement if additional subtypes are introduced in the future.
        switch (cmp) {
            case EQ:
                return ConstraintType.OPTI_GENERIC_EQUALITY;
            case LE:
            case LT:
                return ConstraintType.OPTI_GENERIC_INEQUALITY;
            case GE:
            case GT:
                return ConstraintType.OPTI_GENERIC_INEQUALITY;
            default:
                throw new IllegalArgumentException("Unknown comparison: " + cmp);
        }
    }

    /**
     * Alternative method to obtain the SWIG ConstraintType directly from a Comparison enum.
     *
     * @param cmp the Comparison enum to be translated
     * @return the corresponding ConstraintType for the CasADi solver
     * @throws IllegalArgumentException if the comparison type is unknown
     */
    public static ConstraintType fromComparison(Comparison cmp) {
        switch (cmp) {
            case EQ:
                return ConstraintType.OPTI_GENERIC_EQUALITY;
            case LE:
                return ConstraintType.OPTI_GENERIC_INEQUALITY;
            case LT:
                return ConstraintType.OPTI_GENERIC_INEQUALITY;
            case GE:
                return ConstraintType.OPTI_GENERIC_INEQUALITY;
            case GT:
                return ConstraintType.OPTI_GENERIC_INEQUALITY;
            default:
                throw new IllegalArgumentException("Unknown comparison: " + cmp);
        }
    }
}