/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.casadi;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

public class StringSerializer extends de.dhbw.rahmlab.casadi.impl.casadi.SerializerBase {
  private final long swigCPtr;

  public StringSerializer(long cPtr, boolean cMemoryOwn) {
    super(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_StringSerializer_SWIGUpcast(cPtr), cMemoryOwn, cPtr, StringSerializer::delete);
    this.swigCPtr = cPtr;
  }
  
  public static long getCPtr(StringSerializer obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_casadi_StringSerializer(swigCPtr);
}

  /**
   *  Advanced serialization of CasADi objects<br>
   * <br>
   * This class is intended for advanced users that want to circumvent the restrictions<br>
   * of standard pickling/matlab save load, ie no raw SX/MX symbols allowed.<br>
   * <br>
   * {@literal 
       x = SX.sym('x');
       s = StringSerializer();
       s.pack(x);
       s.pack(sin(x));
  
       data = s.encode();
  
       s = StringDeserializer(data);
       a = s.unpack();
       b = s.unpack();
       }<br>
   * <br>
   * Note:<br>
   *  Saving SX/MX objects individually has a substantial overhead<br>
   *  (both time and length of encoded string).<br>
   *  You are encouraged to use the vector/list variants of 'save' for SX/MX to reduce<br>
   *  the overhead.<br>
   * <br>
   * <br>
   * @see Function#save, Function::serialize, StringDeserializer, FileSerializer<br>
   * <br>
   *         
   */
  public StringSerializer(de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_StringSerializer__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Advanced serialization of CasADi objects<br>
   * <br>
   * This class is intended for advanced users that want to circumvent the restrictions<br>
   * of standard pickling/matlab save load, ie no raw SX/MX symbols allowed.<br>
   * <br>
   * {@literal 
       x = SX.sym('x');
       s = StringSerializer();
       s.pack(x);
       s.pack(sin(x));
  
       data = s.encode();
  
       s = StringDeserializer(data);
       a = s.unpack();
       b = s.unpack();
       }<br>
   * <br>
   * Note:<br>
   *  Saving SX/MX objects individually has a substantial overhead<br>
   *  (both time and length of encoded string).<br>
   *  You are encouraged to use the vector/list variants of 'save' for SX/MX to reduce<br>
   *  the overhead.<br>
   * <br>
   * <br>
   * @see Function#save, Function::serialize, StringDeserializer, FileSerializer<br>
   * <br>
   *         
   */
  public StringSerializer() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_StringSerializer__SWIG_1(), true);
  }

  /**
   *  Returns a string that holds the serialized objects<br>
   * <br>
   * As a side effect, this method clears the internal buffer<br>
   * <br>
   *         
   */
  public String encode() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_StringSerializer_encode(swigCPtr, this);
  }

}
