/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.casadi;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

/**
 *  General sparsity class<br>
 * <br>
 * The storage format is a compressed column storage (CCS) format.<br>
 * <br>
 * <br>
 *    In this format, the structural non-zero elements are stored in column-major order, starting from<br>
 *    the upper left corner of the matrix and ending in the lower right corner.<br>
 * <br>
 *    In addition to the dimension (size1(), size2()), (i.e. the number of rows and the number of<br>
 *    columns respectively), there are also two vectors of integers:<br>
 * <br>
 *    1. "colind" [length size2()+1], which contains the index to the first non-zero element on or<br>
 *    after the corresponding column. All the non-zero elements of a particular column i are thus<br>
 *    the elements with index el that fulfills: colind[i] &lt;= el &lt; colind[i+1].<br>
 * <br>
 *    2. "row" [same length as the number of non-zero elements, nnz()] The rows for each of the<br>
 *    structural non-zeros.<br>
 * <br>
 *    Note that with this format, it is cheap to loop over all the non-zero elements of a particular<br>
 *    column, at constant time per element, but expensive to jump to access a location (i, j).<br>
 * <br>
 *    If the matrix is dense, i.e. length(row) == size1()*size2(), the format reduces to standard dense<br>
 *    column major format, which allows access to an arbitrary element in constant time.<br>
 * <br>
 *    Since the object is reference counted (it inherits from SharedObject), several matrices are<br>
 *    allowed to share the same sparsity pattern.<br>
 * <br>
 *    The implementations of methods marked as such in this class has been taken from the<br>
 *    CSparse package and modified to fit CasADi data structures and separation of<br>
 *    sparsity pattern calculation and numerical evaluation.<br>
 *    These functions are Copyright(c) Timothy A. Davis, 2006-2009<br>
 *    and licensed as a derivative work under the GNU LGPL<br>
 * <br>
 * @see Matrix<br>
 * <br>
 * @author Joel Andersson<br>
 * 2010-2015<br>
 * <br>
 *       
 */
public class Sparsity implements ISharedObject, ISparsitySparsityInterface {
  private final long swigCPtr;

  public Sparsity(long cPtr, boolean cMemoryOwn) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, cPtr, Sparsity::delete);
  	}
  }

  /**
  * <pre>
  * In C++, deleting a pointer twice is undefined behavior!
  * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
  * Using this baseclass constructor for subtypes prevents that.
  * </pre>
  */
  protected Sparsity(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
	  }
  }

  public static long getCPtr(Sparsity obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_casadi_Sparsity(swigCPtr);
}

  public long ISharedObject_GetInterfaceCPtr() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_ISharedObject_GetInterfaceCPtr(swigCPtr);
  }

  public long ISparsitySparsityInterface_GetInterfaceCPtr() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_ISparsitySparsityInterface_GetInterfaceCPtr(swigCPtr);
  }

  /**
   *  Default constructor
   */
  public Sparsity(long dummy) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Sparsity__SWIG_0(dummy), true);
  }

  /**
   *  Default constructor
   */
  public Sparsity() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Sparsity__SWIG_1(), true);
  }

  /**
   *  Pattern with all structural zeros<br>
   * <br>
   *         
   */
  public Sparsity(long nrow, long ncol) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Sparsity__SWIG_2(nrow, ncol), true);
  }

  /**
   *  Construct from sparsity pattern vectors given in compressed column storage format
   */
  public Sparsity(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt colind, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt row, boolean order_rows) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Sparsity__SWIG_3(nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(colind), colind, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(row), row, order_rows), true);
  }

  /**
   *  Construct from sparsity pattern vectors given in compressed column storage format
   */
  public Sparsity(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt colind, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt row) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Sparsity__SWIG_4(nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(colind), colind, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(row), row), true);
  }

  /**
   *  Create a sparse matrix with all structural zeros<br>
   * <br>
   *         
   */
  public Sparsity(SWIGTYPE_p_std__pairT_long_long_long_long_t rc) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Sparsity__SWIG_5(SWIGTYPE_p_std__pairT_long_long_long_long_t.getCPtr(rc)), true);
  }

  /**
   *  Construct from sparsity pattern vectors given in compressed column storage format
   */
  public Sparsity(long nrow, long ncol, SWIGTYPE_p_long_long colind, SWIGTYPE_p_long_long row, boolean order_rows) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Sparsity__SWIG_6(nrow, ncol, SWIGTYPE_p_long_long.getCPtr(colind), SWIGTYPE_p_long_long.getCPtr(row), order_rows), true);
  }

  /**
   *  Construct from sparsity pattern vectors given in compressed column storage format
   */
  public Sparsity(long nrow, long ncol, SWIGTYPE_p_long_long colind, SWIGTYPE_p_long_long row) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Sparsity__SWIG_7(nrow, ncol, SWIGTYPE_p_long_long.getCPtr(colind), SWIGTYPE_p_long_long.getCPtr(row)), true);
  }

  /**
   *  Create from node<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity create(SWIGTYPE_p_casadi__SparsityInternal node) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_create(SWIGTYPE_p_casadi__SparsityInternal.getCPtr(node)), true);
  }

  public SWIGTYPE_p_casadi__SparsityInternal get() {throw new UnsupportedOperationException();}

  /**
   *  Create a scalar sparsity pattern *<br>
   * <br>
   *         <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity scalar(boolean dense_scalar) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_scalar__SWIG_0(dense_scalar), true);
  }

  /**
   *  Create a scalar sparsity pattern *<br>
   * <br>
   *         <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity scalar() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_scalar__SWIG_1(), true);
  }

  /**
   * Create a dense rectangular sparsity pattern *<br>
   * <br>
   *         <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity dense(long nrow, long ncol) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_dense__SWIG_0(nrow, ncol), true);
  }

  /**
   * Create a dense rectangular sparsity pattern *<br>
   * <br>
   *         <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity dense(long nrow) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_dense__SWIG_1(nrow), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity dense(SWIGTYPE_p_std__pairT_long_long_long_long_t rc) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_dense__SWIG_2(SWIGTYPE_p_std__pairT_long_long_long_long_t.getCPtr(rc)), true);
  }

  /**
   * Create the sparsity pattern for a unit vector of length n and a nonzero on<br>
   * <br>
   * position el *<br>
   * <br>
   *         <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity unit(long n, long el) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_unit(n, el), true);
  }

  /**
   * Create a upper triangular square sparsity pattern *<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity upper(long n) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_upper(n), true);
  }

  /**
   *  Create a lower triangular square sparsity pattern *<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity lower(long n) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_lower(n), true);
  }

  /**
   *  Create diagonal sparsity pattern *<br>
   * <br>
   *         <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity diag(long nrow) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_diag__SWIG_0(nrow), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity diag(long nrow, long ncol) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_diag__SWIG_1(nrow, ncol), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity diag(SWIGTYPE_p_std__pairT_long_long_long_long_t rc) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_diag__SWIG_2(SWIGTYPE_p_std__pairT_long_long_long_long_t.getCPtr(rc)), true);
  }

  /**
   * Create a single band in a square sparsity pattern<br>
   * <br>
   * band(n, 0) is equivalent to diag(n) <br>
   * <br>
   * band(n, -1) has a band below the diagonal <br>
   * <br>
   * @param p indicate<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity band(long n, long p) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_band(n, p), true);
  }

  /**
   *  Create banded square sparsity pattern<br>
   * <br>
   * banded(n, 0) is equivalent to diag(n) <br>
   * <br>
   * banded(n, 1) is tri-diagonal matrix <br>
   * <br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity banded(long n, long p) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_banded(n, p), true);
  }

  /**
   *  Construct a block sparsity pattern from (row, col) vectors<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity rowcol(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt row, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt col, long nrow, long ncol) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_rowcol(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(row), row, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(col), col, nrow, ncol), true);
  }

  /**
   * Create a sparsity pattern given the nonzeros in sparse triplet form *<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity triplet(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt row, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt col, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, boolean invert_mapping) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_triplet__SWIG_0(nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(row), row, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(col), col, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, invert_mapping), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity triplet(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt row, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt col) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_triplet__SWIG_1(nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(row), row, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(col), col), true);
  }

  /**
   * Create a sparsity from nonzeros<br>
   * <br>
   * Inverse of `find()`<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity nonzeros(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt nz, boolean ind1) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_nonzeros__SWIG_0(nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(nz), nz, ind1), true);
  }

  /**
   * Create a sparsity from nonzeros<br>
   * <br>
   * Inverse of `find()`<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity nonzeros(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt nz) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_nonzeros__SWIG_1(nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(nz), nz), true);
  }

  /**
   *  Create from a single vector containing the pattern in compressed column storage format:<br>
   * The format:<br>
   * The first two entries are the number of rows (nrow) and columns (ncol)<br>
   * The next ncol+1 entries are the column offsets (colind).<br>
   *        Note that the last element, colind[ncol], gives the number of nonzeros<br>
   * The last colind[ncol] entries are the row indices<br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity compressed(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt v, boolean order_rows) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_compressed__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(v), v, order_rows), true);
  }

  /**
   *  Create from a single vector containing the pattern in compressed column storage format:<br>
   * The format:<br>
   * The first two entries are the number of rows (nrow) and columns (ncol)<br>
   * The next ncol+1 entries are the column offsets (colind).<br>
   *        Note that the last element, colind[ncol], gives the number of nonzeros<br>
   * The last colind[ncol] entries are the row indices<br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity compressed(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt v) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_compressed__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(v), v), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity compressed(SWIGTYPE_p_long_long v, boolean order_rows) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_compressed__SWIG_2(SWIGTYPE_p_long_long.getCPtr(v), order_rows), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity compressed(SWIGTYPE_p_long_long v) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_compressed__SWIG_3(SWIGTYPE_p_long_long.getCPtr(v)), true);
  }

  /**
   * Construct a permutation matrix P from a permutation vector p<br>
   * <br>
   * Right multiplication of P with a vector leads to the same results as indexing that vector with p<br>
   * <br>
   * P @ v = v[p]<br>
   * <br>
   * The inverse of a permutation matrix is equal to its transpose (property of orthonormality)<br>
   * <br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity permutation(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt p, boolean invert) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_permutation__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(p), p, invert), true);
  }

  /**
   * Construct a permutation matrix P from a permutation vector p<br>
   * <br>
   * Right multiplication of P with a vector leads to the same results as indexing that vector with p<br>
   * <br>
   * P @ v = v[p]<br>
   * <br>
   * The inverse of a permutation matrix is equal to its transpose (property of orthonormality)<br>
   * <br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity permutation(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt p) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_permutation__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(p), p), true);
  }

  /**
   *  Construct permutation vector from permutation matrix<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt permutation_vector(boolean invert) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_permutation_vector__SWIG_0(swigCPtr, this, invert), true);
  }

  /**
   *  Construct permutation vector from permutation matrix<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt permutation_vector() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_permutation_vector__SWIG_1(swigCPtr, this), true);
  }

  /**
   *  Get the diagonal of the matrix/create a diagonal matrix<br>
   *         (mapping will contain the nonzero mapping)<br>
   *         When the input is square, the diagonal elements are returned.<br>
   *         If the input is vector-like, a diagonal matrix is constructed with it.
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity get_diag(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_diag(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT), true);
  }

  /**
   *  Compress a sparsity pattern
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt compress(boolean canonical) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_compress__SWIG_0(swigCPtr, this, canonical), true);
  }

  /**
   *  Compress a sparsity pattern
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt compress() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_compress__SWIG_1(swigCPtr, this), true);
  }

  /**
   *  Reference to internal structure
   */
  public SWIGTYPE_p_casadi__SparsityInternal __ref__() {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity___ref__(swigCPtr, this);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	SWIGTYPE_p_casadi__SparsityInternal proxy = new SWIGTYPE_p_casadi__SparsityInternal(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  /**
   *  
   */
  public boolean is_equal(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_equal__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y);
  }

  public boolean is_equal(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt colind, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt row) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_equal__SWIG_1(swigCPtr, this, nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(colind), colind, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(row), row);
  }

  public boolean is_equal(long nrow, long ncol, SWIGTYPE_p_long_long colind, SWIGTYPE_p_long_long row) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_equal__SWIG_2(swigCPtr, this, nrow, ncol, SWIGTYPE_p_long_long.getCPtr(colind), SWIGTYPE_p_long_long.getCPtr(row));
  }

  /**
   *  Check if pattern is horizontal repeat of another
   */
  public boolean is_stacked(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y, long n) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_stacked(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y, n);
  }

  /**
   *  <br>
   *  Get the number of rows
   */
  public long size1() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_size1(swigCPtr, this);
  }

  /**
   *  Get the number of rows, Octave-style syntax
   */
  public long rows() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_rows(swigCPtr, this);
  }

  /**
   *  Get the number of columns
   */
  public long size2() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_size2(swigCPtr, this);
  }

  /**
   *  Get the number of columns, Octave-style syntax
   */
  public long columns() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_columns(swigCPtr, this);
  }

  /**
   *  The total number of elements, including structural zeros, i.e. size2()*size1()<br>
   * <br>
   * Beware of overflow<br>
   * @see nnz()<br>
   * <br>
   *         
   */
  public long numel() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_numel(swigCPtr, this);
  }

  /**
   *  The percentage of nonzero<br>
   * <br>
   * Equivalent to (100.0 * nnz())/numel(), but avoids overflow<br>
   * <br>
   *         
   */
  public double density() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_density(swigCPtr, this);
  }

  /**
   *  Check if the sparsity is empty<br>
   * <br>
   * A sparsity is considered empty if one of the dimensions is zero<br>
   * (or optionally both dimensions)<br>
   * <br>
   *         
   */
  public boolean is_empty(boolean both) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_empty__SWIG_0(swigCPtr, this, both);
  }

  /**
   *  Check if the sparsity is empty<br>
   * <br>
   * A sparsity is considered empty if one of the dimensions is zero<br>
   * (or optionally both dimensions)<br>
   * <br>
   *         
   */
  public boolean is_empty() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_empty__SWIG_1(swigCPtr, this);
  }

  /**
   *  Get the number of (structural) non-zeros<br>
   * <br>
   * @see numel()<br>
   * <br>
   *         
   */
  public long nnz() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_nnz(swigCPtr, this);
  }

  /**
   *  Number of non-zeros in the upper triangular half,<br>
   * <br>
   * i.e. the number of elements (i, j) with j&gt;=i<br>
   * <br>
   *         
   */
  public long nnz_upper(boolean strictly) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_nnz_upper__SWIG_0(swigCPtr, this, strictly);
  }

  /**
   *  Number of non-zeros in the upper triangular half,<br>
   * <br>
   * i.e. the number of elements (i, j) with j&gt;=i<br>
   * <br>
   *         
   */
  public long nnz_upper() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_nnz_upper__SWIG_1(swigCPtr, this);
  }

  /**
   *  Number of non-zeros in the lower triangular half,<br>
   * <br>
   * i.e. the number of elements (i, j) with j&lt;=i<br>
   * <br>
   *         
   */
  public long nnz_lower(boolean strictly) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_nnz_lower__SWIG_0(swigCPtr, this, strictly);
  }

  /**
   *  Number of non-zeros in the lower triangular half,<br>
   * <br>
   * i.e. the number of elements (i, j) with j&lt;=i<br>
   * <br>
   *         
   */
  public long nnz_lower() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_nnz_lower__SWIG_1(swigCPtr, this);
  }

  /**
   *  Number of non-zeros on the diagonal, i.e. the number of elements (i, j) with j==i<br>
   * <br>
   *         
   */
  public long nnz_diag() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_nnz_diag(swigCPtr, this);
  }

  /**
   *  Upper half-bandwidth<br>
   * <br>
   *         
   */
  public long bw_upper() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_bw_upper(swigCPtr, this);
  }

  /**
   *  Lower half-bandwidth<br>
   * <br>
   *         
   */
  public long bw_lower() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_bw_lower(swigCPtr, this);
  }

  /**
   *  Get the shape<br>
   * <br>
   *         
   */
  public SWIGTYPE_p_std__pairT_long_long_long_long_t size() {
    return new SWIGTYPE_p_std__pairT_long_long_long_long_t(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_size__SWIG_0(swigCPtr, this), true);
  }

  /**
   *  Get the size along a particular dimensions<br>
   * <br>
   *         
   */
  public long size(long axis) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_size__SWIG_1(swigCPtr, this, axis);
  }

  /**
   *  Obtain information about sparsity 
   */
  public de.dhbw.rahmlab.casadi.impl.std.Dict info() {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_info(swigCPtr, this), true);
  }

  /**
   *  Export sparsity pattern to file<br>
   * <br>
   * Supported formats:<br>
   *   - .mtx   Matrix Market
   */
  public void to_file(String filename, String format_hint) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_to_file__SWIG_0(swigCPtr, this, filename, format_hint);
  }

  /**
   *  Export sparsity pattern to file<br>
   * <br>
   * Supported formats:<br>
   *   - .mtx   Matrix Market
   */
  public void to_file(String filename) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_to_file__SWIG_1(swigCPtr, this, filename);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity from_file(String filename, String format_hint) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_from_file__SWIG_0(filename, format_hint), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity from_file(String filename) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_from_file__SWIG_1(filename), true);
  }

  /**
   *  Serialize<br>
   * <br>
   *         
   */
  public void serialize(SWIGTYPE_p_std__ostream stream) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_serialize__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(stream));
  }

  /**
   *  Serialize<br>
   * <br>
   *         
   */
  public String serialize() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_serialize__SWIG_1(swigCPtr, this);
  }

  /**
   *  Build Sparsity from serialization<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity deserialize(SWIGTYPE_p_std__istream stream) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_deserialize__SWIG_0(SWIGTYPE_p_std__istream.getCPtr(stream)), true);
  }

  /**
   *  Build Sparsity from serialization<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity deserialize(String s) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_deserialize__SWIG_1(s), true);
  }

  /**
   *  Serialize an object<br>
   * <br>
   *         
   */
  public void serialize(SWIGTYPE_p_casadi__SerializingStream s) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_serialize__SWIG_2(swigCPtr, this, SWIGTYPE_p_casadi__SerializingStream.getCPtr(s));
  }

  /**
   *  Deserialize<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity deserialize(SWIGTYPE_p_casadi__DeserializingStream s) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_deserialize__SWIG_2(SWIGTYPE_p_casadi__DeserializingStream.getCPtr(s)), true);
  }

  /**
   *  Get a reference to row-vector,<br>
   * <br>
   * containing rows for all non-zero elements (see class description)<br>
   * <br>
   *         
   */
  public SWIGTYPE_p_long_long row() {throw new UnsupportedOperationException();}

  /**
   *  Get a reference to the colindex of all column element (see class description)<br>
   * <br>
   *         
   */
  public SWIGTYPE_p_long_long colind() {throw new UnsupportedOperationException();}

  /**
   *  Get the row for each non-zero entry<br>
   * <br>
   *         Together with the column-vector, this vector gives the sparsity of the matrix in<br>
   *         sparse triplet format, and together with the colind vector, one obtains the sparsity<br>
   *         in column compressed format.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt get_row() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_row(swigCPtr, this), true);
  }

  /**
   *  Get the column index for each column<br>
   * <br>
   *         Together with the row-vector, one obtains the sparsity pattern in the<br>
   *         column compressed format.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt get_colind() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_colind(swigCPtr, this), true);
  }

  /**
   *  Get a reference to the colindex of column cc (see class description)<br>
   * <br>
   *         
   */
  public long colind(long cc) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_colind__SWIG_1(swigCPtr, this, cc);
  }

  /**
   *  Get the row of a non-zero element<br>
   * <br>
   *         
   */
  public long row(long el) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_row__SWIG_1(swigCPtr, this, el);
  }

  /**
   *  Get the column for each non-zero entry<br>
   * <br>
   *         Together with the row-vector, this vector gives the sparsity of the matrix in<br>
   *         sparse triplet format, i.e. the column and row for each non-zero elements<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt get_col() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_col(swigCPtr, this), true);
  }

  /**
   *  Resize
   */
  public void resize(long nrow, long ncol) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_resize(swigCPtr, this, nrow, ncol);
  }

  /**
   *  Get the index of a non-zero element<br>
   * <br>
   *         Add the element if it does not exist and copy object if it's not unique<br>
   * <br>
   *         
   */
  public long add_nz(long rr, long cc) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_add_nz(swigCPtr, this, rr, cc);
  }

  /**
   *  Get the index of an existing non-zero element<br>
   * <br>
   *         return -1 if the element does not exist<br>
   * <br>
   *         
   */
  public long get_nz(long rr, long cc) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_nz__SWIG_0(swigCPtr, this, rr, cc);
  }

  /**
   *  Returns true if the pattern has a non-zero at location rr, cc
   */
  public boolean has_nz(long rr, long cc) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_has_nz(swigCPtr, this, rr, cc);
  }

  /**
   *  Get a set of non-zero element<br>
   * <br>
   *         return -1 if the element does not exist<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt get_nz(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_nz__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc), true);
  }

  /**
   *  Get the nonzero index for a set of elements<br>
   * <br>
   *         The index vector is used both for input and outputs and must be sorted by increasing<br>
   *         nonzero index, i.e. column-wise.<br>
   *         Elements not found in the sparsity pattern are set to -1.<br>
   * <br>
   *         
   */
  public void get_nz(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt INOUT) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_nz__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(INOUT), INOUT);
  }

  /**
   *  Get nonzeros in lower triangular part
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt get_lower() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_lower(swigCPtr, this), true);
  }

  /**
   *  Get nonzeros in upper triangular part
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt get_upper() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_upper(swigCPtr, this), true);
  }

  /**
   *  Get the sparsity in compressed column storage (CCS) format
   */
  public void get_ccs(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_ccs(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg1), arg1);
  }

  /**
   *  Get the sparsity in compressed row storage (CRS) format
   */
  public void get_crs(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_crs(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg1), arg1);
  }

  /**
   *  Get the sparsity in sparse triplet format
   */
  public void get_triplet(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_get_triplet(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg1), arg1);
  }

  /**
   *  Get a submatrix<br>
   * <br>
   * Returns the sparsity of the submatrix, with a mapping such that<br>
   *   submatrix[k] = originalmatrix[mapping[k]]<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sub(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, boolean ind1) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_sub__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, ind1), true);
  }

  /**
   *  Get a submatrix<br>
   * <br>
   * Returns the sparsity of the submatrix, with a mapping such that<br>
   *   submatrix[k] = originalmatrix[mapping[k]]<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sub(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_sub__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT), true);
  }

  /**
   *  Get a set of elements<br>
   * <br>
   * Returns the sparsity of the corresponding elements, with a mapping such that<br>
   *   submatrix[k] = originalmatrix[mapping[k]]<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sub(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, boolean ind1) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_sub__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, ind1), true);
  }

  /**
   *  Get a set of elements<br>
   * <br>
   * Returns the sparsity of the corresponding elements, with a mapping such that<br>
   *   submatrix[k] = originalmatrix[mapping[k]]<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sub(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_sub__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT), true);
  }

  /**
   *  Transpose the matrix
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity T() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_T(swigCPtr, this), true);
  }

  /**
   *  Transpose the matrix and get the reordering of the non-zero entries<br>
   * <br>
   *  <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity transpose(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, boolean invert_mapping) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_transpose__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, invert_mapping), true);
  }

  /**
   *  Transpose the matrix and get the reordering of the non-zero entries<br>
   * <br>
   *  <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity transpose(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_transpose__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT), true);
  }

  /**
   *  Check if the sparsity is the transpose of another
   */
  public boolean is_transpose(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_transpose(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y);
  }

  /**
   *  Check if the sparsity is a reshape of another
   */
  public boolean is_reshape(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_reshape(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y);
  }

  /**
   *  Combine two sparsity patterns<br>
   * <br>
   *         Returns the new sparsity pattern as well as a mapping with the same length as<br>
   *         the number of non-zero elements<br>
   *         The mapping matrix contains the arguments for each nonzero, the first bit indicates<br>
   *         if the first argument is nonzero,<br>
   *         the second bit indicates if the second argument is nonzero (note that none of,<br>
   *         one of or both of the arguments can be nonzero)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity combine(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y, boolean f0x_is_zero, boolean function0_is_zero, SWIGTYPE_p_std__vectorT_unsigned_char_t mapping) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_combine__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y, f0x_is_zero, function0_is_zero, SWIGTYPE_p_std__vectorT_unsigned_char_t.getCPtr(mapping)), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity combine(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y, boolean f0x_is_zero, boolean function0_is_zero) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_combine__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y, f0x_is_zero, function0_is_zero), true);
  }

  /**
   *  <br>
   *  Union of two sparsity patterns<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity unite(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y, SWIGTYPE_p_std__vectorT_unsigned_char_t mapping) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_unite__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y, SWIGTYPE_p_std__vectorT_unsigned_char_t.getCPtr(mapping)), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity unite(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_unite__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y), true);
  }

  /**
   *  <br>
   *  Intersection of two sparsity patterns<br>
   * <br>
   *         Returns the new sparsity pattern as well as a mapping with the same length as the<br>
   *         number of non-zero elements<br>
   *         The value is 1 if the non-zero comes from the first (i.e. this) object, 2 if it is from<br>
   *         the second and 3 (i.e. 1 | 2) if from both<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity intersect(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y, SWIGTYPE_p_std__vectorT_unsigned_char_t mapping) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_intersect__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y, SWIGTYPE_p_std__vectorT_unsigned_char_t.getCPtr(mapping)), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity intersect(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_intersect__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y), true);
  }

  /**
   *  <br>
   *  Is subset?
   */
  public boolean is_subset(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity rhs) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_subset(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(rhs), rhs);
  }

  /**
   *  Propagates subset according to sparsity cast<br>
   * <br>
   * Assumption: 'this' is a subset of X.<br>
   * <br>
   * Example:<br>
   * <br>
   * X = [ * . . .; . * . .; . . * .; . . . *]<br>
   * Y = [* *; . . ; * *]<br>
   * x = [ * . . .; . . . .; . . * .; . . . *]<br>
   * returns [* *; . . ; . *]<br>
   * <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sparsity_cast_mod(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity X, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity Y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_sparsity_cast_mod(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(X), X, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(Y), Y), true);
  }

  /**
   *  Take the inverse of a sparsity pattern; flip zeros and non-zeros
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity pattern_inverse() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_pattern_inverse(swigCPtr, this), true);
  }

  /**
   *  Propagate sparsity using 0-1 logic through a matrix product,<br>
   * <br>
   * no memory allocation: <tt>z = mul(x, y)</tt> with work vector<br>
   * Forward mode.<br>
   * <br>
   *         
   */
  public static void mul_sparsityF(SWIGTYPE_p_bvec_t x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x_sp, SWIGTYPE_p_bvec_t y, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y_sp, SWIGTYPE_p_bvec_t z, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity z_sp, SWIGTYPE_p_bvec_t w) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_mul_sparsityF(SWIGTYPE_p_bvec_t.getCPtr(x), de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x_sp), x_sp, SWIGTYPE_p_bvec_t.getCPtr(y), de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y_sp), y_sp, SWIGTYPE_p_bvec_t.getCPtr(z), de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(z_sp), z_sp, SWIGTYPE_p_bvec_t.getCPtr(w));
  }

  /**
   *  Propagate sparsity using 0-1 logic through a matrix product,<br>
   * <br>
   * no memory allocation: <tt>z = mul(x, y)</tt> with work vector<br>
   * Reverse mode.<br>
   * <br>
   *         
   */
  public static void mul_sparsityR(SWIGTYPE_p_bvec_t x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x_sp, SWIGTYPE_p_bvec_t y, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y_sp, SWIGTYPE_p_bvec_t z, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity z_sp, SWIGTYPE_p_bvec_t w) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_mul_sparsityR(SWIGTYPE_p_bvec_t.getCPtr(x), de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x_sp), x_sp, SWIGTYPE_p_bvec_t.getCPtr(y), de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y_sp), y_sp, SWIGTYPE_p_bvec_t.getCPtr(z), de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(z_sp), z_sp, SWIGTYPE_p_bvec_t.getCPtr(w));
  }

  /**
   *  Conditional comment: INTERNAL<br>
   *  Accessed by SparsityInterface<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity horzcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_horzcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity.getCPtr(sp), sp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity vertcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_vertcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity.getCPtr(sp), sp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity blockcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorCasadiSparsity v) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_blockcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorCasadiSparsity.getCPtr(v), v), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity diagcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity v) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_diagcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity.getCPtr(v), v), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity horzsplit(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt offset) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_horzsplit(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(offset), offset), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity vertsplit(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt offset) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_vertsplit(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(offset), offset), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity diagsplit(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt offset1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt offset2) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_diagsplit(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(offset1), offset1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(offset2), offset2), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity mtimes(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_mtimes(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity mac(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity y, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity z) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_mac(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(y), y, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(z), z), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity reshape(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, long nrow, long ncol) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_reshape__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, nrow, ncol), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity reshape(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_reshape__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sparsity_cast(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_sparsity_cast(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public static long sprank(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_sprank(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x);
  }

  public static long norm_0_mul(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity A) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_norm_0_mul(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(A), A);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity kron(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity a, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity b) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_kron(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(a), a, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(b), b), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity triu(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, boolean includeDiagonal) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_triu__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, includeDiagonal), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity triu(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_triu__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity tril(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x, boolean includeDiagonal) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_tril__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x, includeDiagonal), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity tril(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_tril__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sum2(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_sum2(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sum1(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_sum1(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(x), x), true);
  }

  /**
   *  Enlarge matrix<br>
   * <br>
   *         Make the matrix larger by inserting empty rows and columns, keeping the existing non-zeros<br>
   * <br>
   *         For the matrices A to B<br>
   *         A(m, n)<br>
   *         length(jj)=m , length(ii)=n<br>
   *         B(nrow, ncol)<br>
   * <br>
   *         A=enlarge(m, n, ii, jj) makes sure that<br>
   * <br>
   *         B[jj, ii] == A<br>
   * <br>
   *         
   */
  public void enlarge(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc, boolean ind1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_enlarge__SWIG_0(swigCPtr, this, nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc, ind1);
  }

  /**
   *  Enlarge matrix<br>
   * <br>
   *         Make the matrix larger by inserting empty rows and columns, keeping the existing non-zeros<br>
   * <br>
   *         For the matrices A to B<br>
   *         A(m, n)<br>
   *         length(jj)=m , length(ii)=n<br>
   *         B(nrow, ncol)<br>
   * <br>
   *         A=enlarge(m, n, ii, jj) makes sure that<br>
   * <br>
   *         B[jj, ii] == A<br>
   * <br>
   *         
   */
  public void enlarge(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_enlarge__SWIG_1(swigCPtr, this, nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc);
  }

  /**
   *  Enlarge the matrix along the first dimension (i.e. insert rows)<br>
   * <br>
   *         
   */
  public void enlargeRows(long nrow, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, boolean ind1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_enlargeRows__SWIG_0(swigCPtr, this, nrow, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, ind1);
  }

  /**
   *  Enlarge the matrix along the first dimension (i.e. insert rows)<br>
   * <br>
   *         
   */
  public void enlargeRows(long nrow, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_enlargeRows__SWIG_1(swigCPtr, this, nrow, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr);
  }

  /**
   *  Enlarge the matrix along the second dimension (i.e. insert columns)<br>
   * <br>
   *         
   */
  public void enlargeColumns(long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc, boolean ind1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_enlargeColumns__SWIG_0(swigCPtr, this, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc, ind1);
  }

  /**
   *  Enlarge the matrix along the second dimension (i.e. insert columns)<br>
   * <br>
   *         
   */
  public void enlargeColumns(long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_enlargeColumns__SWIG_1(swigCPtr, this, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc);
  }

  /**
   *  Make a patten dense<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity makeDense(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_makeDense(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT), true);
  }

  /**
   *  Erase rows and/or columns of a matrix<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt erase(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc, boolean ind1) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_erase__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc, ind1), true);
  }

  /**
   *  Erase rows and/or columns of a matrix<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt erase(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_erase__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc), true);
  }

  /**
   *  Erase elements of a matrix<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt erase(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, boolean ind1) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_erase__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, ind1), true);
  }

  /**
   *  Erase elements of a matrix<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt erase(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_erase__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr), true);
  }

  /**
   *  Append another sparsity patten vertically (NOTE: only efficient if vector)
   */
  public void append(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_append(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp);
  }

  /**
   *  Append another sparsity patten horizontally
   */
  public void appendColumns(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_appendColumns(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp);
  }

  /**
   *  Is scalar?
   */
  public boolean is_scalar(boolean scalar_and_dense) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_scalar__SWIG_0(swigCPtr, this, scalar_and_dense);
  }

  /**
   *  Is scalar?
   */
  public boolean is_scalar() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_scalar__SWIG_1(swigCPtr, this);
  }

  /**
   *  Is dense?
   */
  public boolean is_dense() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_dense(swigCPtr, this);
  }

  /**
   *  Check if the pattern is a row vector (i.e. size1()==1)<br>
   * <br>
   *         
   */
  public boolean is_row() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_row(swigCPtr, this);
  }

  /**
   *  Check if the pattern is a column vector (i.e. size2()==1)<br>
   * <br>
   *         
   */
  public boolean is_column() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_column(swigCPtr, this);
  }

  /**
   *  Check if the pattern is a row or column vector<br>
   * <br>
   *         
   */
  public boolean is_vector() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_vector(swigCPtr, this);
  }

  /**
   *  Is diagonal?<br>
   * <br>
   *         
   */
  public boolean is_diag() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_diag(swigCPtr, this);
  }

  /**
   *  Is square?<br>
   * <br>
   *         
   */
  public boolean is_square() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_square(swigCPtr, this);
  }

  /**
   *  Is symmetric?<br>
   * <br>
   *         
   */
  public boolean is_symmetric() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_symmetric(swigCPtr, this);
  }

  /**
   *  Is upper triangular?<br>
   * <br>
   *         
   */
  public boolean is_triu(boolean strictly) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_triu__SWIG_0(swigCPtr, this, strictly);
  }

  /**
   *  Is upper triangular?<br>
   * <br>
   *         
   */
  public boolean is_triu() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_triu__SWIG_1(swigCPtr, this);
  }

  /**
   *  Is lower triangular?<br>
   * <br>
   *         
   */
  public boolean is_tril(boolean strictly) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_tril__SWIG_0(swigCPtr, this, strictly);
  }

  /**
   *  Is lower triangular?<br>
   * <br>
   *         
   */
  public boolean is_tril() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_tril__SWIG_1(swigCPtr, this);
  }

  /**
   *  Check whether the sparsity-pattern indicates structural singularity<br>
   * <br>
   *         
   */
  public boolean is_singular() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_singular(swigCPtr, this);
  }

  /**
   *  Is this a permutation matrix?<br>
   * <br>
   * A Matrix P is permutation matrix if right multiplication with a dense vector v leads to <br>
   * a vector with the same elements, but permuted.<br>
   * <br>
   * Implies square<br>
   * <br>
   * Equivalent to is_orthonormal(false)<br>
   * <br>
   *         
   */
  public boolean is_permutation() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_permutation(swigCPtr, this);
  }

  /**
   *  Is this a selection matrix?<br>
   * <br>
   * A Matrix S is selection matrix if right multiplication with a dense vector leads to <br>
   * a vector with a subset of the elements of the original vector<br>
   * <br>
   * @param allow_empty Allow the resultant vector to have structural zeros<br>
   * <br>
   * Equivalent to is_orthonormal_rows(allow_empty)<br>
   * <br>
   *         
   */
  public boolean is_selection(boolean allow_empty) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_selection__SWIG_0(swigCPtr, this, allow_empty);
  }

  /**
   *  Is this a selection matrix?<br>
   * <br>
   * A Matrix S is selection matrix if right multiplication with a dense vector leads to <br>
   * a vector with a subset of the elements of the original vector<br>
   * <br>
   * <br>
   * <br>
   * Equivalent to is_orthonormal_rows(allow_empty)<br>
   * <br>
   *         
   */
  public boolean is_selection() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_selection__SWIG_1(swigCPtr, this);
  }

  /**
   *  Are both rows and columns orthonormal ?<br>
   * <br>
   * @param allow_empty Disregard empty rows and columns in the analysis<br>
   * <br>
   *         
   */
  public boolean is_orthonormal(boolean allow_empty) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_orthonormal__SWIG_0(swigCPtr, this, allow_empty);
  }

  /**
   *  Are both rows and columns orthonormal ?<br>
   * <br>
   * <br>
   * <br>
   *         
   */
  public boolean is_orthonormal() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_orthonormal__SWIG_1(swigCPtr, this);
  }

  /**
   *  Are the rows of the pattern orthonormal ?<br>
   * <br>
   * @param allow_empty Disregard empty rows in the analysis<br>
   * <br>
   *         
   */
  public boolean is_orthonormal_rows(boolean allow_empty) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_orthonormal_rows__SWIG_0(swigCPtr, this, allow_empty);
  }

  /**
   *  Are the rows of the pattern orthonormal ?<br>
   * <br>
   * <br>
   * <br>
   *         
   */
  public boolean is_orthonormal_rows() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_orthonormal_rows__SWIG_1(swigCPtr, this);
  }

  /**
   *  Are the columns of the pattern orthonormal ?<br>
   * <br>
   * @param allow_empty Disregard empty columns in the analysis<br>
   * <br>
   *         
   */
  public boolean is_orthonormal_columns(boolean allow_empty) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_orthonormal_columns__SWIG_0(swigCPtr, this, allow_empty);
  }

  /**
   *  Are the columns of the pattern orthonormal ?<br>
   * <br>
   * <br>
   * <br>
   *         
   */
  public boolean is_orthonormal_columns() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_is_orthonormal_columns__SWIG_1(swigCPtr, this);
  }

  /**
   *  Do the rows appear sequentially on each column<br>
   * <br>
   * @param strictly if true, then do not allow multiple entries<br>
   * <br>
   *         
   */
  public boolean rowsSequential(boolean strictly) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_rowsSequential__SWIG_0(swigCPtr, this, strictly);
  }

  /**
   *  Do the rows appear sequentially on each column<br>
   * <br>
   * <br>
   * <br>
   *         
   */
  public boolean rowsSequential() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_rowsSequential__SWIG_1(swigCPtr, this);
  }

  /**
   *  Remove duplicate entries<br>
   * <br>
   * The same indices will be removed from the <i>mapping</i> vector,<br>
   * which must have the same length as the number of nonzeros<br>
   * <br>
   *         
   */
  public void removeDuplicates(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt INOUT) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_removeDuplicates(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(INOUT), INOUT);
  }

  /**
   *  Calculate the elimination tree<br>
   * <br>
   *         See Direct Methods for Sparse Linear Systems by Davis (2006).<br>
   *         If the parameter ata is false, the algorithm is equivalent to MATLAB's etree(A), except that<br>
   *         the indices are zero-based. If ata is true, the algorithm is equivalent to MATLAB's<br>
   *         etree(A, 'col').<br>
   * <br>
   *         The implementation is a modified version of cs_etree in CSparse<br>
   *         Copyright(c) Timothy A. Davis, 2006-2009<br>
   *         Licensed as a derivative work under the GNU LGPL<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt etree(boolean ata) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_etree__SWIG_0(swigCPtr, this, ata), true);
  }

  /**
   *  Calculate the elimination tree<br>
   * <br>
   *         See Direct Methods for Sparse Linear Systems by Davis (2006).<br>
   *         If the parameter ata is false, the algorithm is equivalent to MATLAB's etree(A), except that<br>
   *         the indices are zero-based. If ata is true, the algorithm is equivalent to MATLAB's<br>
   *         etree(A, 'col').<br>
   * <br>
   *         The implementation is a modified version of cs_etree in CSparse<br>
   *         Copyright(c) Timothy A. Davis, 2006-2009<br>
   *         Licensed as a derivative work under the GNU LGPL<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt etree() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_etree__SWIG_1(swigCPtr, this), true);
  }

  /**
   *  Symbolic LDL factorization<br>
   * <br>
   *         Returns the sparsity pattern of L^T<br>
   * <br>
   *         The implementation is a modified version of LDL<br>
   *         Copyright(c) Timothy A. Davis, 2005-2013<br>
   *         Licensed as a derivative work under the GNU LGPL<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity ldl(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, boolean amd) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_ldl__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, amd), true);
  }

  /**
   *  Symbolic LDL factorization<br>
   * <br>
   *         Returns the sparsity pattern of L^T<br>
   * <br>
   *         The implementation is a modified version of LDL<br>
   *         Copyright(c) Timothy A. Davis, 2005-2013<br>
   *         Licensed as a derivative work under the GNU LGPL<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity ldl(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_ldl__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT), true);
  }

  /**
   *  Symbolic QR factorization<br>
   * <br>
   *         Returns the sparsity pattern of V (compact representation of Q) and R<br>
   *         as well as vectors needed for the numerical factorization and solution.<br>
   *         The implementation is a modified version of CSparse<br>
   *         Copyright(c) Timothy A. Davis, 2006-2009<br>
   *         Licensed as a derivative work under the GNU LGPL<br>
   * <br>
   *         
   */
  public void qr_sparse(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity arg1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg2, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg3, boolean amd) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_qr_sparse__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(arg1), arg1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg2), arg2, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg3), arg3, amd);
  }

  /**
   *  Symbolic QR factorization<br>
   * <br>
   *         Returns the sparsity pattern of V (compact representation of Q) and R<br>
   *         as well as vectors needed for the numerical factorization and solution.<br>
   *         The implementation is a modified version of CSparse<br>
   *         Copyright(c) Timothy A. Davis, 2006-2009<br>
   *         Licensed as a derivative work under the GNU LGPL<br>
   * <br>
   *         
   */
  public void qr_sparse(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity arg1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg2, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg3) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_qr_sparse__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(arg1), arg1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg2), arg2, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg3), arg3);
  }

  /**
   *  Depth-first search on the adjacency graph of the sparsity<br>
   * <br>
   *         See Direct Methods for Sparse Linear Systems by Davis (2006).<br>
   * <br>
   *         
   */
  public long dfs(long j, long top, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt INOUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg3, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt pinv, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool arg5) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_dfs(swigCPtr, this, j, top, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(INOUT), INOUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg3), arg3, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(pinv), pinv, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool.getCPtr(arg5), arg5);
  }

  /**
   *  Find the strongly connected components of the bigraph defined by the sparsity pattern<br>
   * <br>
   *         of a square matrix<br>
   * <br>
   *         See Direct Methods for Sparse Linear Systems by Davis (2006).<br>
   *         Returns:<br>
   *         - Number of components<br>
   *         - Offset for each components (length: 1 + number of components)<br>
   *         - Indices for each components, component i has indices<br>
   *           index[offset[i]], ..., index[offset[i+1]]<br>
   * <br>
   *         In the case that the matrix is symmetric, the result has a particular interpretation:<br>
   *         Given a symmetric matrix A and<br>
   *         n = A.scc(p, r)<br>
   * <br>
   *         =&gt; A[p, p] will appear block-diagonal with n blocks and<br>
   *         with the indices of the block boundaries to be found in r.<br>
   * <br>
   *         The implementation is a modified version of cs_scc in CSparse<br>
   *         Copyright(c) Timothy A. Davis, 2006-2009<br>
   *         Licensed as a derivative work under the GNU LGPL<br>
   * <br>
   *         
   */
  public long scc(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg1) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_scc(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg1), arg1);
  }

  /**
   *  Calculate the block triangular form (BTF)<br>
   * <br>
   *         See Direct Methods for Sparse Linear Systems by Davis (2006).<br>
   * <br>
   *         The function computes the Dulmage-Mendelsohn decomposition, which allows you to reorder<br>
   *         the rows and columns of a matrix to bring it into block triangular form (BTF).<br>
   * <br>
   *         It will not consider the distance of off-diagonal elements to the diagonal:<br>
   *         there is no guarantee you will get a block-diagonal matrix if you supply a randomly<br>
   *         permuted block-diagonal matrix.<br>
   * <br>
   *         If your matrix is symmetrical, this method is of limited use; permutation can make it<br>
   *         non-symmetric.<br>
   * <br>
   *         @see scc<br>
   * <br>
   *         The implementation is a modified version of cs_dmperm in CSparse<br>
   *         Copyright(c) Timothy A. Davis, 2006-2009<br>
   *         Licensed as a derivative work under the GNU LGPL<br>
   * <br>
   *         
   */
  public long btf(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg2, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg3, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg4, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt arg5) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_btf(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg1), arg1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg2), arg2, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg3), arg3, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg4), arg4, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(arg5), arg5);
  }

  /**
   *  Approximate minimal degree preordering<br>
   * <br>
   *       Fill-reducing ordering applied to the sparsity pattern of a linear system<br>
   *       prior to factorization.<br>
   *       The system must be symmetric, for an unsymmetric matrix A, first form the square<br>
   *       of the pattern, A'*A.<br>
   * <br>
   *       The implementation is a modified version of cs_amd in CSparse<br>
   *       Copyright(c) Timothy A. Davis, 2006-2009<br>
   *       Licensed as a derivative work under the GNU LGPL<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt amd() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_amd(swigCPtr, this), true);
  }

  /**
   *  Propagate sparsity through a linear solve<br>
   * <br>
   *         
   */
  public void spsolve(SWIGTYPE_p_bvec_t X, SWIGTYPE_p_bvec_t B, boolean tr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_spsolve(swigCPtr, this, SWIGTYPE_p_bvec_t.getCPtr(X), SWIGTYPE_p_bvec_t.getCPtr(B), tr);
  }

  /**
   *  Get the location of all non-zero elements as they would appear in a Dense matrix<br>
   * <br>
   *         A : DenseMatrix  4 x 3<br>
   *         B : SparseMatrix 4 x 3 , 5 structural non-zeros<br>
   * <br>
   *         k = A.find()<br>
   *         A[k] will contain the elements of A that are non-zero in B<br>
   * <br>
   *         Inverse of `nonzeros`.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt find(boolean ind1) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_find__SWIG_0(swigCPtr, this, ind1), true);
  }

  /**
   *  Get the location of all non-zero elements as they would appear in a Dense matrix<br>
   * <br>
   *         A : DenseMatrix  4 x 3<br>
   *         B : SparseMatrix 4 x 3 , 5 structural non-zeros<br>
   * <br>
   *         k = A.find()<br>
   *         A[k] will contain the elements of A that are non-zero in B<br>
   * <br>
   *         Inverse of `nonzeros`.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt find() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_find__SWIG_1(swigCPtr, this), true);
  }

  /**
   *  Get the location of all nonzero elements (inplace version)
   */
  public void find(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt loc, boolean ind1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_find__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(loc), loc, ind1);
  }

  /**
   *  Get the location of all nonzero elements (inplace version)
   */
  public void find(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt loc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_find__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(loc), loc);
  }

  /**
   *  Perform a unidirectional coloring: A greedy distance-2 coloring algorithm<br>
   * <br>
   *         (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity uni_coloring(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity AT, long cutoff) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_uni_coloring__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(AT), AT, cutoff), true);
  }

  /**
   *  Perform a unidirectional coloring: A greedy distance-2 coloring algorithm<br>
   * <br>
   *         (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity uni_coloring(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity AT) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_uni_coloring__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(AT), AT), true);
  }

  /**
   *  Perform a unidirectional coloring: A greedy distance-2 coloring algorithm<br>
   * <br>
   *         (Algorithm 3.1 in A. H. GEBREMEDHIN, F. MANNE, A. POTHEN)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity uni_coloring() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_uni_coloring__SWIG_2(swigCPtr, this), true);
  }

  /**
   *  Perform a star coloring of a symmetric matrix:<br>
   * <br>
   *         A greedy distance-2 coloring algorithm<br>
   *         Algorithm 4.1 in<br>
   *           What Color Is Your Jacobian? Graph Coloring for Computing Derivatives<br>
   *           A. H. GEBREMEDHIN, F. MANNE, A. POTHEN<br>
   *           SIAM Rev., 47(4), 629–705 (2006)<br>
   * <br>
   *         Ordering options: None (0), largest first (1)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity star_coloring(long ordering, long cutoff) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_star_coloring__SWIG_0(swigCPtr, this, ordering, cutoff), true);
  }

  /**
   *  Perform a star coloring of a symmetric matrix:<br>
   * <br>
   *         A greedy distance-2 coloring algorithm<br>
   *         Algorithm 4.1 in<br>
   *           What Color Is Your Jacobian? Graph Coloring for Computing Derivatives<br>
   *           A. H. GEBREMEDHIN, F. MANNE, A. POTHEN<br>
   *           SIAM Rev., 47(4), 629–705 (2006)<br>
   * <br>
   *         Ordering options: None (0), largest first (1)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity star_coloring(long ordering) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_star_coloring__SWIG_1(swigCPtr, this, ordering), true);
  }

  /**
   *  Perform a star coloring of a symmetric matrix:<br>
   * <br>
   *         A greedy distance-2 coloring algorithm<br>
   *         Algorithm 4.1 in<br>
   *           What Color Is Your Jacobian? Graph Coloring for Computing Derivatives<br>
   *           A. H. GEBREMEDHIN, F. MANNE, A. POTHEN<br>
   *           SIAM Rev., 47(4), 629–705 (2006)<br>
   * <br>
   *         Ordering options: None (0), largest first (1)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity star_coloring() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_star_coloring__SWIG_2(swigCPtr, this), true);
  }

  /**
   *  Perform a star coloring of a symmetric matrix:<br>
   * <br>
   *         A new greedy distance-2 coloring algorithm<br>
   *         Algorithm 4.1 in<br>
   *           NEW ACYCLIC AND STAR COLORING ALGORITHMS WITH APPLICATION TO COMPUTING HESSIANS<br>
   *           A. H. GEBREMEDHIN, A. TARAFDAR, F. MANNE, A. POTHEN<br>
   *           SIAM J. SCI. COMPUT. Vol. 29, No. 3, pp. 1042–1072 (2007)<br>
   * <br>
   *         Ordering options: None (0), largest first (1)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity star_coloring2(long ordering, long cutoff) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_star_coloring2__SWIG_0(swigCPtr, this, ordering, cutoff), true);
  }

  /**
   *  Perform a star coloring of a symmetric matrix:<br>
   * <br>
   *         A new greedy distance-2 coloring algorithm<br>
   *         Algorithm 4.1 in<br>
   *           NEW ACYCLIC AND STAR COLORING ALGORITHMS WITH APPLICATION TO COMPUTING HESSIANS<br>
   *           A. H. GEBREMEDHIN, A. TARAFDAR, F. MANNE, A. POTHEN<br>
   *           SIAM J. SCI. COMPUT. Vol. 29, No. 3, pp. 1042–1072 (2007)<br>
   * <br>
   *         Ordering options: None (0), largest first (1)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity star_coloring2(long ordering) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_star_coloring2__SWIG_1(swigCPtr, this, ordering), true);
  }

  /**
   *  Perform a star coloring of a symmetric matrix:<br>
   * <br>
   *         A new greedy distance-2 coloring algorithm<br>
   *         Algorithm 4.1 in<br>
   *           NEW ACYCLIC AND STAR COLORING ALGORITHMS WITH APPLICATION TO COMPUTING HESSIANS<br>
   *           A. H. GEBREMEDHIN, A. TARAFDAR, F. MANNE, A. POTHEN<br>
   *           SIAM J. SCI. COMPUT. Vol. 29, No. 3, pp. 1042–1072 (2007)<br>
   * <br>
   *         Ordering options: None (0), largest first (1)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity star_coloring2() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_star_coloring2__SWIG_2(swigCPtr, this), true);
  }

  /**
   *  Order the columns by decreasing degree<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt largest_first() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_largest_first(swigCPtr, this), true);
  }

  /**
   *  Permute rows and/or columns<br>
   * <br>
   *         Multiply the sparsity with a permutation matrix from the left and/or from the right<br>
   *         P * A * trans(P), A * trans(P) or A * trans(P) with P defined by an index vector<br>
   *         containing the row for each col. As an alternative, P can be transposed (inverted).<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity pmult(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt p, boolean permute_rows, boolean permute_columns, boolean invert_permutation) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_pmult__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(p), p, permute_rows, permute_columns, invert_permutation), true);
  }

  /**
   *  Permute rows and/or columns<br>
   * <br>
   *         Multiply the sparsity with a permutation matrix from the left and/or from the right<br>
   *         P * A * trans(P), A * trans(P) or A * trans(P) with P defined by an index vector<br>
   *         containing the row for each col. As an alternative, P can be transposed (inverted).<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity pmult(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt p, boolean permute_rows, boolean permute_columns) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_pmult__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(p), p, permute_rows, permute_columns), true);
  }

  /**
   *  Permute rows and/or columns<br>
   * <br>
   *         Multiply the sparsity with a permutation matrix from the left and/or from the right<br>
   *         P * A * trans(P), A * trans(P) or A * trans(P) with P defined by an index vector<br>
   *         containing the row for each col. As an alternative, P can be transposed (inverted).<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity pmult(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt p, boolean permute_rows) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_pmult__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(p), p, permute_rows), true);
  }

  /**
   *  Permute rows and/or columns<br>
   * <br>
   *         Multiply the sparsity with a permutation matrix from the left and/or from the right<br>
   *         P * A * trans(P), A * trans(P) or A * trans(P) with P defined by an index vector<br>
   *         containing the row for each col. As an alternative, P can be transposed (inverted).<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity pmult(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt p) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_pmult__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(p), p), true);
  }

  /**
   *  Get the dimension as a string
   */
  public String dim(boolean with_nz) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_dim__SWIG_0(swigCPtr, this, with_nz);
  }

  /**
   *  Get the dimension as a string
   */
  public String dim() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_dim__SWIG_1(swigCPtr, this);
  }

  /**
   *  Dimension string as a postfix to a name<br>
   * <br>
   *       Rules:<br>
   *       1. Dense and scalar: ""<br>
   *       2. 0-by-0: "[]"<br>
   *       3. Dense column vector: "[5]"<br>
   *       4. Dense matrix: "[5x10]"<br>
   *       5. Otherwise: "[5x10,3nz]"<br>
   * <br>
   *         
   */
  public String postfix_dim() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_postfix_dim(swigCPtr, this);
  }

  /**
   *  Describe the nonzero location k as a string
   */
  public String repr_el(long k) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_repr_el(swigCPtr, this, k);
  }

  /**
   *  Print a textual representation of sparsity<br>
   * <br>
   *         
   */
  public void spy(SWIGTYPE_p_std__ostream stream) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_spy__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(stream));
  }

  /**
   *  Print a textual representation of sparsity<br>
   * <br>
   *         
   */
  public void spy() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_spy__SWIG_1(swigCPtr, this);
  }

  /**
   *  Generate a script for Matlab or Octave which visualizes<br>
   * <br>
   * the sparsity using the spy command<br>
   * <br>
   *         
   */
  public void spy_matlab(String mfile) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_spy_matlab(swigCPtr, this, mfile);
  }

  /**
   *  Export matrix in specific language<br>
   * <br>
   * lang: only 'matlab' supported for now<br>
   * {@literal 
  options:
    inline: Indicates if you want everything on a single line (default: False)
    name: Name of exported variable (default: 'sp')
    as_matrix: Matlab does not have a sparsity object. (default: false)
                With this option true, a numeric matrix will be constructed
  }<br>
   * <br>
   *         
   */
  public void export_code(String lang, SWIGTYPE_p_std__ostream stream, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_export_code__SWIG_0(swigCPtr, this, lang, SWIGTYPE_p_std__ostream.getCPtr(stream), de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options);
  }

  /**
   *  Export matrix in specific language<br>
   * <br>
   * lang: only 'matlab' supported for now<br>
   * {@literal 
  options:
    inline: Indicates if you want everything on a single line (default: False)
    name: Name of exported variable (default: 'sp')
    as_matrix: Matlab does not have a sparsity object. (default: false)
                With this option true, a numeric matrix will be constructed
  }<br>
   * <br>
   *         
   */
  public void export_code(String lang, SWIGTYPE_p_std__ostream stream) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_export_code__SWIG_1(swigCPtr, this, lang, SWIGTYPE_p_std__ostream.getCPtr(stream));
  }

  /**
   *  Export matrix in specific language<br>
   * <br>
   * lang: only 'matlab' supported for now<br>
   * {@literal 
  options:
    inline: Indicates if you want everything on a single line (default: False)
    name: Name of exported variable (default: 'sp')
    as_matrix: Matlab does not have a sparsity object. (default: false)
                With this option true, a numeric matrix will be constructed
  }<br>
   * <br>
   *         
   */
  public void export_code(String lang) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_export_code__SWIG_2(swigCPtr, this, lang);
  }

  /**
   *  Readable name of the public class
   */
  public static String type_name() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_type_name();
  }

  public long hash() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_hash(swigCPtr, this);
  }

  /**
   *  Check if a particular cast is allowed
   */
  public static boolean test_cast(SWIGTYPE_p_SharedObjectInternal ptr) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_test_cast(SWIGTYPE_p_SharedObjectInternal.getCPtr(ptr));
  }

  /**
   *  Get KKT system sparsity<br>
   * <br>
   * [H + I1, J'; J, I2] where I1 and I2 are optional<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity kkt(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity H, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity J, boolean with_x_diag, boolean with_lam_g_diag) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_kkt__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(H), H, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(J), J, with_x_diag, with_lam_g_diag), true);
  }

  /**
   *  Get KKT system sparsity<br>
   * <br>
   * [H + I1, J'; J, I2] where I1 and I2 are optional<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity kkt(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity H, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity J, boolean with_x_diag) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_kkt__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(H), H, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(J), J, with_x_diag), true);
  }

  /**
   *  Get KKT system sparsity<br>
   * <br>
   * [H + I1, J'; J, I2] where I1 and I2 are optional<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity kkt(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity H, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity J) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_kkt__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(H), H, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(J), J), true);
  }

  public static String file_format(String filename, String format_hint, SWIGTYPE_p_std__setT_std__string_t file_formats) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_file_format(filename, format_hint, SWIGTYPE_p_std__setT_std__string_t.getCPtr(file_formats));
  }

  public String toString(boolean more) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_toString__SWIG_0(swigCPtr, this, more);
  }

  public String toString() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Sparsity_toString__SWIG_1(swigCPtr, this);
  }

  public Sparsity(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity other) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Sparsity__SWIG_8(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(other), other), true);
  }

}
