/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.casadi;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

/**
 *  Collects global CasADi options<br>
 * <br>
 * <br>
 * Note to developers:  <br>
 * <br>
 *  - use sparingly. Global options are - in general - a rather bad idea <br>
 * <br>
 *  - this class must never be instantiated. Access its static members directly <br>
 * <br>
 * <br>
 *  @author Joris Gillis<br>
 *  2012<br>
 * <br>
 *       
 */
public class GlobalOptions {
  private final long swigCPtr;

  public GlobalOptions(long cPtr, boolean cMemoryOwn) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, cPtr, GlobalOptions::delete);
  	}
  }

  /**
  * <pre>
  * In C++, deleting a pointer twice is undefined behavior!
  * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
  * Using this baseclass constructor for subtypes prevents that.
  * </pre>
  */
  protected GlobalOptions(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
	  }
  }

  public static long getCPtr(GlobalOptions obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_casadi_GlobalOptions(swigCPtr);
}

  public static void setSimplificationOnTheFly(boolean flag) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_setSimplificationOnTheFly(flag);
  }

  public static boolean getSimplificationOnTheFly() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_getSimplificationOnTheFly();
  }

  public static void setHierarchicalSparsity(boolean flag) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_setHierarchicalSparsity(flag);
  }

  public static boolean getHierarchicalSparsity() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_getHierarchicalSparsity();
  }

  public static void setCasadiPath(String path) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_setCasadiPath(path);
  }

  public static String getCasadiPath() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_getCasadiPath();
  }

  public static void setCasadiIncludePath(String path) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_setCasadiIncludePath(path);
  }

  public static String getCasadiIncludePath() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_getCasadiIncludePath();
  }

  public static void setMaxNumDir(long ndir) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_setMaxNumDir(ndir);
  }

  public static long getMaxNumDir() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_getMaxNumDir();
  }

  public static void setCopyElisionMinSize(long sz) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_setCopyElisionMinSize(sz);
  }

  public static long getCopyElisionMinSize() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_GlobalOptions_getCopyElisionMinSize();
  }

  public GlobalOptions(de.dhbw.rahmlab.casadi.impl.casadi.GlobalOptions other) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_GlobalOptions(de.dhbw.rahmlab.casadi.impl.casadi.GlobalOptions.getCPtr(other), other), true);
  }

}
