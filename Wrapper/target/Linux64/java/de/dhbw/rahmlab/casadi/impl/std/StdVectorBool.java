/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.std;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

public class StdVectorBool extends java.util.AbstractList<Boolean> implements java.util.RandomAccess {
  private final long swigCPtr;

  public StdVectorBool(long cPtr, boolean cMemoryOwn) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, cPtr, StdVectorBool::delete);
  	}
  }

  /**
  * <pre>
  * In C++, deleting a pointer twice is undefined behavior!
  * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
  * Using this baseclass constructor for subtypes prevents that.
  * </pre>
  */
  protected StdVectorBool(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
	  }
  }

  public static long getCPtr(StdVectorBool obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_std_StdVectorBool(swigCPtr);
}

  public StdVectorBool(boolean[] initialElements) {
    this();
    reserve(initialElements.length);

    for (boolean element : initialElements) {
      add(element);
    }
  }

  public StdVectorBool(Iterable<Boolean> initialElements) {
    this();
    for (boolean element : initialElements) {
      add(element);
    }
  }

  public Boolean get(int index) {
    return doGet(index);
  }

  public Boolean set(int index, Boolean e) {
    return doSet(index, e);
  }

  public boolean add(Boolean e) {
    modCount++;
    doAdd(e);
    return true;
  }

  public void add(int index, Boolean e) {
    modCount++;
    doAdd(index, e);
  }

  public Boolean remove(int index) {
    modCount++;
    return doRemove(index);
  }

  protected void removeRange(int fromIndex, int toIndex) {
    modCount++;
    doRemoveRange(fromIndex, toIndex);
  }

  public int size() {
    return doSize();
  }

  public int capacity() {
    return doCapacity();
  }

  public void reserve(int n) {
    doReserve(n);
  }

  public StdVectorBool() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_std_StdVectorBool__SWIG_0(), true);
  }

  public StdVectorBool(de.dhbw.rahmlab.casadi.impl.std.StdVectorBool other) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_std_StdVectorBool__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorBool.getCPtr(other), other), true);
  }

  public boolean isEmpty() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_isEmpty(swigCPtr, this);
  }

  public void clear() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_clear(swigCPtr, this);
  }

  public StdVectorBool(int count, boolean value) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_std_StdVectorBool__SWIG_2(count, value), true);
  }

  private int doCapacity() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_doCapacity(swigCPtr, this);
  }

  private void doReserve(int n) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_doReserve(swigCPtr, this, n);
  }

  private int doSize() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_doSize(swigCPtr, this);
  }

  private void doAdd(boolean x) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_doAdd__SWIG_0(swigCPtr, this, x);
  }

  private void doAdd(int index, boolean x) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_doAdd__SWIG_1(swigCPtr, this, index, x);
  }

  private boolean doRemove(int index) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_doRemove(swigCPtr, this, index);
  }

  private boolean doGet(int index) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_doGet(swigCPtr, this, index);
  }

  private boolean doSet(int index, boolean val) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_doSet(swigCPtr, this, index, val);
  }

  private void doRemoveRange(int fromIndex, int toIndex) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdVectorBool_doRemoveRange(swigCPtr, this, fromIndex, toIndex);
  }

}
