/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.casadi;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

/**
 *  Callback function functionality<br>
 * <br>
 *    This class provides a public API to the FunctionInternal class that<br>
 *    can be subclassed by the user, who is then able to implement the different<br>
 *    virtual method.<br>
 *    Note that the Function class also provides a public API to FunctionInternal,<br>
 *    but only allows calling, not being called.<br>
 * <br>
 *    The user is responsible for not deleting this class for the lifetime<br>
 *    of the internal function object.<br>
 * <br>
 *    @author Joris Gillis, Joel Andersson<br>
 *    2015<br>
 * <br>
 *       
 */
public class Callback extends de.dhbw.rahmlab.casadi.impl.casadi.Function {
  private final long swigCPtr;

  public Callback(long cPtr, boolean cMemoryOwn) {
    super(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_SWIGUpcast(cPtr), cMemoryOwn, cPtr, Callback::delete);
    this.swigCPtr = cPtr;
  }
  
  public static long getCPtr(Callback obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_casadi_Callback(swigCPtr);
}

  /**
   *  Get type name<br>
   * <br>
   *         
   */
  public static String type_name() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_type_name();
  }

  /**
   *  Default constructor<br>
   * <br>
   *         
   */
  public Callback() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Callback__SWIG_0(), true);
  }

  /**
   *  Copy constructor (throws an error)<br>
   * <br>
   *         
   */
  public Callback(de.dhbw.rahmlab.casadi.impl.casadi.Callback obj) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Callback__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.Callback.getCPtr(obj), obj), true);
  }

  /**
   *  Construct internal object<br>
   * <br>
   * This is the step that actually construct the internal object, as the<br>
   * class constructor only creates a null pointer.<br>
   * It should be called from the user constructor.<br>
   * <br>
   *         
   */
  public void construct(String name, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_construct__SWIG_0(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts);
  }

  /**
   *  Construct internal object<br>
   * <br>
   * This is the step that actually construct the internal object, as the<br>
   * class constructor only creates a null pointer.<br>
   * It should be called from the user constructor.<br>
   * <br>
   *         
   */
  public void construct(String name) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_construct__SWIG_1(swigCPtr, this, name);
  }

  /**
   *  Initialize the object<br>
   * <br>
   * This function is called after the object construction (for the whole class<br>
   * hierarchy) is complete, but before the finalization step.<br>
   * It is called recursively for the whole class hierarchy, starting with the<br>
   * lowest level.<br>
   * <br>
   *         
   */
  public void init() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_init(swigCPtr, this);
  }

  /**
   *  Finalize the object<br>
   * <br>
   * This function is called after the construction and init steps are completed,<br>
   * but before user functions are called.<br>
   * It is called recursively for the whole class hierarchy, starting with the<br>
   * highest level.<br>
   * <br>
   *         
   */
  public void close() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_close(swigCPtr, this);
  }

  /**
   *  Evaluate numerically, using temporary matrices and work vectors<br>
   * <br>
   * This signature is not thread-safe.<br>
   * For guaranteed thread-safety, use `eval_buffer`<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDM eval(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_eval(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg), true);
  }

  /**
   *  A copy-free low level interface<br>
   * <br>
   * In Python, you will be passed two tuples of memoryview objects<br>
   * Note that only the structural nonzeros are present in the memoryview objects/buffers.<br>
   * <br>
   * Make sure to override has_eval_buffer() to indicate support for this method.<br>
   * <br>
   *         
   */
  public int eval_buffer(SWIGTYPE_p_p_double arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt sizes_arg, SWIGTYPE_p_p_double res, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt sizes_res) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_eval_buffer(swigCPtr, this, SWIGTYPE_p_p_double.getCPtr(arg), de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(sizes_arg), sizes_arg, SWIGTYPE_p_p_double.getCPtr(res), de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(sizes_res), sizes_res);
  }

  /**
   *  Does the Callback class support a copy-free low level interface ?<br>
   * <br>
   * <br>
   *         
   */
  public boolean has_eval_buffer() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_has_eval_buffer(swigCPtr, this);
  }

  /**
   *  Get the number of inputs<br>
   * <br>
   * This function is called during construction.<br>
   * <br>
   *         
   */
  public long get_n_in() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_n_in(swigCPtr, this);
  }

  /**
   *  Get the number of outputs<br>
   * <br>
   * This function is called during construction.<br>
   * <br>
   *         
   */
  public long get_n_out() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_n_out(swigCPtr, this);
  }

  /**
   *  Get the sparsity of an input<br>
   * <br>
   * This function is called during construction.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity get_sparsity_in(long i) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_sparsity_in(swigCPtr, this, i), true);
  }

  /**
   *  Get the sparsity of an output<br>
   * <br>
   * This function is called during construction.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity get_sparsity_out(long i) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_sparsity_out(swigCPtr, this, i), true);
  }

  /**
   *  Get the name of an input<br>
   * <br>
   * This function is called during construction.<br>
   * <br>
   *         
   */
  public String get_name_in(long i) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_name_in(swigCPtr, this, i);
  }

  /**
   *  Get the name of an output<br>
   * <br>
   * This function is called during construction.<br>
   * <br>
   *         
   */
  public String get_name_out(long i) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_name_out(swigCPtr, this, i);
  }

  /**
   *  Do the derivative functions need nondifferentiated outputs?<br>
   * <br>
   *         
   */
  public boolean uses_output() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_uses_output(swigCPtr, this);
  }

  /**
   *  Customize calls to the function factory<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function get_factory(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_out, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToVectorString aux, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_factory(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_in), s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_out), s_out, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToVectorString.getCPtr(aux), aux, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * Return Jacobian of all input elements with respect to all output elements<br>
   * <br>
   *         
   */
  public boolean has_jacobian() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_has_jacobian(swigCPtr, this);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function get_jacobian(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString inames, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString onames, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_jacobian(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(inames), inames, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(onames), onames, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * <br>
   * Return function that calculates forward derivatives<br>
   * <br>
   *    forward(nfwd) returns a cached instance if available,<br>
   *    and calls <tt>Function get_forward(casadi_int nfwd)</tt><br>
   *    if no cached version is available.<br>
   * <br>
   *         
   */
  public boolean has_forward(long nfwd) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_has_forward(swigCPtr, this, nfwd);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function get_forward(long nfwd, String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString inames, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString onames, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_forward(swigCPtr, this, nfwd, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(inames), inames, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(onames), onames, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * <br>
   * Return function that calculates adjoint derivatives<br>
   * <br>
   *    reverse(nadj) returns a cached instance if available,<br>
   *    and calls <tt>Function get_reverse(casadi_int nadj)</tt><br>
   *    if no cached version is available.<br>
   * <br>
   *         
   */
  public boolean has_reverse(long nadj) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_has_reverse(swigCPtr, this, nadj);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function get_reverse(long nadj, String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString inames, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString onames, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_reverse(swigCPtr, this, nadj, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(inames), inames, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(onames), onames, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * <br>
   * Return sparsity of Jacobian of all input elements<br>
   * <br>
   * with respect to all output elements<br>
   * <br>
   *         
   */
  public boolean has_jac_sparsity(long oind, long iind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_has_jac_sparsity(swigCPtr, this, oind, iind);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity get_jac_sparsity(long oind, long iind, boolean symmetric) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Callback_get_jac_sparsity(swigCPtr, this, oind, iind, symmetric), true);
  }

}
