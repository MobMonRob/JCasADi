/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.casadi;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

/**
 *  Function object<br>
 * <br>
 *       A Function instance is a general multiple-input, multiple-output function<br>
 *       where each input and output can be a sparse matrix.<br>
 * <br>
 * <br>
 *       For an introduction to this class, see the CasADi user guide.<br>
 * <br>
 * <br>
 *       Function is a reference counted and immutable class; copying a class instance<br>
 *       is very cheap and its behavior (with some exceptions) is not affected by<br>
 *       calling its member functions.<br>
 * <br>
 * <br>
 *       @author Joel Andersson<br>
 *       2010-2017<br>
 * <br>
 *       
 */
public class Function implements ISharedObject {
  private final long swigCPtr;

  public Function(long cPtr, boolean cMemoryOwn) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, cPtr, Function::delete);
  	}
  }

  /**
  * <pre>
  * In C++, deleting a pointer twice is undefined behavior!
  * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
  * Using this baseclass constructor for subtypes prevents that.
  * </pre>
  */
  protected Function(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
	  }
  }

  public static long getCPtr(Function obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_casadi_Function(swigCPtr);
}

  public long ISharedObject_GetInterfaceCPtr() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_ISharedObject_GetInterfaceCPtr(swigCPtr);
  }

  /**
   *  Get type name<br>
   * <br>
   *         
   */
  public static String type_name() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_type_name();
  }

  /**
   *  Default constructor, null pointer<br>
   * <br>
   *         
   */
  public Function() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_0(), true);
  }

  /**
   *  Construct from a file<br>
   * <br>
   *         
   */
  public Function(String fname) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_1(fname), true);
  }

  /**
   * Construct an SX function<br>
   * <br>
   *         
   */
  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_2(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_in), ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * Construct an SX function<br>
   * <br>
   *         
   */
  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_3(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_in), ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_out), ex_out), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_4(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_in), ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_5(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_in), ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_6(name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dict), dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_7(name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dict), dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  /**
   * <br>
   * Construct an MX function<br>
   * <br>
   *         
   */
  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_8(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_in), ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * <br>
   * Construct an MX function<br>
   * <br>
   *         
   */
  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_9(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_in), ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_out), ex_out), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_10(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_in), ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_11(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_in), ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_12(name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dict), dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_13(name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dict), dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  /**
   * <br>
   * To resolve ambiguity on some compilers<br>
   * <br>
   *         
   */
  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_14(name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_in), de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * <br>
   * To resolve ambiguity on some compilers<br>
   * <br>
   *         
   */
  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_15(name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_in), de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_out), ex_out), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_16(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_in), ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_17(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_in), ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_out)), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_18(name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_in), SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_19(name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_in), SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_out)), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_20(name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_in), de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_21(name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_in), de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_22(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_in), ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_23(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(ex_in), ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_24(name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_in), SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_25(name, SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_in), SWIGTYPE_p_std__initializer_listT_casadi__MatrixT_casadi__SXElem_t_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_26(name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_in), de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_27(name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_in), de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_out), ex_out), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_28(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_in), ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_29(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_in), ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_out)), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_30(name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_in), SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_31(name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_in), SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_out)), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_32(name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_in), de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_33(name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_in), de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_out), ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_34(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_in), ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_35(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex_in), ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_36(name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_in), SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public Function(String name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_in, SWIGTYPE_p_std__initializer_listT_casadi__MX_t ex_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_37(name, SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_in), SWIGTYPE_p_std__initializer_listT_casadi__MX_t.getCPtr(ex_out), de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  /**
   * <br>
   * Create a just-in-time compiled function from a C language string<br>
   * <br>
   * The names and sparsity patterns of all the inputs and outputs must be provided.<br>
   * If sparsities are not provided, all inputs and outputs are assumed to be scalar.<br>
   * Only specify the function body, assuming that input and output nonzeros are<br>
   * stored in arrays with the specified naming convension.<br>
   * The data type used is 'casadi_real', which is typically equal to 'double` or<br>
   * another data type with the same API as 'double'.<br>
   * <br>
   * Inputs may be null pointers. This means that the all entries are zero.<br>
   * Outputs may be null points. This means that the corresponding result can be ignored.<br>
   * <br>
   * If an error occurs in the evaluation, issue "return 1;";<br>
   * <br>
   * The final generated function will have a structure similar to:<br>
   * <br>
   * casadi_int fname(const casadi_real** arg, casadi_real** res, casadi_int* iw,<br>
   *                  casadi_real* w, void* mem) {<br>
   *   const casadi_real *x1, *x2;<br>
   *   casadi_real *r1, *r2;<br>
   *   x1 = *arg++;<br>
   *   x2 = *arg++;<br>
   *   r1 = *res++;<br>
   *   r2 = *res++;<br>
   *   &lt;FUNCTION_BODY&gt;<br>
   *   return 0;<br>
   * }<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function jit(String name, String body, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_jit__SWIG_0(name, body, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * <br>
   * Create a just-in-time compiled function from a C language string<br>
   * <br>
   * The names and sparsity patterns of all the inputs and outputs must be provided.<br>
   * If sparsities are not provided, all inputs and outputs are assumed to be scalar.<br>
   * Only specify the function body, assuming that input and output nonzeros are<br>
   * stored in arrays with the specified naming convension.<br>
   * The data type used is 'casadi_real', which is typically equal to 'double` or<br>
   * another data type with the same API as 'double'.<br>
   * <br>
   * Inputs may be null pointers. This means that the all entries are zero.<br>
   * Outputs may be null points. This means that the corresponding result can be ignored.<br>
   * <br>
   * If an error occurs in the evaluation, issue "return 1;";<br>
   * <br>
   * The final generated function will have a structure similar to:<br>
   * <br>
   * casadi_int fname(const casadi_real** arg, casadi_real** res, casadi_int* iw,<br>
   *                  casadi_real* w, void* mem) {<br>
   *   const casadi_real *x1, *x2;<br>
   *   casadi_real *r1, *r2;<br>
   *   x1 = *arg++;<br>
   *   x2 = *arg++;<br>
   *   r1 = *res++;<br>
   *   r2 = *res++;<br>
   *   &lt;FUNCTION_BODY&gt;<br>
   *   return 0;<br>
   * }<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function jit(String name, String body, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_jit__SWIG_1(name, body, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function jit(String name, String body, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity sparsity_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity sparsity_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_jit__SWIG_2(name, body, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity.getCPtr(sparsity_in), sparsity_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity.getCPtr(sparsity_out), sparsity_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function jit(String name, String body, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity sparsity_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity sparsity_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_jit__SWIG_3(name, body, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity.getCPtr(sparsity_in), sparsity_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity.getCPtr(sparsity_out), sparsity_out), true);
  }

  /**
   *  Expand a function to SX<br>
   * <br>
   *         <br>
   * 
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function expand() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_expand__SWIG_0(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function expand(String name, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_expand__SWIG_1(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function expand(String name) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_expand__SWIG_2(swigCPtr, this, name), true);
  }

  /**
   * <br>
   *  Conditional comment: INTERNAL Create from node<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function create(SWIGTYPE_p_casadi__FunctionInternal node) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_create__SWIG_0(SWIGTYPE_p_casadi__FunctionInternal.getCPtr(node)), true);
  }

  /**
   *  Create from node and initialize<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function create(SWIGTYPE_p_casadi__FunctionInternal node, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_create__SWIG_1(SWIGTYPE_p_casadi__FunctionInternal.getCPtr(node), de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  End of conditional comment. Get the number of function inputs<br>
   * <br>
   *         
   */
  public long n_in() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_n_in(swigCPtr, this);
  }

  /**
   *  Get the number of function outputs<br>
   * <br>
   *         
   */
  public long n_out() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_n_out(swigCPtr, this);
  }

  /**
   * Get input dimension<br>
   * <br>
   *         
   */
  public long size1_in(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size1_in__SWIG_0(swigCPtr, this, ind);
  }

  public long size1_in(String iname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size1_in__SWIG_1(swigCPtr, this, iname);
  }

  public long size2_in(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size2_in__SWIG_0(swigCPtr, this, ind);
  }

  public long size2_in(String iname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size2_in__SWIG_1(swigCPtr, this, iname);
  }

  public SWIGTYPE_p_std__pairT_long_long_long_long_t size_in(long ind) {
    return new SWIGTYPE_p_std__pairT_long_long_long_long_t(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size_in__SWIG_0(swigCPtr, this, ind), true);
  }

  public SWIGTYPE_p_std__pairT_long_long_long_long_t size_in(String iname) {
    return new SWIGTYPE_p_std__pairT_long_long_long_long_t(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size_in__SWIG_1(swigCPtr, this, iname), true);
  }

  /**
   * <br>
   * Get output dimension<br>
   * <br>
   *         
   */
  public long size1_out(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size1_out__SWIG_0(swigCPtr, this, ind);
  }

  public long size1_out(String oname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size1_out__SWIG_1(swigCPtr, this, oname);
  }

  public long size2_out(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size2_out__SWIG_0(swigCPtr, this, ind);
  }

  public long size2_out(String oname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size2_out__SWIG_1(swigCPtr, this, oname);
  }

  public SWIGTYPE_p_std__pairT_long_long_long_long_t size_out(long ind) {
    return new SWIGTYPE_p_std__pairT_long_long_long_long_t(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size_out__SWIG_0(swigCPtr, this, ind), true);
  }

  public SWIGTYPE_p_std__pairT_long_long_long_long_t size_out(String oname) {
    return new SWIGTYPE_p_std__pairT_long_long_long_long_t(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_size_out__SWIG_1(swigCPtr, this, oname), true);
  }

  /**
   * <br>
   * Get number of input nonzeros<br>
   * <br>
   * For a particular input or for all of the inputs<br>
   * <br>
   *         
   */
  public long nnz_in() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nnz_in__SWIG_0(swigCPtr, this);
  }

  public long nnz_in(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nnz_in__SWIG_1(swigCPtr, this, ind);
  }

  public long nnz_in(String iname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nnz_in__SWIG_2(swigCPtr, this, iname);
  }

  /**
   * <br>
   * Get number of output nonzeros<br>
   * <br>
   * For a particular output or for all of the outputs<br>
   * <br>
   *         
   */
  public long nnz_out() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nnz_out__SWIG_0(swigCPtr, this);
  }

  public long nnz_out(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nnz_out__SWIG_1(swigCPtr, this, ind);
  }

  public long nnz_out(String oname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nnz_out__SWIG_2(swigCPtr, this, oname);
  }

  /**
   * <br>
   * Get number of input elements<br>
   * <br>
   * For a particular input or for all of the inputs<br>
   * <br>
   *         
   */
  public long numel_in() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_numel_in__SWIG_0(swigCPtr, this);
  }

  public long numel_in(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_numel_in__SWIG_1(swigCPtr, this, ind);
  }

  public long numel_in(String iname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_numel_in__SWIG_2(swigCPtr, this, iname);
  }

  /**
   * <br>
   * Get number of output elements<br>
   * <br>
   * For a particular output or for all of the outputs<br>
   * <br>
   *         
   */
  public long numel_out() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_numel_out__SWIG_0(swigCPtr, this);
  }

  public long numel_out(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_numel_out__SWIG_1(swigCPtr, this, ind);
  }

  public long numel_out(String oname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_numel_out__SWIG_2(swigCPtr, this, oname);
  }

  /**
   * Get input scheme<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in() {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_name_in__SWIG_0(swigCPtr, this);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString proxy = new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  /**
   *  Get output scheme<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out() {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_name_out__SWIG_0(swigCPtr, this);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString proxy = new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  /**
   *  Get input scheme name by index<br>
   * <br>
   *         
   */
  public String name_in(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_name_in__SWIG_1(swigCPtr, this, ind);
  }

  /**
   *  Get output scheme name by index<br>
   * <br>
   *         
   */
  public String name_out(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_name_out__SWIG_1(swigCPtr, this, ind);
  }

  /**
   *  Find the index for a string describing a particular entry of an input scheme<br>
   * <br>
   * example:  schemeEntry("x_opt")  -&gt; returns  NLPSOL_X if FunctionInternal adheres to<br>
   * SCHEME_NLPINput<br>
   * <br>
   *         
   */
  public long index_in(String name) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_index_in(swigCPtr, this, name);
  }

  /**
   *  Find the index for a string describing a particular entry of an output scheme<br>
   * <br>
   * example:  schemeEntry("x_opt")  -&gt; returns  NLPSOL_X if FunctionInternal adheres to<br>
   * SCHEME_NLPINput<br>
   * <br>
   *         
   */
  public long index_out(String name) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_index_out(swigCPtr, this, name);
  }

  /**
   *  Does the function have a particularly named input?<br>
   * <br>
   *         
   */
  public boolean has_in(String name) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_has_in(swigCPtr, this, name);
  }

  /**
   *  Does the function have a particularly named output?<br>
   * <br>
   *         
   */
  public boolean has_out(String name) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_has_out(swigCPtr, this, name);
  }

  /**
   *  Get default input value<br>
   * <br>
   *         
   */
  public double default_in(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_default_in(swigCPtr, this, ind);
  }

  /**
   *  Get largest input value<br>
   * <br>
   *         
   */
  public double max_in(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_max_in(swigCPtr, this, ind);
  }

  /**
   *  Get smallest input value<br>
   * <br>
   *         
   */
  public double min_in(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_min_in(swigCPtr, this, ind);
  }

  /**
   *  Get nominal input value<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble nominal_in(long ind) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nominal_in(swigCPtr, this, ind), true);
  }

  /**
   *  Get nominal output value<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble nominal_out(long ind) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nominal_out(swigCPtr, this, ind), true);
  }

  /**
   *  Get sparsity of a given input<br>
   * <br>
   *         <br>
   *  
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sparsity_in(long ind) {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sparsity_in__SWIG_0(swigCPtr, this, ind);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	de.dhbw.rahmlab.casadi.impl.casadi.Sparsity proxy = new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sparsity_in(String iname) {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sparsity_in__SWIG_1(swigCPtr, this, iname);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	de.dhbw.rahmlab.casadi.impl.casadi.Sparsity proxy = new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  /**
   *  Get sparsity of a given output<br>
   * <br>
   *         <br>
   *  
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sparsity_out(long ind) {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sparsity_out__SWIG_0(swigCPtr, this, ind);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	de.dhbw.rahmlab.casadi.impl.casadi.Sparsity proxy = new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sparsity_out(String iname) {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sparsity_out__SWIG_1(swigCPtr, this, iname);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	de.dhbw.rahmlab.casadi.impl.casadi.Sparsity proxy = new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  /**
   *  Get differentiability of inputs/output<br>
   * <br>
   *         <br>
   *  
   */
  public boolean is_diff_in(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_is_diff_in__SWIG_0(swigCPtr, this, ind);
  }

  public boolean is_diff_out(long ind) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_is_diff_out__SWIG_0(swigCPtr, this, ind);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorBool is_diff_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorBool(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_is_diff_in__SWIG_1(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorBool is_diff_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorBool(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_is_diff_out__SWIG_1(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function factory(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_out, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToVectorString aux, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_factory__SWIG_0(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_in), s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_out), s_out, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToVectorString.getCPtr(aux), aux, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function factory(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_out, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToVectorString aux) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_factory__SWIG_1(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_in), s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_out), s_out, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToVectorString.getCPtr(aux), aux), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function factory(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_factory__SWIG_2(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_in), s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_out), s_out), true);
  }

  /**
   *  Get oracle<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function oracle() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_oracle(swigCPtr, this), true);
  }

  /**
   *  Wrap in an Function instance consisting of only one MX call<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function wrap() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_wrap(swigCPtr, this), true);
  }

  /**
   *  Wrap in a Function with options<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function wrap_as_needed(de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_wrap_as_needed(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Which variables enter with some order<br>
   * <br>
   * @param order Only 1 (linear) and 2 (nonlinear) allowed<br>
   * @param tr   Flip the relationship. Return which expressions contain the variables<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorBool which_depends(String s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_out, long order, boolean tr) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorBool(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_which_depends__SWIG_0(swigCPtr, this, s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_out), s_out, order, tr), true);
  }

  /**
   *  Which variables enter with some order<br>
   * <br>
   * @param order Only 1 (linear) and 2 (nonlinear) allowed<br>
   * <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorBool which_depends(String s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_out, long order) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorBool(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_which_depends__SWIG_1(swigCPtr, this, s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_out), s_out, order), true);
  }

  /**
   *  Which variables enter with some order<br>
   * <br>
   * <br>
   * <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorBool which_depends(String s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString s_out) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorBool(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_which_depends__SWIG_2(swigCPtr, this, s_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(s_out), s_out), true);
  }

  /**
   *  Print dimensions of inputs and outputs<br>
   * <br>
   *         
   */
  public void print_dimensions(SWIGTYPE_p_std__ostream stream) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_print_dimensions__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(stream));
  }

  /**
   *  Print dimensions of inputs and outputs<br>
   * <br>
   *         
   */
  public void print_dimensions() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_print_dimensions__SWIG_1(swigCPtr, this);
  }

  /**
   *  Print options to a stream<br>
   * <br>
   *         
   */
  public void print_options(SWIGTYPE_p_std__ostream stream) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_print_options__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(stream));
  }

  /**
   *  Print options to a stream<br>
   * <br>
   *         
   */
  public void print_options() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_print_options__SWIG_1(swigCPtr, this);
  }

  /**
   *  Print all information there is to know about a certain option<br>
   * <br>
   *         
   */
  public void print_option(String name, SWIGTYPE_p_std__ostream stream) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_print_option__SWIG_0(swigCPtr, this, name, SWIGTYPE_p_std__ostream.getCPtr(stream));
  }

  /**
   *  Print all information there is to know about a certain option<br>
   * <br>
   *         
   */
  public void print_option(String name) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_print_option__SWIG_1(swigCPtr, this, name);
  }

  /**
   *  Does a particular option exist<br>
   * <br>
   *         
   */
  public boolean has_option(String option_name) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_has_option(swigCPtr, this, option_name);
  }

  /**
   *  Change option after object creation for debugging<br>
   * <br>
   * This is only possible for a selected number of options that do not change the numerical<br>
   * results of the computation, e.g. to enable a more verbose output or saving to file.<br>
   * <br>
   *         
   */
  public void change_option(String option_name, de.dhbw.rahmlab.casadi.impl.casadi.GenericType option_value) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_change_option(swigCPtr, this, option_name, de.dhbw.rahmlab.casadi.impl.casadi.GenericType.getCPtr(option_value), option_value);
  }

  /**
   *  Reset the counter used to name dump files<br>
   * <br>
   *         
   */
  public void reset_dump_count() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_reset_dump_count(swigCPtr, this);
  }

  /**
   *  Do the derivative functions need nondifferentiated outputs?<br>
   * <br>
   *         
   */
  public boolean uses_output() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_uses_output(swigCPtr, this);
  }

  /**
   *  Calculate all Jacobian blocks<br>
   * <br>
   * Generates a function that takes all non-differentiated inputs and outputs<br>
   * and calculates all Jacobian blocks.<br>
   * Inputs that are not needed by the routine are all-zero sparse matrices<br>
   * with the correct dimensions. Output blocks that are not calculated,<br>
   * e.g. if the corresponding input or output is marked non-differentiated<br>
   * are also all-zero sparse.<br>
   * The Jacobian blocks are sorted starting by all the blocks for the first<br>
   * output, then all the blocks for the second output and so on.<br>
   * E.g. f : (x, y) -&gt; (r, s) results in the function<br>
   * jac_f : (x, y, out_r, out_s) -&gt; (jac_r_x, jac_r_y, jac_s_x, jac_s_y)<br>
   * <br>
   * This function is cached.<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function jacobian() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_jacobian(swigCPtr, this), true);
  }

  /**
   * Evaluate the function symbolically or numerically<br>
   * <br>
   *         
   */
  public void call(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM OUTPUT, boolean always_inline, boolean never_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(OUTPUT), OUTPUT, always_inline, never_inline);
  }

  /**
   * Evaluate the function symbolically or numerically<br>
   * <br>
   *         
   */
  public void call(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM OUTPUT, boolean always_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(OUTPUT), OUTPUT, always_inline);
  }

  /**
   * Evaluate the function symbolically or numerically<br>
   * <br>
   *         
   */
  public void call(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM OUTPUT) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(OUTPUT), OUTPUT);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdVectorSX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX OUTPUT, boolean always_inline, boolean never_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(OUTPUT), OUTPUT, always_inline, never_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdVectorSX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX OUTPUT, boolean always_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(OUTPUT), OUTPUT, always_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdVectorSX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX OUTPUT) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(OUTPUT), OUTPUT);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX OUTPUT, boolean always_inline, boolean never_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_6(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(OUTPUT), OUTPUT, always_inline, never_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX OUTPUT, boolean always_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_7(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(OUTPUT), OUTPUT, always_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX OUTPUT) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_8(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(OUTPUT), OUTPUT);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM OUTPUT, boolean always_inline, boolean never_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_9(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(OUTPUT), OUTPUT, always_inline, never_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM OUTPUT, boolean always_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_10(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(OUTPUT), OUTPUT, always_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM OUTPUT) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_11(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(OUTPUT), OUTPUT);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX OUTPUT, boolean always_inline, boolean never_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_12(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(OUTPUT), OUTPUT, always_inline, never_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX OUTPUT, boolean always_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_13(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(OUTPUT), OUTPUT, always_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX OUTPUT) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_14(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(OUTPUT), OUTPUT);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX OUTPUT, boolean always_inline, boolean never_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_15(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(OUTPUT), OUTPUT, always_inline, never_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX OUTPUT, boolean always_inline) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_16(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(OUTPUT), OUTPUT, always_inline);
  }

  public void call(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX OUTPUT) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_call__SWIG_17(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(OUTPUT), OUTPUT);
  }

  /**
   *  Propagate sparsity backward<br>
   * <br>
   *         
   */
  public int rev(SWIGTYPE_p_p_bvec_t arg, SWIGTYPE_p_p_bvec_t res, SWIGTYPE_p_long_long iw, SWIGTYPE_p_bvec_t w, int mem) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_rev__SWIG_0(swigCPtr, this, SWIGTYPE_p_p_bvec_t.getCPtr(arg), SWIGTYPE_p_p_bvec_t.getCPtr(res), SWIGTYPE_p_long_long.getCPtr(iw), SWIGTYPE_p_bvec_t.getCPtr(w), mem);
  }

  /**
   *  Propagate sparsity backward<br>
   * <br>
   *         
   */
  public int rev(SWIGTYPE_p_p_bvec_t arg, SWIGTYPE_p_p_bvec_t res, SWIGTYPE_p_long_long iw, SWIGTYPE_p_bvec_t w) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_rev__SWIG_1(swigCPtr, this, SWIGTYPE_p_p_bvec_t.getCPtr(arg), SWIGTYPE_p_p_bvec_t.getCPtr(res), SWIGTYPE_p_long_long.getCPtr(iw), SWIGTYPE_p_bvec_t.getCPtr(w));
  }

  /**
   *  Propagate sparsity backward with temporary memory allocation<br>
   * <br>
   *         
   */
  public int rev(SWIGTYPE_p_std__vectorT_bvec_t_p_t arg, SWIGTYPE_p_std__vectorT_bvec_t_p_t res) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_rev__SWIG_2(swigCPtr, this, SWIGTYPE_p_std__vectorT_bvec_t_p_t.getCPtr(arg), SWIGTYPE_p_std__vectorT_bvec_t_p_t.getCPtr(res));
  }

  /**
   *  Evaluate symbolically in parallel and sum (matrix graph)<br>
   * <br>
   *         @param parallelization Type of parallelization used: unroll|serial|openmp<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX mapsum(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX x, String parallelization) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapsum__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(x), x, parallelization), true);
  }

  /**
   *  Evaluate symbolically in parallel and sum (matrix graph)<br>
   * <br>
   *         <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX mapsum(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX x) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapsum__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(x), x), true);
  }

  /**
   * Create a mapaccumulated version of this function<br>
   * <br>
   *         Suppose the function has a signature of:<br>
   *         {@literal 
             f: (x, u) -> (x_next , y )
          }<br>
   * <br>
   *         The the mapaccumulated version has the signature:<br>
   *         {@literal 
             F: (x0, U) -> (X , Y )
  
              with
                  U: horzcat([u0, u1, ..., u_(N-1)])
                  X: horzcat([x1, x2, ..., x_N])
                  Y: horzcat([y0, y1, ..., y_(N-1)])
  
              and
                  x1, y0 <- f(x0, u0)
                  x2, y1 <- f(x1, u1)
                  ...
                  x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
          }<br>
   * <br>
   *         Mapaccum has the following benefits over writing an equivalent for-loop:<br>
   *            - much faster at construction time<br>
   *            - potentially much faster compilation times (for codegen)<br>
   *            - offers a trade-off between memory and evaluation time<br>
   * <br>
   *         The base (settable through the options dictionary, default 10),<br>
   *         is used to create a tower of function calls,<br>
   *         containing unrolled for-loops of length maximum base.<br>
   * <br>
   *         This technique is much more scalable in terms of memory-usage,<br>
   *         but slightly slower at evaluation, than a plain for-loop.<br>
   *         The effect is similar to that of a for-loop with a check-pointing instruction<br>
   *         after each chunk of iterations with size base.<br>
   * <br>
   *         Set base to -1 to unroll all the way; no gains in memory efficiency here.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(String name, long N, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_0(swigCPtr, this, name, N, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * Create a mapaccumulated version of this function<br>
   * <br>
   *         Suppose the function has a signature of:<br>
   *         {@literal 
             f: (x, u) -> (x_next , y )
          }<br>
   * <br>
   *         The the mapaccumulated version has the signature:<br>
   *         {@literal 
             F: (x0, U) -> (X , Y )
  
              with
                  U: horzcat([u0, u1, ..., u_(N-1)])
                  X: horzcat([x1, x2, ..., x_N])
                  Y: horzcat([y0, y1, ..., y_(N-1)])
  
              and
                  x1, y0 <- f(x0, u0)
                  x2, y1 <- f(x1, u1)
                  ...
                  x_N, y_(N-1) <- f(x_(N-1), u_(N-1))
          }<br>
   * <br>
   *         Mapaccum has the following benefits over writing an equivalent for-loop:<br>
   *            - much faster at construction time<br>
   *            - potentially much faster compilation times (for codegen)<br>
   *            - offers a trade-off between memory and evaluation time<br>
   * <br>
   *         The base (settable through the options dictionary, default 10),<br>
   *         is used to create a tower of function calls,<br>
   *         containing unrolled for-loops of length maximum base.<br>
   * <br>
   *         This technique is much more scalable in terms of memory-usage,<br>
   *         but slightly slower at evaluation, than a plain for-loop.<br>
   *         The effect is similar to that of a for-loop with a check-pointing instruction<br>
   *         after each chunk of iterations with size base.<br>
   * <br>
   *         Set base to -1 to unroll all the way; no gains in memory efficiency here.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(String name, long N) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_1(swigCPtr, this, name, N), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(String name, long N, long n_accum, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_2(swigCPtr, this, name, N, n_accum, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(String name, long N, long n_accum) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_3(swigCPtr, this, name, N, n_accum), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(String name, long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt accum_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt accum_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_4(swigCPtr, this, name, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(accum_in), accum_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(accum_out), accum_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(String name, long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt accum_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt accum_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_5(swigCPtr, this, name, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(accum_in), accum_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(accum_out), accum_out), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(String name, long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString accum_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString accum_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_6(swigCPtr, this, name, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(accum_in), accum_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(accum_out), accum_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(String name, long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString accum_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString accum_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_7(swigCPtr, this, name, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(accum_in), accum_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(accum_out), accum_out), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(long N, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_8(swigCPtr, this, N, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function mapaccum(long N) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mapaccum__SWIG_9(swigCPtr, this, N), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function fold(long N, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_fold__SWIG_0(swigCPtr, this, N, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function fold(long N) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_fold__SWIG_1(swigCPtr, this, N), true);
  }

  /**
   * Create a mapped version of this function<br>
   * <br>
   *         Suppose the function has a signature of:<br>
   *         {@literal 
             f: (a, p) -> ( s )
          }<br>
   * <br>
   *         The the mapped version has the signature:<br>
   *         {@literal 
             F: (A, P) -> (S )
  
              with
                  A: horzcat([a0, a1, ..., a_(N-1)])
                  P: horzcat([p0, p1, ..., p_(N-1)])
                  S: horzcat([s0, s1, ..., s_(N-1)])
              and
                  s0 <- f(a0, p0)
                  s1 <- f(a1, p1)
                  ...
                  s_(N-1) <- f(a_(N-1), p_(N-1))
          }<br>
   * <br>
   *         @param parallelization Type of parallelization used: unroll|serial|openmp<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(long n, String parallelization) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_0(swigCPtr, this, n, parallelization), true);
  }

  /**
   * Create a mapped version of this function<br>
   * <br>
   *         Suppose the function has a signature of:<br>
   *         {@literal 
             f: (a, p) -> ( s )
          }<br>
   * <br>
   *         The the mapped version has the signature:<br>
   *         {@literal 
             F: (A, P) -> (S )
  
              with
                  A: horzcat([a0, a1, ..., a_(N-1)])
                  P: horzcat([p0, p1, ..., p_(N-1)])
                  S: horzcat([s0, s1, ..., s_(N-1)])
              and
                  s0 <- f(a0, p0)
                  s1 <- f(a1, p1)
                  ...
                  s_(N-1) <- f(a_(N-1), p_(N-1))
          }<br>
   * <br>
   *         <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(long n) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_1(swigCPtr, this, n), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(long n, String parallelization, long max_num_threads) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_2(swigCPtr, this, n, parallelization, max_num_threads), true);
  }

  /**
   * Map with reduction<br>
   * <br>
   *       A subset of the inputs are non-repeated and a subset of the outputs summed<br>
   *       up.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(String name, String parallelization, long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt reduce_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_3(swigCPtr, this, name, parallelization, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(reduce_in), reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(reduce_out), reduce_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * Map with reduction<br>
   * <br>
   *       A subset of the inputs are non-repeated and a subset of the outputs summed<br>
   *       up.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(String name, String parallelization, long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt reduce_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_4(swigCPtr, this, name, parallelization, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(reduce_in), reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(reduce_out), reduce_out), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(String name, String parallelization, long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString reduce_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_5(swigCPtr, this, name, parallelization, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(reduce_in), reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(reduce_out), reduce_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(String name, String parallelization, long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString reduce_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_6(swigCPtr, this, name, parallelization, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(reduce_in), reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(reduce_out), reduce_out), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool reduce_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_7(swigCPtr, this, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool.getCPtr(reduce_in), reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool.getCPtr(reduce_out), reduce_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool reduce_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_8(swigCPtr, this, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool.getCPtr(reduce_in), reduce_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool.getCPtr(reduce_out), reduce_out), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function map(long n, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool reduce_in) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_map__SWIG_9(swigCPtr, this, n, de.dhbw.rahmlab.casadi.impl.std.StdVectorBool.getCPtr(reduce_in), reduce_in), true);
  }

  /**
   * returns a new function with a selection of inputs/outputs of the original<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function slice(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt order_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt order_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_slice__SWIG_0(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(order_in), order_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(order_out), order_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * returns a new function with a selection of inputs/outputs of the original<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function slice(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt order_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt order_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_slice__SWIG_1(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(order_in), order_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(order_out), order_out), true);
  }

  /**
   *  Constuct a switch function<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function conditional(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiFunction f, de.dhbw.rahmlab.casadi.impl.casadi.Function f_def, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_conditional__SWIG_0(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiFunction.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f_def), f_def, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Constuct a switch function<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function conditional(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiFunction f, de.dhbw.rahmlab.casadi.impl.casadi.Function f_def) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_conditional__SWIG_1(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiFunction.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f_def), f_def), true);
  }

  /**
   *  Conditional call to a function<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function conditional(String name, de.dhbw.rahmlab.casadi.impl.casadi.Function f, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_conditional__SWIG_2(name, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Conditional call to a function<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function conditional(String name, de.dhbw.rahmlab.casadi.impl.casadi.Function f) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_conditional__SWIG_3(name, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f), true);
  }

  /**
   *  BSpline evaluator function<br>
   * <br>
   *  Requires a known coefficient tensor<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function bspline(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt degree, long m, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_bspline__SWIG_0(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(knots), knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(coeffs), coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(degree), degree, m, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  BSpline evaluator function<br>
   * <br>
   *  Requires a known coefficient tensor<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function bspline(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt degree, long m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_bspline__SWIG_1(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(knots), knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(coeffs), coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(degree), degree, m), true);
  }

  /**
   *  BSpline evaluator function<br>
   * <br>
   *  Requires a known coefficient tensor<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function bspline(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt degree) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_bspline__SWIG_2(name, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(knots), knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(coeffs), coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(degree), degree), true);
  }

  /**
   *  Constructor (if-else)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function if_else(String name, de.dhbw.rahmlab.casadi.impl.casadi.Function f_true, de.dhbw.rahmlab.casadi.impl.casadi.Function f_false, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_if_else__SWIG_0(name, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f_true), f_true, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f_false), f_false, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Constructor (if-else)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function if_else(String name, de.dhbw.rahmlab.casadi.impl.casadi.Function f_true, de.dhbw.rahmlab.casadi.impl.casadi.Function f_false) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_if_else__SWIG_1(name, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f_true), f_true, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f_false), f_false), true);
  }

  /**
   *  Get a function that calculates <i>nfwd</i> forward derivatives<br>
   * <br>
   *         Returns a function with <tt>n_in + n_out + n_in</tt> inputs<br>
   *         and <tt>nfwd</tt> outputs.<br>
   *         The first <tt>n_in</tt> inputs correspond to nondifferentiated inputs.<br>
   *         The next <tt>n_out</tt> inputs correspond to nondifferentiated outputs.<br>
   *         and the last <tt>n_in</tt> inputs correspond to forward seeds,<br>
   *         stacked horizontally<br>
   *         The  <tt>n_out</tt> outputs correspond to forward sensitivities,<br>
   *         stacked horizontally.     *<br>
   *         <tt>(n_in = n_in(), n_out = n_out())</tt><br>
   * <br>
   *        The functions returned are cached, meaning that if called multiple timed<br>
   *        with the same value, then multiple references to the same function will be returned.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function forward(long nfwd) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_forward(swigCPtr, this, nfwd), true);
  }

  /**
   *  Get a function that calculates <i>nadj</i> adjoint derivatives<br>
   * <br>
   *         Returns a function with <tt>n_in + n_out + n_out</tt> inputs<br>
   *         and <tt>n_in</tt> outputs.<br>
   *         The first <tt>n_in</tt> inputs correspond to nondifferentiated inputs.<br>
   *         The next <tt>n_out</tt> inputs correspond to nondifferentiated outputs.<br>
   *         and the last <tt>n_out</tt> inputs correspond to adjoint seeds,<br>
   *         stacked horizontally<br>
   *         The  <tt>n_in</tt> outputs correspond to adjoint sensitivities,<br>
   *         stacked horizontally.     *<br>
   *         <tt>(n_in = n_in(), n_out = n_out())</tt><br>
   * <br>
   *         <tt>(n_in = n_in(), n_out = n_out())</tt><br>
   * <br>
   *        The functions returned are cached, meaning that if called multiple timed<br>
   *        with the same value, then multiple references to the same function will be returned.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function reverse(long nadj) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_reverse(swigCPtr, this, nadj), true);
  }

  /**
   *  Get, if necessary generate, the sparsity of all Jacobian blocks<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity jac_sparsity(boolean compact) {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_jac_sparsity__SWIG_0(swigCPtr, this, compact);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity proxy = new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  /**
   *  Get, if necessary generate, the sparsity of all Jacobian blocks<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity jac_sparsity() {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_jac_sparsity__SWIG_1(swigCPtr, this);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity proxy = new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiSparsity(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  /**
   *  Get, if necessary generate, the sparsity of a single Jacobian block<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity jac_sparsity(long oind, long iind, boolean compact) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_jac_sparsity__SWIG_2(swigCPtr, this, oind, iind, compact), true);
  }

  /**
   *  Get, if necessary generate, the sparsity of a single Jacobian block<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity jac_sparsity(long oind, long iind) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_jac_sparsity__SWIG_3(swigCPtr, this, oind, iind), true);
  }

  /**
   *  Export / Generate C code for the function<br>
   * <br>
   *         
   */
  public String generate(String fname, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate__SWIG_0(swigCPtr, this, fname, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts);
  }

  /**
   *  Export / Generate C code for the function<br>
   * <br>
   *         
   */
  public String generate(String fname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate__SWIG_1(swigCPtr, this, fname);
  }

  /**
   *  Export / Generate C code for the function<br>
   * <br>
   *         
   */
  public String generate(de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts);
  }

  /**
   *  Export / Generate C code for the function<br>
   * <br>
   *         
   */
  public String generate() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate__SWIG_3(swigCPtr, this);
  }

  /**
   *  Export / Generate C code for the dependency function<br>
   * <br>
   *         
   */
  public String generate_dependencies(String fname, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate_dependencies__SWIG_0(swigCPtr, this, fname, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts);
  }

  /**
   *  Export / Generate C code for the dependency function<br>
   * <br>
   *         
   */
  public String generate_dependencies(String fname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate_dependencies__SWIG_1(swigCPtr, this, fname);
  }

  /**
   *  Export an input file that can be passed to generate C code with a main<br>
   * <br>
   * @see generate_out<br>
   * @see convert_in to convert between dict/map and vector<br>
   * <br>
   *         <br>
   *  
   */
  public void generate_in(String fname, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate_in__SWIG_0(swigCPtr, this, fname, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDM generate_in(String fname) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate_in__SWIG_1(swigCPtr, this, fname), true);
  }

  /**
   *  Export an output file that can be checked with generated C code output<br>
   * <br>
   * @see generate_in<br>
   * @see convert_out to convert between dict/map and vector<br>
   * <br>
   *         <br>
   *  
   */
  public void generate_out(String fname, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate_out__SWIG_0(swigCPtr, this, fname, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDM generate_out(String fname) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate_out__SWIG_1(swigCPtr, this, fname), true);
  }

  /**
   *  Export function in specific language<br>
   * <br>
   * Only allowed for (a subset of) SX/MX Functions<br>
   * <br>
   *         <br>
   * 
   */
  public void export_code(String lang, String fname, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_export_code__SWIG_0(swigCPtr, this, lang, fname, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options);
  }

  /**
   *  Export function in specific language<br>
   * <br>
   * Only allowed for (a subset of) SX/MX Functions<br>
   * <br>
   *         <br>
   * 
   */
  public void export_code(String lang, String fname) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_export_code__SWIG_1(swigCPtr, this, lang, fname);
  }

  /**
   *  Serialize<br>
   * <br>
   *         
   */
  public void serialize(SWIGTYPE_p_std__ostream stream, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_serialize__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(stream), de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts);
  }

  /**
   *  Serialize<br>
   * <br>
   *         
   */
  public void serialize(SWIGTYPE_p_std__ostream stream) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_serialize__SWIG_1(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(stream));
  }

  /**
   *  Serialize an object<br>
   * <br>
   *         
   */
  public void serialize(SWIGTYPE_p_casadi__SerializingStream s) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_serialize__SWIG_2(swigCPtr, this, SWIGTYPE_p_casadi__SerializingStream.getCPtr(s));
  }

  /**
   *  Serialize<br>
   * <br>
   *         
   */
  public String serialize(de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_serialize__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts);
  }

  /**
   *  Serialize<br>
   * <br>
   *         
   */
  public String serialize() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_serialize__SWIG_4(swigCPtr, this);
  }

  /**
   *  Save Function to a file<br>
   * <br>
   *         @see load<br>
   * <br>
   *         
   */
  public void save(String fname, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_save__SWIG_0(swigCPtr, this, fname, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts);
  }

  /**
   *  Save Function to a file<br>
   * <br>
   *         @see load<br>
   * <br>
   *         
   */
  public void save(String fname) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_save__SWIG_1(swigCPtr, this, fname);
  }

  public String export_code(String lang, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_export_code__SWIG_2(swigCPtr, this, lang, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options);
  }

  public String export_code(String lang) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_export_code__SWIG_3(swigCPtr, this, lang);
  }

  public void export_code(String lang, SWIGTYPE_p_std__ostream stream, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_export_code__SWIG_4(swigCPtr, this, lang, SWIGTYPE_p_std__ostream.getCPtr(stream), de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options);
  }

  public void export_code(String lang, SWIGTYPE_p_std__ostream stream) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_export_code__SWIG_5(swigCPtr, this, lang, SWIGTYPE_p_std__ostream.getCPtr(stream));
  }

  /**
   * <br>
   *  Conditional comment: INTERNAL<br>
   *  Get a const pointer to the node
   */
  public SWIGTYPE_p_casadi__FunctionInternal get() {throw new UnsupportedOperationException();}

  /**
   *  Check if a particular cast is allowed
   */
  public static boolean test_cast(SWIGTYPE_p_SharedObjectInternal ptr) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_test_cast(SWIGTYPE_p_SharedObjectInternal.getCPtr(ptr));
  }

  /**
   *  End of conditional comment.<br>
   *  Get all statistics obtained at the end of the last evaluate call
   */
  public de.dhbw.rahmlab.casadi.impl.std.Dict stats(int mem) {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_stats__SWIG_0(swigCPtr, this, mem), true);
  }

  /**
   *  End of conditional comment.<br>
   *  Get all statistics obtained at the end of the last evaluate call
   */
  public de.dhbw.rahmlab.casadi.impl.std.Dict stats() {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_stats__SWIG_1(swigCPtr, this), true);
  }

  /**
   * Get symbolic primitives equivalent to the input expressions<br>
   * <br>
   * There is no guarantee that subsequent calls return unique answers<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.SX sx_in(long iind) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.SX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sx_in__SWIG_0(swigCPtr, this, iind), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.SX sx_in(String iname) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.SX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sx_in__SWIG_1(swigCPtr, this, iname), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorSX sx_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorSX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sx_in__SWIG_2(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX mx_in(long ind) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mx_in__SWIG_0(swigCPtr, this, ind), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX mx_in(String iname) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mx_in__SWIG_1(swigCPtr, this, iname), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX mx_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mx_in__SWIG_2(swigCPtr, this), true);
  }

  /**
   * <br>
   * Get symbolic primitives equivalent to the output expressions<br>
   * <br>
   * There is no guarantee that subsequent calls return unique answers<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.SX sx_out(long oind) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.SX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sx_out__SWIG_0(swigCPtr, this, oind), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.SX sx_out(String oname) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.SX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sx_out__SWIG_1(swigCPtr, this, oname), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorSX sx_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorSX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sx_out__SWIG_2(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX mx_out(long ind) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mx_out__SWIG_0(swigCPtr, this, ind), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX mx_out(String oname) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mx_out__SWIG_1(swigCPtr, this, oname), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX mx_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_mx_out__SWIG_2(swigCPtr, this), true);
  }

  /**
   * Convert from/to flat vector of input/output nonzeros<br>
   * <br>
   *         <br>
   *  
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble nz_from_in(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nz_from_in(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble nz_from_out(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nz_from_out(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDM nz_to_in(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nz_to_in(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDM nz_to_out(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_nz_to_out(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(arg), arg), true);
  }

  /**
   * Convert from/to input/output lists/map<br>
   * <br>
   * Will raise an error when an unknown key is used or a list has incorrect size.<br>
   * Does not perform sparsity checking.<br>
   * <br>
   *         <br>
   *  
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM convert_in(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_in__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDM convert_in(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_in__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM convert_out(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_out__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDM convert_out(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_out__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX convert_in(de.dhbw.rahmlab.casadi.impl.std.StdVectorSX arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_in__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorSX convert_in(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorSX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_in__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX convert_out(de.dhbw.rahmlab.casadi.impl.std.StdVectorSX arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_out__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorSX convert_out(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorSX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_out__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX convert_in(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_in__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX convert_in(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_in__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX convert_out(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_out__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX convert_out(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX arg) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_convert_out__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(arg), arg), true);
  }

  /**
   *  Does the function have free variables<br>
   * <br>
   *         
   */
  public boolean has_free() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_has_free(swigCPtr, this);
  }

  /**
   *  Get free variables as a string<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString get_free() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_get_free(swigCPtr, this), true);
  }

  /**
   *  Get all the free variables of the function<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorSX free_sx() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorSX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_free_sx(swigCPtr, this), true);
  }

  /**
   *  Get all the free variables of the function<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX free_mx() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_free_mx(swigCPtr, this), true);
  }

  /**
   *  Extract the functions needed for the Lifted Newton method<br>
   * <br>
   *         
   */
  public void generate_lifted(de.dhbw.rahmlab.casadi.impl.casadi.Function OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Function arg1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_generate_lifted(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(arg1), arg1);
  }

  /**
   *  Number of nodes in the algorithm<br>
   * <br>
   *         
   */
  public long n_nodes() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_n_nodes(swigCPtr, this);
  }

  /**
   *  Number of instruction in the algorithm (SXFunction/MXFunction)<br>
   * <br>
   *         
   */
  public long n_instructions() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_n_instructions(swigCPtr, this);
  }

  /**
   *  Identifier index of the instruction (SXFunction/MXFunction)<br>
   * <br>
   *         
   */
  public long instruction_id(long k) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_instruction_id(swigCPtr, this, k);
  }

  /**
   *  Locations in the work vector for the inputs of the instruction<br>
   * <br>
   * (SXFunction/MXFunction)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt instruction_input(long k) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_instruction_input(swigCPtr, this, k), true);
  }

  /**
   *  Get the floating point output argument of an instruction (SXFunction)<br>
   * <br>
   *         
   */
  public double instruction_constant(long k) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_instruction_constant(swigCPtr, this, k);
  }

  /**
   *  Location in the work vector for the output of the instruction<br>
   * <br>
   * (SXFunction/MXFunction)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt instruction_output(long k) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_instruction_output(swigCPtr, this, k), true);
  }

  /**
   *  Get the MX node corresponding to an instruction (MXFunction)<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX instruction_MX(long k) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_instruction_MX(swigCPtr, this, k), true);
  }

  /**
   *  Get the SX node corresponding to all instructions (SXFunction)<br>
   * <br>
   * Note: input and output instructions have no SX representation.<br>
   * This method returns nan for those instructions.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.SX instructions_sx() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.SX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_instructions_sx(swigCPtr, this), true);
  }

  /**
   * Is the class able to propagate seeds through the algorithm?<br>
   * <br>
   *         
   */
  public boolean has_spfwd() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_has_spfwd(swigCPtr, this);
  }

  public boolean has_sprev() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_has_sprev(swigCPtr, this);
  }

  /**
   * Get required length of arg field<br>
   * <br>
   *         
   */
  public long sz_arg() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sz_arg(swigCPtr, this);
  }

  /**
   *  Get required length of res field<br>
   * <br>
   *         
   */
  public long sz_res() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sz_res(swigCPtr, this);
  }

  /**
   *  Get required length of iw field<br>
   * <br>
   *         
   */
  public long sz_iw() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sz_iw(swigCPtr, this);
  }

  /**
   *  Get required length of w field<br>
   * <br>
   *         
   */
  public long sz_w() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sz_w(swigCPtr, this);
  }

  /**
   *  Get number of temporary variables needed<br>
   * <br>
   *         
   */
  public void sz_work(SWIGTYPE_p_size_t sz_arg, SWIGTYPE_p_size_t sz_res, SWIGTYPE_p_size_t sz_iw, SWIGTYPE_p_size_t sz_w) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_sz_work(swigCPtr, this, SWIGTYPE_p_size_t.getCPtr(sz_arg), SWIGTYPE_p_size_t.getCPtr(sz_res), SWIGTYPE_p_size_t.getCPtr(sz_iw), SWIGTYPE_p_size_t.getCPtr(sz_w));
  }

  /**
   *  Set the (persistent) work vectors<br>
   * <br>
   *         
   */
  public void set_work(SWIGTYPE_p_p_p_double arg, SWIGTYPE_p_p_p_double res, SWIGTYPE_p_p_long_long iw, SWIGTYPE_p_p_double w, int mem) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_set_work__SWIG_0(swigCPtr, this, SWIGTYPE_p_p_p_double.getCPtr(arg), SWIGTYPE_p_p_p_double.getCPtr(res), SWIGTYPE_p_p_long_long.getCPtr(iw), SWIGTYPE_p_p_double.getCPtr(w), mem);
  }

  /**
   *  Set the (persistent) work vectors<br>
   * <br>
   *         
   */
  public void set_work(SWIGTYPE_p_p_p_double arg, SWIGTYPE_p_p_p_double res, SWIGTYPE_p_p_long_long iw, SWIGTYPE_p_p_double w) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_set_work__SWIG_1(swigCPtr, this, SWIGTYPE_p_p_p_double.getCPtr(arg), SWIGTYPE_p_p_p_double.getCPtr(res), SWIGTYPE_p_p_long_long.getCPtr(iw), SWIGTYPE_p_p_double.getCPtr(w));
  }

  /**
   *  Set the (temporary) work vectors<br>
   * <br>
   *         
   */
  public void set_temp(SWIGTYPE_p_p_double arg, SWIGTYPE_p_p_double res, SWIGTYPE_p_long_long iw, SWIGTYPE_p_double w, int mem) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_set_temp__SWIG_0(swigCPtr, this, SWIGTYPE_p_p_double.getCPtr(arg), SWIGTYPE_p_p_double.getCPtr(res), SWIGTYPE_p_long_long.getCPtr(iw), SWIGTYPE_p_double.getCPtr(w), mem);
  }

  /**
   *  Set the (temporary) work vectors<br>
   * <br>
   *         
   */
  public void set_temp(SWIGTYPE_p_p_double arg, SWIGTYPE_p_p_double res, SWIGTYPE_p_long_long iw, SWIGTYPE_p_double w) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_set_temp__SWIG_1(swigCPtr, this, SWIGTYPE_p_p_double.getCPtr(arg), SWIGTYPE_p_p_double.getCPtr(res), SWIGTYPE_p_long_long.getCPtr(iw), SWIGTYPE_p_double.getCPtr(w));
  }

  /**
   *  Set the (persistent and temporary) work vectors<br>
   * <br>
   *         
   */
  public void setup(SWIGTYPE_p_p_double arg, SWIGTYPE_p_p_double res, SWIGTYPE_p_long_long iw, SWIGTYPE_p_double w, int mem) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_setup__SWIG_0(swigCPtr, this, SWIGTYPE_p_p_double.getCPtr(arg), SWIGTYPE_p_p_double.getCPtr(res), SWIGTYPE_p_long_long.getCPtr(iw), SWIGTYPE_p_double.getCPtr(w), mem);
  }

  /**
   *  Set the (persistent and temporary) work vectors<br>
   * <br>
   *         
   */
  public void setup(SWIGTYPE_p_p_double arg, SWIGTYPE_p_p_double res, SWIGTYPE_p_long_long iw, SWIGTYPE_p_double w) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_setup__SWIG_1(swigCPtr, this, SWIGTYPE_p_p_double.getCPtr(arg), SWIGTYPE_p_p_double.getCPtr(res), SWIGTYPE_p_long_long.getCPtr(iw), SWIGTYPE_p_double.getCPtr(w));
  }

  /**
   *  List merge opportunitities<br>
   * <br>
   *         
   */
  public void merge(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX subs_from, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX subs_to) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_merge(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(subs_from), subs_from, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(subs_to), subs_to);
  }

  /**
   *  End of conditional comment. Name of the function<br>
   * <br>
   *         
   */
  public String name() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_name(swigCPtr, this);
  }

  /**
   *  Check if the function is of a particular type<br>
   * <br>
   *         Optionally check if name matches one of the base classes (default true)<br>
   * <br>
   *         
   */
  public boolean is_a(String type, boolean recursive) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_is_a__SWIG_0(swigCPtr, this, type, recursive);
  }

  /**
   *  Check if the function is of a particular type<br>
   * <br>
   *         Optionally check if name matches one of the base classes (default true)<br>
   * <br>
   *         
   */
  public boolean is_a(String type) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_is_a__SWIG_1(swigCPtr, this, type);
  }

  /**
   *  Check if a string is a valid function name<br>
   * <br>
   * Valid function names consist of<br>
   * <br>
   * - At least one character<br>
   * - Upper and lower case letters: a-zA-Z<br>
   * - Numbers 0-9, but never as first character<br>
   * - Underscore, but never as first character and never next to another underscore<br>
   * <br>
   * May not be one of the following keywords: "null", "jac", "hess"<br>
   * <br>
   *         
   */
  public static boolean check_name(String name) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_check_name(name);
  }

  /**
   *  Turn a string into a valid function name as defined by "check_name"<br>
   * <br>
   * Non-alphanumeric characters are converted into underscores and multiple<br>
   * consecutive undercores are dropped<br>
   * <br>
   *         
   */
  public static String fix_name(String name) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_fix_name(name);
  }

  /**
   *  Build function from serialization<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function deserialize(SWIGTYPE_p_std__istream stream) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_deserialize__SWIG_0(SWIGTYPE_p_std__istream.getCPtr(stream)), true);
  }

  /**
   *  Build function from serialization<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function deserialize(String s) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_deserialize__SWIG_1(s), true);
  }

  /**
   *  Build function from serialization<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function load(String filename) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_load(filename), true);
  }

  /**
   *  Build function from serialization<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function deserialize(SWIGTYPE_p_casadi__DeserializingStream s) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_deserialize__SWIG_2(SWIGTYPE_p_casadi__DeserializingStream.getCPtr(s)), true);
  }

  /**
   *  Assert that an input dimension is equal so some given value
   */
  public void assert_size_in(long i, long nrow, long ncol) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_assert_size_in(swigCPtr, this, i, nrow, ncol);
  }

  /**
   *  Assert that an output dimension is equal so some given value
   */
  public void assert_size_out(long i, long nrow, long ncol) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_assert_size_out(swigCPtr, this, i, nrow, ncol);
  }

  /**
   *  Assert that an output sparsity is a multiple of some given sparsity
   */
  public void assert_sparsity_out(long i, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, long n, boolean allow_all_zero_sparse) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_assert_sparsity_out__SWIG_0(swigCPtr, this, i, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, n, allow_all_zero_sparse);
  }

  /**
   *  Assert that an output sparsity is a multiple of some given sparsity
   */
  public void assert_sparsity_out(long i, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, long n) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_assert_sparsity_out__SWIG_1(swigCPtr, this, i, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, n);
  }

  /**
   *  Assert that an output sparsity is a multiple of some given sparsity
   */
  public void assert_sparsity_out(long i, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_assert_sparsity_out__SWIG_2(swigCPtr, this, i, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp);
  }

  /**
   *  Checkout a memory object
   */
  public long checkout() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_checkout(swigCPtr, this);
  }

  /**
   *  Release a memory object
   */
  public void release(int mem) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_release(swigCPtr, this, mem);
  }

  /**
   *  Get memory object
   */
  public SWIGTYPE_p_void memory(int ind) {throw new UnsupportedOperationException();}

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorSX order(de.dhbw.rahmlab.casadi.impl.std.StdVectorSX expr) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorSX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_order__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(expr), expr), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX order(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX expr) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_order__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(expr), expr), true);
  }

  /**
   *  Get all functions in the cache<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.Dict cache() {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_cache(swigCPtr, this), true);
  }

  /**
   *  Get a list of all functions<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString get_function() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_get_function__SWIG_0(swigCPtr, this), true);
  }

  /**
   *  Get a dependency function<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function get_function(String name) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_get_function__SWIG_1(swigCPtr, this, name), true);
  }

  /**
   *  Check if a particular dependency exists<br>
   * <br>
   *         
   */
  public boolean has_function(String fname) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_has_function(swigCPtr, this, fname);
  }

  /**
   *  Get all functions embedded in the expression graphs<br>
   * <br>
   * @param max_depth  Maximum depth - a negative number indicates no maximum<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiFunction find_functions(long max_depth) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiFunction(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_find_functions__SWIG_0(swigCPtr, this, max_depth), true);
  }

  /**
   *  Get all functions embedded in the expression graphs<br>
   * <br>
   * <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiFunction find_functions() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiFunction(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_find_functions__SWIG_1(swigCPtr, this), true);
  }

  /**
   *  Get a specific function embedded in the expression graphs<br>
   * <br>
   * @param name  Name of function needed<br>
   * @param max_depth  Maximum depth - a negative number indicates no maximum<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function find_function(String name, long max_depth) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_find_function__SWIG_0(swigCPtr, this, name, max_depth), true);
  }

  /**
   *  Get a specific function embedded in the expression graphs<br>
   * <br>
   * @param name  Name of function needed<br>
   * <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function find_function(String name) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_find_function__SWIG_1(swigCPtr, this, name), true);
  }

  /**
   *  Obtain information about function 
   */
  public de.dhbw.rahmlab.casadi.impl.std.Dict info() {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_info(swigCPtr, this), true);
  }

  public String toString(boolean more) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_toString__SWIG_0(swigCPtr, this, more);
  }

  public String toString() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Function_toString__SWIG_1(swigCPtr, this);
  }

  public Function(de.dhbw.rahmlab.casadi.impl.casadi.Function other) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Function__SWIG_38(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(other), other), true);
  }

}
