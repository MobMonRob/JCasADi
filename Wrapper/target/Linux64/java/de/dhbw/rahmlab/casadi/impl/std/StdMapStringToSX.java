/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.std;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

public class StdMapStringToSX extends java.util.AbstractMap<String, de.dhbw.rahmlab.casadi.impl.casadi.SX> {
  private final long swigCPtr;

  public StdMapStringToSX(long cPtr, boolean cMemoryOwn) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, cPtr, StdMapStringToSX::delete);
  	}
  }

  /**
  * <pre>
  * In C++, deleting a pointer twice is undefined behavior!
  * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
  * Using this baseclass constructor for subtypes prevents that.
  * </pre>
  */
  protected StdMapStringToSX(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
	  }
  }

  public static long getCPtr(StdMapStringToSX obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_std_StdMapStringToSX(swigCPtr);
}


  /**
  * Convenience constructor to use with Map.of().
  */
  public StdMapStringToSX(java.util.Map<? extends String, ? extends de.dhbw.rahmlab.casadi.impl.casadi.SX> other) {
    this();
    this.putAll(other);
  }

  public int size() {
    return sizeImpl();
  }

  public boolean containsKey(java.lang.Object key) {
    if (!(key instanceof String)) {
      return false;
    }

    return containsImpl((String)key);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.SX get(java.lang.Object key) {
    if (!(key instanceof String)) {
      return null;
    }

    de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX itr = find((String) key);
    if (itr.isNot(end())) {
      return itr.getValue();
    }

    return null;
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.SX put(String key, de.dhbw.rahmlab.casadi.impl.casadi.SX value) {
    de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX itr = find(key);
    if (itr.isNot(end())) {
      de.dhbw.rahmlab.casadi.impl.casadi.SX oldValue = itr.getValue();
      itr.setValue(value);
      return oldValue;
    } else {
      putUnchecked(key, value);
      return null;
    }
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.SX remove(java.lang.Object key) {
    if (!(key instanceof String)) {
      return null;
    }

    de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX itr = find((String) key);
    if (itr.isNot(end())) {
      de.dhbw.rahmlab.casadi.impl.casadi.SX oldValue = itr.getValue();
      removeUnchecked(itr);
      return oldValue;
    } else {
      return null;
    }
  }

  public java.util.Set<Entry<String, de.dhbw.rahmlab.casadi.impl.casadi.SX>> entrySet() {
    java.util.Set<Entry<String, de.dhbw.rahmlab.casadi.impl.casadi.SX>> setToReturn =
        new java.util.HashSet<Entry<String, de.dhbw.rahmlab.casadi.impl.casadi.SX>>();

    de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX itr = begin();
    final de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX end = end();
    while (itr.isNot(end)) {
      setToReturn.add(new Entry<String, de.dhbw.rahmlab.casadi.impl.casadi.SX>() {
        private de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX iterator;

        private Entry<String, de.dhbw.rahmlab.casadi.impl.casadi.SX> init(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX iterator) {
          this.iterator = iterator;
          return this;
        }

        public String getKey() {
          return iterator.getKey();
        }

        public de.dhbw.rahmlab.casadi.impl.casadi.SX getValue() {
          return iterator.getValue();
        }

        public de.dhbw.rahmlab.casadi.impl.casadi.SX setValue(de.dhbw.rahmlab.casadi.impl.casadi.SX newValue) {
          de.dhbw.rahmlab.casadi.impl.casadi.SX oldValue = iterator.getValue();
          iterator.setValue(newValue);
          return oldValue;
        }
      }.init(itr));
      itr = itr.getNextUnchecked();
    }

    return setToReturn;
  }

  public StdMapStringToSX() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_std_StdMapStringToSX__SWIG_0(), true);
  }

  public StdMapStringToSX(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX other) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_std_StdMapStringToSX__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(other), other), true);
  }

  static public class StdMapIterStringToSX {
    private final long swigCPtr;
  
    public StdMapIterStringToSX(long cPtr, boolean cMemoryOwn) {
      this.swigCPtr = cPtr;
  	  if (cMemoryOwn) {
  		  REGISTER_DELETION(this, cPtr, StdMapIterStringToSX::delete);
    	}
    }
  
    /**
    * <pre>
    * In C++, deleting a pointer twice is undefined behavior!
    * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
    * Using this baseclass constructor for subtypes prevents that.
    * </pre>
    */
    protected StdMapIterStringToSX(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
      this.swigCPtr = cPtr;
  	  if (cMemoryOwn) {
  		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
  	  }
    }
  
    public static long getCPtr(StdMapIterStringToSX obj) {
      return obj.swigCPtr;
    }
  
    private static void delete(long swigCPtr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.delete_std_StdMapStringToSX_StdMapIterStringToSX(swigCPtr);
  }
  
    private de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX getNextUnchecked() {
      return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX(de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_StdMapIterStringToSX_getNextUnchecked(swigCPtr, this), true);
    }
  
    private boolean isNot(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX other) {
      return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_StdMapIterStringToSX_isNot(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX.getCPtr(other), other);
    }
  
    private String getKey() {
      return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_StdMapIterStringToSX_getKey(swigCPtr, this);
    }
  
    private de.dhbw.rahmlab.casadi.impl.casadi.SX getValue() {
      return new de.dhbw.rahmlab.casadi.impl.casadi.SX(de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_StdMapIterStringToSX_getValue(swigCPtr, this), true);
    }
  
    private void setValue(de.dhbw.rahmlab.casadi.impl.casadi.SX newValue) {
      de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_StdMapIterStringToSX_setValue(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(newValue), newValue);
    }
  
    public StdMapIterStringToSX(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX other) {
      this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_std_StdMapIterStringToSX(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX.getCPtr(other), other), true);
    }
  
  }

  public boolean isEmpty() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_isEmpty(swigCPtr, this);
  }

  public void clear() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_clear(swigCPtr, this);
  }

  private de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX find(String key) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX(de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_find(swigCPtr, this, key), true);
  }

  private de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX begin() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX(de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_begin(swigCPtr, this), true);
  }

  private de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX end() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX(de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_end(swigCPtr, this), true);
  }

  private int sizeImpl() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_sizeImpl(swigCPtr, this);
  }

  private boolean containsImpl(String key) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_containsImpl(swigCPtr, this, key);
  }

  private void putUnchecked(String key, de.dhbw.rahmlab.casadi.impl.casadi.SX value) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_putUnchecked(swigCPtr, this, key, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(value), value);
  }

  private void removeUnchecked(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX itr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.std_StdMapStringToSX_removeUnchecked(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.StdMapIterStringToSX.getCPtr(itr), itr);
  }

}
