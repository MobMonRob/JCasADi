/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.casadi;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

/**
 *  MX - Matrix expression<br>
 * <br>
 *       The MX class is used to build up trees made up from MXNodes. It is a more general<br>
 *       graph representation than the scalar expression, SX, and much less efficient for small<br>
 *       objects. On the other hand, the class allows much more general operations than does SX,<br>
 *       in particular matrix valued operations and calls to arbitrary differentiable functions.<br>
 * <br>
 *       The MX class is designed to have identical syntax with the Matrix&lt;&gt; template class,<br>
 *       and uses DM (i.e. Matrix&lt;double&gt;) as its internal representation of the values at a node. By keeping<br>
 *       the syntaxes identical, it is possible to switch from one class to the other,<br>
 *       as well as inlining MX functions to SXElem functions.<br>
 * <br>
 *       Note that an operation is always "lazy", making a matrix multiplication will create a<br>
 *       matrix multiplication node, not perform the actual multiplication.<br>
 * <br>
 *       @author Joel Andersson<br>
 *       2010-2011<br>
 * <br>
 *       
 */
public class MX implements IMxGenericExpression, IMxGenericMatrix, ISharedObject {
  private final long swigCPtr;

  public MX(long cPtr, boolean cMemoryOwn) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, cPtr, MX::delete);
  	}
  }

  /**
  * <pre>
  * In C++, deleting a pointer twice is undefined behavior!
  * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
  * Using this baseclass constructor for subtypes prevents that.
  * </pre>
  */
  protected MX(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
	  }
  }

  public static long getCPtr(MX obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_casadi_MX(swigCPtr);
}

  public long IMxGenericExpression_GetInterfaceCPtr() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_IMxGenericExpression_GetInterfaceCPtr(swigCPtr);
  }

  public long IMxGenericMatrix_GetInterfaceCPtr() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_IMxGenericMatrix_GetInterfaceCPtr(swigCPtr);
  }

  public long ISharedObject_GetInterfaceCPtr() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_ISharedObject_GetInterfaceCPtr(swigCPtr);
  }

  /**
   *  Get type name<br>
   * <br>
   *         
   */
  public static String type_name() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_type_name();
  }

  /**
   *  Default constructor<br>
   * <br>
   *         
   */
  public MX() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_0(), true);
  }

  /**
   *  Create a sparse matrix with all structural zeros<br>
   * <br>
   *         
   */
  public MX(long nrow, long ncol) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_1(nrow, ncol), true);
  }

  /**
   *  Create a sparse matrix with all structural zeros<br>
   * <br>
   *         
   */
  public MX(SWIGTYPE_p_std__pairT_long_long_long_long_t rc) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_2(SWIGTYPE_p_std__pairT_long_long_long_long_t.getCPtr(rc)), true);
  }

  /**
   *  Create a sparse matrix from a sparsity pattern.<br>
   * <br>
   *         Same as MX::ones(sparsity)<br>
   * <br>
   *         
   */
  public MX(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_3(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  /**
   *  Construct matrix with a given sparsity and nonzeros<br>
   * <br>
   *         
   */
  public MX(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, de.dhbw.rahmlab.casadi.impl.casadi.MX val) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_4(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(val), val), true);
  }

  /**
   *  Construct matrix with a given sparsity and a file with nonzeros<br>
   * <br>
   *         
   */
  public MX(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, String fname) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_5(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, fname), true);
  }

  /**
   *  Construct matrix with a given sparsity and nonzeros,<br>
   * <br>
   * configurable in codegen via a pool<br>
   * <br>
   *         
   */
  public MX(de.dhbw.rahmlab.casadi.impl.casadi.DM val, String name) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_6(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(val), val, name), true);
  }

  /**
   *  Create scalar constant (also implicit type conversion)<br>
   * <br>
   *         
   */
  public MX(double x) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_7(x), true);
  }

  /**
   *  Create vector constant (also implicit type conversion)<br>
   * <br>
   *         
   */
  public MX(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble x) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_8(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(x), x), true);
  }

  /**
   *  Create sparse matrix constant (also implicit type conversion)<br>
   * <br>
   *         
   */
  public MX(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_9(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   *  End of conditional comment.<br>
   *  Conditional comment: INTERNAL Create from node<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX create(SWIGTYPE_p_casadi__MXNode node) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_create(SWIGTYPE_p_casadi__MXNode.getCPtr(node)), true);
  }

  /**
   *  Create from node (multiple-outputs)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX createMultipleOutput(SWIGTYPE_p_casadi__MXNode node) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_createMultipleOutput(SWIGTYPE_p_casadi__MXNode.getCPtr(node)), true);
  }

  /**
   *  End of conditional comment. Get the sparsity pattern<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sparsity() {
	final long cPtr = de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_sparsity(swigCPtr, this);
	if (cPtr == 0) return null;
	// false here indicates no ownership transfer to java
	de.dhbw.rahmlab.casadi.impl.casadi.Sparsity proxy = new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(cPtr, false);
	// public void extend(final Object toBeExtendedLifeTime, final Object extendedToLifeTime)
	LIFE_TIME_EXTENDER.extend(this, proxy);
	return proxy;
}

  /**
   *  Returns the truth value of an MX expression
   */
  public boolean __nonzero__() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX___nonzero__(swigCPtr, this);
  }

  /**
   *  Get an owning reference to the sparsity pattern<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Sparsity get_sparsity() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_sparsity(swigCPtr, this), true);
  }

  /**
   *  Get nonzeros as list of scalar MXes<br>
   * <br>
   * Since MX is not a containter, the scalar MXes may be complex<br>
   * When the expression satisfies is_valid_input, the results may be simple<br>
   * <br>
   * For example: <br>
   * vertcat(x,y).nonzeros()<br>
   * will return {x,y}<br>
   * <br>
   * @see expr.nz[:]<br>
   * <br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX get_nonzeros() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_nonzeros(swigCPtr, this), true);
  }

  /**
   *  Erase a submatrix (leaving structural zeros in its place)<br>
   * <br>
   *         Erase rows and/or columns of a matrix<br>
   * <br>
   *         
   */
  public void erase(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc, boolean ind1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_erase__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc, ind1);
  }

  /**
   *  Erase a submatrix (leaving structural zeros in its place)<br>
   * <br>
   *         Erase rows and/or columns of a matrix<br>
   * <br>
   *         
   */
  public void erase(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_erase__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc);
  }

  /**
   *  Erase a submatrix (leaving structural zeros in its place)<br>
   * <br>
   *         Erase elements of a matrix<br>
   * <br>
   *         
   */
  public void erase(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, boolean ind1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_erase__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, ind1);
  }

  /**
   *  Erase a submatrix (leaving structural zeros in its place)<br>
   * <br>
   *         Erase elements of a matrix<br>
   * <br>
   *         
   */
  public void erase(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_erase__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr);
  }

  /**
   *  Enlarge matrix<br>
   * <br>
   *         Make the matrix larger by inserting empty rows and columns, keeping the existing non-zeros<br>
   * <br>
   *         
   */
  public void enlarge(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc, boolean ind1) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_enlarge__SWIG_0(swigCPtr, this, nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc, ind1);
  }

  /**
   *  Enlarge matrix<br>
   * <br>
   *         Make the matrix larger by inserting empty rows and columns, keeping the existing non-zeros<br>
   * <br>
   *         
   */
  public void enlarge(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_enlarge__SWIG_1(swigCPtr, this, nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(cc), cc);
  }

  /**
   * <br>
   *  End of conditional comment. Get the nth dependency as MX<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX dep(long ch) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_dep__SWIG_0(swigCPtr, this, ch), true);
  }

  /**
   * <br>
   *  End of conditional comment. Get the nth dependency as MX<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX dep() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_dep__SWIG_1(swigCPtr, this), true);
  }

  /**
   *  Number of outputs<br>
   * <br>
   *         
   */
  public long n_out() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_n_out(swigCPtr, this);
  }

  /**
   *  Get an output<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX get_output(long oind) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_output(swigCPtr, this, oind), true);
  }

  /**
   *  Get the number of dependencies of a binary SXElem<br>
   * <br>
   *         
   */
  public long n_dep() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_n_dep(swigCPtr, this);
  }

  /**
   *  Get the name.
   */
  public String name() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_name(swigCPtr, this);
  }

  /**
   *  Check if symbolic
   */
  public boolean is_symbolic() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_symbolic(swigCPtr, this);
  }

  /**
   *  Check if constant
   */
  public boolean is_constant() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_constant(swigCPtr, this);
  }

  /**
   *  Check if evaluation
   */
  public boolean is_call() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_call(swigCPtr, this);
  }

  /**
   *  Get function - only valid when is_call() is true
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function which_function() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_which_function(swigCPtr, this), true);
  }

  /**
   *  Check if evaluation output
   */
  public boolean is_output() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_output(swigCPtr, this);
  }

  /**
   *  Check if a multiple output node<br>
   * <br>
   *         
   */
  public boolean has_output() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_has_output(swigCPtr, this);
  }

  /**
   *  Get the index of evaluation output - only valid when is_output() is true
   */
  public long which_output() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_which_output(swigCPtr, this);
  }

  /**
   *  Is it a certain operation
   */
  public boolean is_op(long op) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_op(swigCPtr, this, op);
  }

  /**
   *  Check if multiplication
   */
  public boolean is_multiplication() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_multiplication(swigCPtr, this);
  }

  /**
   *  Check if commutative operation
   */
  public boolean is_commutative() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_commutative(swigCPtr, this);
  }

  /**
   *  Check if norm
   */
  public boolean is_norm() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_norm(swigCPtr, this);
  }

  /**
   *  Check if matrix can be used to define function inputs.<br>
   * <br>
   *         Valid inputs for MXFunctions are combinations of Reshape, concatenations and SymbolicMX<br>
   * <br>
   *         
   */
  public boolean is_valid_input() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_valid_input(swigCPtr, this);
  }

  /**
   *  Get the number of primitives for MXFunction inputs/outputs<br>
   * <br>
   *         
   */
  public long n_primitives() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_n_primitives(swigCPtr, this);
  }

  /**
   *  Get primitives<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX primitives() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_primitives(swigCPtr, this), true);
  }

  /**
   *  Split up an expression along symbolic primitives<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX split_primitives(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_split_primitives__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorSX split_primitives(de.dhbw.rahmlab.casadi.impl.casadi.SX x) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorSX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_split_primitives__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(x), x), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorDM split_primitives(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_split_primitives__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   *  <br>
   *  Join an expression along symbolic primitives<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX join_primitives(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_join_primitives__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.SX join_primitives(de.dhbw.rahmlab.casadi.impl.std.StdVectorSX v) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.SX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_join_primitives__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorSX.getCPtr(v), v), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.DM join_primitives(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM v) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_join_primitives__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(v), v), true);
  }

  /**
   *  <br>
   *  Conditional comment: INTERNAL Detect duplicate symbolic expressions<br>
   * <br>
   *         If there are symbolic primitives appearing more than once, the function will return<br>
   *         true and the names of the duplicate expressions will be passed to casadi_warning.<br>
   *         Note: Will mark the node using MX::set_temp.<br>
   *         Make sure to call reset_input() after usage.<br>
   * <br>
   *         
   */
  public boolean has_duplicates() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_has_duplicates(swigCPtr, this);
  }

  /**
   *  Reset the marker for an input expression<br>
   * <br>
   *         
   */
  public void reset_input() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_reset_input(swigCPtr, this);
  }

  /**
   *  End of conditional comment. check if identity<br>
   * <br>
   *         
   */
  public boolean is_eye() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_eye(swigCPtr, this);
  }

  /**
   *  check if zero (note that false negative answers are possible)<br>
   * <br>
   *         
   */
  public boolean is_zero() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_zero(swigCPtr, this);
  }

  /**
   *  check if zero (note that false negative answers are possible)<br>
   * <br>
   *         
   */
  public boolean is_one() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_one(swigCPtr, this);
  }

  /**
   *  check if zero (note that false negative answers are possible)<br>
   * <br>
   *         
   */
  public boolean is_minus_one() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_minus_one(swigCPtr, this);
  }

  /**
   *  Is the expression a transpose?<br>
   * <br>
   *         
   */
  public boolean is_transpose() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_transpose(swigCPtr, this);
  }

  /**
   *  Checks if expression does not contain NaN or Inf
   */
  public boolean is_regular() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_regular(swigCPtr, this);
  }

  /**
   *  Is binary operation
   */
  public boolean is_binary() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_binary(swigCPtr, this);
  }

  /**
   *  Is unary operation
   */
  public boolean is_unary() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_unary(swigCPtr, this);
  }

  /**
   *  Get operation type
   */
  public long op() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_op(swigCPtr, this);
  }

  /**
   *  Obtain information about node 
   */
  public de.dhbw.rahmlab.casadi.impl.std.Dict info() {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_info(swigCPtr, this), true);
  }

  /**
   *  Serialize an object<br>
   * <br>
   *         
   */
  public void serialize(SWIGTYPE_p_casadi__SerializingStream s) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_serialize(swigCPtr, this, SWIGTYPE_p_casadi__SerializingStream.getCPtr(s));
  }

  /**
   *  Deserialize with type disambiguation<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX deserialize(SWIGTYPE_p_casadi__DeserializingStream s) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_deserialize(SWIGTYPE_p_casadi__DeserializingStream.getCPtr(s)), true);
  }

  /**
   *  Conditional comment: INTERNAL<br>
   *  Get the temporary variable
   */
  public long get_temp() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_temp(swigCPtr, this);
  }

  /**
   *  Set the temporary variable
   */
  public void set_temp(long t) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set_temp(swigCPtr, this, t);
  }

  /**
   *  End of conditional comment.<br>
   * Create nodes by their ID<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX binary(long op, de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_binary(op, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX unary(long op, de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_unary(op, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  /**
   * <br>
   * create a matrix with all inf<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inf(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inf__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inf(long nrow, long ncol) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inf__SWIG_1(nrow, ncol), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inf(long nrow) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inf__SWIG_2(nrow), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inf() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inf__SWIG_3(), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inf(SWIGTYPE_p_std__pairT_long_long_long_long_t rc) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inf__SWIG_4(SWIGTYPE_p_std__pairT_long_long_long_long_t.getCPtr(rc)), true);
  }

  /**
   * <br>
   * create a matrix with all nan<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX nan(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nan__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX nan(long nrow, long ncol) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nan__SWIG_1(nrow, ncol), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX nan(long nrow) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nan__SWIG_2(nrow), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX nan() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nan__SWIG_3(), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX nan(SWIGTYPE_p_std__pairT_long_long_long_long_t rc) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nan__SWIG_4(SWIGTYPE_p_std__pairT_long_long_long_long_t.getCPtr(rc)), true);
  }

  /**
   * Identity matrix<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX eye(long n) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_eye(n), true);
  }

  /**
   *  Get a const pointer to the node
   */
  public SWIGTYPE_p_casadi__MXNode get() {throw new UnsupportedOperationException();}

  /**
   * <br>
   *  Get a submatrix, single argument
   */
  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice rr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(rr), rr);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM rr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(rr), rr);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX rr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(rr), rr);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, long rr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, rr);
  }

  /**
   * <br>
   *  Get a submatrix, two arguments<br>
   * 
   */
  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_6(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(cc), cc);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice rr, de.dhbw.rahmlab.casadi.impl.casadi.IM cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_7(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(cc), cc);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice rr, long cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_8(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(rr), rr, cc);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_9(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(cc), cc);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, long rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_10(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(cc), cc);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM rr, de.dhbw.rahmlab.casadi.impl.casadi.IM cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_11(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(cc), cc);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, long rr, long cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_12(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, rr, cc);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_13(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(cc), cc);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice rr, de.dhbw.rahmlab.casadi.impl.casadi.MX cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_14(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(cc), cc);
  }

  public void get(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX rr, de.dhbw.rahmlab.casadi.impl.casadi.MX cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get__SWIG_15(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(cc), cc);
  }

  /**
   * <br>
   * <br>
   *  Set a submatrix, single argument
   */
  public void set(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice rr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(rr), rr);
  }

  public void set(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM rr) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(rr), rr);
  }

  public void set(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp);
  }

  /**
   * <br>
   * <br>
   *  Set a submatrix, two arguments
   */
  public void set(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(cc), cc);
  }

  public void set(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice rr, de.dhbw.rahmlab.casadi.impl.casadi.IM cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(cc), cc);
  }

  public void set(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(cc), cc);
  }

  public void set(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM rr, de.dhbw.rahmlab.casadi.impl.casadi.IM cc) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set__SWIG_6(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(rr), rr, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(cc), cc);
  }

  /**
   * <br>
   * <br>
   *  Get a set of nonzeros
   */
  public void get_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice kk) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_nz__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(kk), kk);
  }

  public void get_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM kk) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_nz__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(kk), kk);
  }

  public void get_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX kk) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_nz__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(kk), kk);
  }

  public void get_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, long kk) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_nz__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, kk);
  }

  public void get_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX inner, de.dhbw.rahmlab.casadi.impl.casadi.Slice outer) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_nz__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(inner), inner, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(outer), outer);
  }

  public void get_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice inner, de.dhbw.rahmlab.casadi.impl.casadi.MX outer) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_nz__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(inner), inner, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(outer), outer);
  }

  public void get_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX OUTPUT, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX inner, de.dhbw.rahmlab.casadi.impl.casadi.MX outer) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_nz__SWIG_6(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(OUTPUT), OUTPUT, ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(inner), inner, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(outer), outer);
  }

  /**
   * <br>
   * <br>
   *  Set a set of nonzeros
   */
  public void set_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice kk) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set_nz__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.Slice.getCPtr(kk), kk);
  }

  public void set_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM kk) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set_nz__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(kk), kk);
  }

  public void set_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX kk) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set_nz__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(kk), kk);
  }

  public void set_nz(de.dhbw.rahmlab.casadi.impl.casadi.MX m, boolean ind1, long kk) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set_nz__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, ind1, kk);
  }

  /**
   * <br>
   * Computes an einstein dense tensor contraction<br>
   * <br>
   *         Computes the product:<br>
   *         C_c = A_a + B_b<br>
   *           where a b c are index/einstein notation in an encoded form<br>
   * <br>
   *         For example, an matrix-matrix product may be written as:<br>
   *         C_ij = A_ik B_kj<br>
   * <br>
   *         The encoded form uses strictly negative numbers to indicate labels.<br>
   *         For the above example, we would have:<br>
   *         a {-1, -3} b {-3, -2} c {-1 -2}<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX einstein(de.dhbw.rahmlab.casadi.impl.casadi.MX A, de.dhbw.rahmlab.casadi.impl.casadi.MX B, de.dhbw.rahmlab.casadi.impl.casadi.MX C, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt dim_a, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt dim_b, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt dim_c, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt a, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt b, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt c) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_einstein__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(B), B, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(C), C, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(dim_a), dim_a, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(dim_b), dim_b, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(dim_c), dim_c, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(a), a, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(b), b, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(c), c), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX einstein(de.dhbw.rahmlab.casadi.impl.casadi.MX A, de.dhbw.rahmlab.casadi.impl.casadi.MX B, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt dim_a, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt dim_b, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt dim_c, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt a, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt b, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt c) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_einstein__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(B), B, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(dim_a), dim_a, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(dim_b), dim_b, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(dim_c), dim_c, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(a), a, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(b), b, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(c), c), true);
  }

  /**
   * <br>
   *  Conditional comment: CLUTTER<br>
   * <br>
   *  Functions called by friend functions defined for GenericExpression
   */
  public static boolean is_equal(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX y, long depth) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_equal__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y, depth);
  }

  /**
   * <br>
   *  Conditional comment: CLUTTER<br>
   * <br>
   *  Functions called by friend functions defined for GenericExpression
   */
  public static boolean is_equal(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX y) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_equal__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX mmin(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_mmin(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX mmax(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_mmax(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  /**
   * <br>
   * <br>
   *  Functions called by friend functions defined for SparsityInterface
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX horzcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_horzcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX diagcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_diagcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX vertcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_vertcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX horzsplit(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt offset) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_horzsplit__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(offset), offset), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX diagsplit(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt offset1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt offset2) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_diagsplit__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(offset1), offset1, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(offset2), offset2), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vertsplit(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt offset) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_vertsplit__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(offset), offset), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX blockcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX v) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_blockcat(de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX.getCPtr(v), v), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX mtimes(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_mtimes__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX mac(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX y, de.dhbw.rahmlab.casadi.impl.casadi.MX z) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_mac(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(z), z), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX reshape(de.dhbw.rahmlab.casadi.impl.casadi.MX x, long nrow, long ncol) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_reshape__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, nrow, ncol), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX reshape(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_reshape__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX sparsity_cast(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_sparsity_cast(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX kron(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX b) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_kron(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(b), b), true);
  }

  /**
   * <br>
   * <br>
   *  Functions called by friend functions defined for GenericMatrix
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX jacobian(de.dhbw.rahmlab.casadi.impl.casadi.MX f, de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_jacobian__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * <br>
   * <br>
   *  Functions called by friend functions defined for GenericMatrix
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX jacobian(de.dhbw.rahmlab.casadi.impl.casadi.MX f, de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_jacobian__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX hessian(de.dhbw.rahmlab.casadi.impl.casadi.MX f, de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_hessian__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX hessian(de.dhbw.rahmlab.casadi.impl.casadi.MX f, de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_hessian__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX hessian(de.dhbw.rahmlab.casadi.impl.casadi.MX f, de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX g, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_hessian__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(g), g, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX hessian(de.dhbw.rahmlab.casadi.impl.casadi.MX f, de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX g) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_hessian__SWIG_3(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(g), g), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX forward(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX v, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_forward__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX forward(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX v) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_forward__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX.getCPtr(v), v), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX reverse(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX v, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_reverse__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX reverse(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX v) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_reverse__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX.getCPtr(v), v), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorBool which_depends(de.dhbw.rahmlab.casadi.impl.casadi.MX expr, de.dhbw.rahmlab.casadi.impl.casadi.MX var, long order, boolean tr) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorBool(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_which_depends__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr), expr, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(var), var, order, tr), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorBool which_depends(de.dhbw.rahmlab.casadi.impl.casadi.MX expr, de.dhbw.rahmlab.casadi.impl.casadi.MX var, long order) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorBool(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_which_depends__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr), expr, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(var), var, order), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorBool which_depends(de.dhbw.rahmlab.casadi.impl.casadi.MX expr, de.dhbw.rahmlab.casadi.impl.casadi.MX var) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorBool(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_which_depends__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr), expr, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(var), var), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Sparsity jacobian_sparsity(de.dhbw.rahmlab.casadi.impl.casadi.MX f, de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Sparsity(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_jacobian_sparsity(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX substitute(de.dhbw.rahmlab.casadi.impl.casadi.MX ex, de.dhbw.rahmlab.casadi.impl.casadi.MX v, de.dhbw.rahmlab.casadi.impl.casadi.MX vdef) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_substitute__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(vdef), vdef), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX substitute(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vdef) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_substitute__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(vdef), vdef), true);
  }

  public static void substitute_inplace(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vdef, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, boolean reverse) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_substitute_inplace(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(vdef), vdef, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, reverse);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX solve(de.dhbw.rahmlab.casadi.impl.casadi.MX a, de.dhbw.rahmlab.casadi.impl.casadi.MX b) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_solve__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(a), a, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(b), b), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX solve(de.dhbw.rahmlab.casadi.impl.casadi.MX a, de.dhbw.rahmlab.casadi.impl.casadi.MX b, String lsolver, de.dhbw.rahmlab.casadi.impl.std.Dict dict) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_solve__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(a), a, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(b), b, lsolver, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(dict), dict), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX solve(de.dhbw.rahmlab.casadi.impl.casadi.MX a, de.dhbw.rahmlab.casadi.impl.casadi.MX b, String lsolver) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_solve__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(a), a, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(b), b, lsolver), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inv_minor(de.dhbw.rahmlab.casadi.impl.casadi.MX A) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inv_minor(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inv_node(de.dhbw.rahmlab.casadi.impl.casadi.MX A) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inv_node(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inv(de.dhbw.rahmlab.casadi.impl.casadi.MX A, String lsolver, de.dhbw.rahmlab.casadi.impl.std.Dict dict) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inv__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, lsolver, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(dict), dict), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inv(de.dhbw.rahmlab.casadi.impl.casadi.MX A, String lsolver) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inv__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, lsolver), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX inv(de.dhbw.rahmlab.casadi.impl.casadi.MX A) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_inv__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX pinv(de.dhbw.rahmlab.casadi.impl.casadi.MX A, String lsolver, de.dhbw.rahmlab.casadi.impl.std.Dict dict) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_pinv__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, lsolver, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(dict), dict), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX pinv(de.dhbw.rahmlab.casadi.impl.casadi.MX A, String lsolver) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_pinv__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, lsolver), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX pinv(de.dhbw.rahmlab.casadi.impl.casadi.MX A) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_pinv__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX expm_const(de.dhbw.rahmlab.casadi.impl.casadi.MX A, de.dhbw.rahmlab.casadi.impl.casadi.MX t) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_expm_const(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(t), t), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX expm(de.dhbw.rahmlab.casadi.impl.casadi.MX A) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_expm(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A), true);
  }

  public static long n_nodes(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_n_nodes(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x);
  }

  public static String print_operator(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString args) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_print_operator(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(args), args);
  }

  public static void extract(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vdef, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_extract__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(vdef), vdef, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts);
  }

  public static void extract(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vdef) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_extract__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(vdef), vdef);
  }

  public static void shared(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vdef, String v_prefix, String v_suffix) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_shared(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(vdef), vdef, v_prefix, v_suffix);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX if_else(de.dhbw.rahmlab.casadi.impl.casadi.MX cond, de.dhbw.rahmlab.casadi.impl.casadi.MX if_true, de.dhbw.rahmlab.casadi.impl.casadi.MX if_false, boolean short_circuit) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_if_else__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(cond), cond, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(if_true), if_true, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(if_false), if_false, short_circuit), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX if_else(de.dhbw.rahmlab.casadi.impl.casadi.MX cond, de.dhbw.rahmlab.casadi.impl.casadi.MX if_true, de.dhbw.rahmlab.casadi.impl.casadi.MX if_false) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_if_else__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(cond), cond, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(if_true), if_true, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(if_false), if_false), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX conditional(de.dhbw.rahmlab.casadi.impl.casadi.MX ind, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX x, de.dhbw.rahmlab.casadi.impl.casadi.MX x_default, boolean short_circuit) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_conditional__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(ind), ind, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x_default), x_default, short_circuit), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX conditional(de.dhbw.rahmlab.casadi.impl.casadi.MX ind, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX x, de.dhbw.rahmlab.casadi.impl.casadi.MX x_default) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_conditional__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(ind), ind, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x_default), x_default), true);
  }

  public static boolean depends_on(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX arg) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_depends_on(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(arg), arg);
  }

  public static boolean contains_all(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX n) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_contains_all(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(n), n);
  }

  public static boolean contains_any(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX n) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_contains_any(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(n), n);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX simplify(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_simplify(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX dot(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_dot(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX mrdivide(de.dhbw.rahmlab.casadi.impl.casadi.MX a, de.dhbw.rahmlab.casadi.impl.casadi.MX b) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_mrdivide(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(a), a, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(b), b), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX mldivide(de.dhbw.rahmlab.casadi.impl.casadi.MX a, de.dhbw.rahmlab.casadi.impl.casadi.MX b) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_mldivide(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(a), a, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(b), b), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX norm_2(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_norm_2(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX norm_fro(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_norm_fro(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX norm_1(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_norm_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX norm_inf(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_norm_inf(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX unite(de.dhbw.rahmlab.casadi.impl.casadi.MX A, de.dhbw.rahmlab.casadi.impl.casadi.MX B) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_unite(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(B), B), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX trace(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_trace(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX diag(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_diag(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX sum2(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_sum2(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX sum1(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_sum1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX polyval(de.dhbw.rahmlab.casadi.impl.casadi.MX p, de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_polyval(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(p), p, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX det(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_det(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX symvar(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_symvar(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX nullspace(de.dhbw.rahmlab.casadi.impl.casadi.MX A) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nullspace(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX repsum(de.dhbw.rahmlab.casadi.impl.casadi.MX x, long n, long m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_repsum__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, n, m), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX repsum(de.dhbw.rahmlab.casadi.impl.casadi.MX x, long n) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_repsum__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, n), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX densify(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX val) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_densify__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(val), val), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX densify(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_densify__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX _bilin(de.dhbw.rahmlab.casadi.impl.casadi.MX A, de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX__bilin(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX _rank1(de.dhbw.rahmlab.casadi.impl.casadi.MX A, de.dhbw.rahmlab.casadi.impl.casadi.MX alpha, de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX__rank1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(alpha), alpha, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX project(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, boolean intersect) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_project__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, intersect), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX project(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_project__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX cumsum(de.dhbw.rahmlab.casadi.impl.casadi.MX x, long axis) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_cumsum__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, axis), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX cumsum(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_cumsum__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX _logsumexp(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX__logsumexp(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX cse(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX e) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_cse(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(e), e), true);
  }

  public static void extract_parametric(de.dhbw.rahmlab.casadi.impl.casadi.MX expr, de.dhbw.rahmlab.casadi.impl.casadi.MX par, de.dhbw.rahmlab.casadi.impl.casadi.MX expr_ret, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX symbols, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX parametric, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_extract_parametric(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr), expr, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(par), par, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr_ret), expr_ret, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(symbols), symbols, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(parametric), parametric, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts);
  }

  public static void separate_linear(de.dhbw.rahmlab.casadi.impl.casadi.MX expr, de.dhbw.rahmlab.casadi.impl.casadi.MX sym_lin, de.dhbw.rahmlab.casadi.impl.casadi.MX sym_const, de.dhbw.rahmlab.casadi.impl.casadi.MX expr_const, de.dhbw.rahmlab.casadi.impl.casadi.MX expr_lin, de.dhbw.rahmlab.casadi.impl.casadi.MX expr_nonlin) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_separate_linear(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr), expr, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(sym_lin), sym_lin, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(sym_const), sym_const, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr_const), expr_const, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr_lin), expr_lin, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr_nonlin), expr_nonlin);
  }

  /**
   * <br>
   * <br>
   *  Functions called by friend functions defined for this class
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX find(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_find(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX low(de.dhbw.rahmlab.casadi.impl.casadi.MX v, de.dhbw.rahmlab.casadi.impl.casadi.MX p, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_low__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(p), p, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX low(de.dhbw.rahmlab.casadi.impl.casadi.MX v, de.dhbw.rahmlab.casadi.impl.casadi.MX p) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_low__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(p), p), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX graph_substitute(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vdef) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_graph_substitute__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(vdef), vdef), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX graph_substitute(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vdef, SWIGTYPE_p_bool updated) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_graph_substitute__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(vdef), vdef, SWIGTYPE_p_bool.getCPtr(updated)), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX graph_substitute(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vdef) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_graph_substitute__SWIG_2(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(vdef), vdef), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX graph_substitute(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX vdef, SWIGTYPE_p_bool updated) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_graph_substitute__SWIG_3(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(ex), ex, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(vdef), vdef, SWIGTYPE_p_bool.getCPtr(updated)), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX matrix_expand(de.dhbw.rahmlab.casadi.impl.casadi.MX e, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX boundary, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_matrix_expand__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(e), e, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(boundary), boundary, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX matrix_expand(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX e, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX boundary, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_matrix_expand__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(e), e, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(boundary), boundary, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX lift(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX x_guess) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_lift(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x_guess), x_guess), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.DM evalf(de.dhbw.rahmlab.casadi.impl.casadi.MX m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_evalf(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX bspline(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.DM coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt degree, long m, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_bspline__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(coeffs), coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(knots), knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(degree), degree, m, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX bspline(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.DM coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt degree, long m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_bspline__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(coeffs), coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(knots), knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(degree), degree, m), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX bspline(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt degree, long m, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_bspline__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(coeffs), coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(knots), knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(degree), degree, m, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX bspline(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.MX coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt degree, long m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_bspline__SWIG_3(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(coeffs), coeffs, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(knots), knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(degree), degree, m), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX convexify(de.dhbw.rahmlab.casadi.impl.casadi.MX H, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_convexify__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(H), H, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX convexify(de.dhbw.rahmlab.casadi.impl.casadi.MX H) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_convexify__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(H), H), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX stop_diff(de.dhbw.rahmlab.casadi.impl.casadi.MX expr, long order) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_stop_diff__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr), expr, order), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX stop_diff(de.dhbw.rahmlab.casadi.impl.casadi.MX expr, de.dhbw.rahmlab.casadi.impl.casadi.MX var, long order) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_stop_diff__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr), expr, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(var), var, order), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX difference(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX a, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX b) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_difference(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(a), a, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(b), b), true);
  }

  /**
   * <br>
   *  End of conditional comment.
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM bspline_dual(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble x, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt degree, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_bspline_dual__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(knots), knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(degree), degree, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * <br>
   *  End of conditional comment.
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM bspline_dual(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble x, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt degree) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_bspline_dual__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(knots), knots, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(degree), degree), true);
  }

  /**
   *  Low-level access to inlined linear interpolation<br>
   * <br>
   * Usually, you want to be using 'interpolant' instead.<br>
   * <br>
   * Accepts lookup_mode option.<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX interpn_linear(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX x, de.dhbw.rahmlab.casadi.impl.casadi.MX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX xq, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_interpn_linear__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(xq), xq, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Low-level access to inlined linear interpolation<br>
   * <br>
   * Usually, you want to be using 'interpolant' instead.<br>
   * <br>
   * Accepts lookup_mode option.<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX interpn_linear(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX x, de.dhbw.rahmlab.casadi.impl.casadi.MX v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX xq) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_interpn_linear__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(v), v, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(xq), xq), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX printme(de.dhbw.rahmlab.casadi.impl.casadi.MX b) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_printme(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(b), b), true);
  }

  /**
   *  returns itself, but with an assertion attached<br>
   * <br>
   *  If y does not evaluate to 1, a runtime error is raised<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX attachAssert(de.dhbw.rahmlab.casadi.impl.casadi.MX y, String fail_message) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_attachAssert__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y, fail_message), true);
  }

  /**
   *  returns itself, but with an assertion attached<br>
   * <br>
   *  If y does not evaluate to 1, a runtime error is raised<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX attachAssert(de.dhbw.rahmlab.casadi.impl.casadi.MX y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_attachAssert__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(y), y), true);
  }

  /**
   *  Monitor an expression<br>
   * <br>
   * Returns itself, but with the side effect of printing the nonzeros along with a comment<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX monitor(String comment) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_monitor(swigCPtr, this, comment), true);
  }

  /**
   *  Transpose the matrix
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX T() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_T(swigCPtr, this), true);
  }

  /**
   *  Get an IM representation of a GetNonzeros or SetNonzeros node<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.IM mapping() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_mapping(swigCPtr, this), true);
  }

  /**
   *  Set or reset the depth to which equalities are being checked for simplifications<br>
   * <br>
   *         
   */
  public static void set_max_depth(long eq_depth) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set_max_depth__SWIG_0(eq_depth);
  }

  /**
   *  Set or reset the depth to which equalities are being checked for simplifications<br>
   * <br>
   *         
   */
  public static void set_max_depth() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_set_max_depth__SWIG_1();
  }

  /**
   *  Get the depth to which equalities are being checked for simplifications<br>
   * <br>
   *         
   */
  public static long get_max_depth() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_max_depth();
  }

  /**
   *  Check if a particular cast is allowed
   */
  public static boolean test_cast(SWIGTYPE_p_SharedObjectInternal ptr) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_test_cast(SWIGTYPE_p_SharedObjectInternal.getCPtr(ptr));
  }

  /**
   *  Get function inputs<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX get_input(de.dhbw.rahmlab.casadi.impl.casadi.Function f) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_input(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f), true);
  }

  /**
   *  Get free variables<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX get_free(de.dhbw.rahmlab.casadi.impl.casadi.Function f) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_free(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f), true);
  }

  /**
   *  Evaluate the MX node with new symbolic dependencies<br>
   * <br>
   *         
   */
  public void eval_mx(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX OUTPUT) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_eval_mx(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(arg), arg, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(OUTPUT), OUTPUT);
  }

  /**
   * Called from MXFunction<br>
   * <br>
   *         
   */
  public void ad_forward(de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX fseed, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX fsens) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_ad_forward(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX.getCPtr(fseed), fseed, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX.getCPtr(fsens), fsens);
  }

  public void ad_reverse(de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX aseed, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX asens) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_ad_reverse(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX.getCPtr(aseed), aseed, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorMX.getCPtr(asens), asens);
  }

  /**
   * <br>
   *  Construct constant matrix with a given sparsity and values
   */
  public MX(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, double val, boolean dummy) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_10(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, val, dummy), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX _sym(String name, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX__sym(name, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MxSubIndex at(int rr) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MxSubIndex(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_at__SWIG_0(swigCPtr, this, rr), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MxSubMatrix at(int rr, int cc) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MxSubMatrix(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_at__SWIG_1(swigCPtr, this, rr, cc), true);
  }

  public void assign(de.dhbw.rahmlab.casadi.impl.casadi.MX other) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_assign(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(other), other);
  }

  /**
   *  Get the number of (structural) non-zero elements<br>
   * <br>
   *         
   */
  public long nnz_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nnz_(swigCPtr, this);
  }

  /**
   *  Get the number of non-zeros in the lower triangular half<br>
   * <br>
   *         
   */
  public long nnz_lower_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nnz_lower_(swigCPtr, this);
  }

  /**
   *  Get the number of non-zeros in the upper triangular half<br>
   * <br>
   *         
   */
  public long nnz_upper_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nnz_upper_(swigCPtr, this);
  }

  /**
   *  Get get the number of non-zeros on the diagonal<br>
   * <br>
   *         
   */
  public long nnz_diag() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_nnz_diag(swigCPtr, this);
  }

  /**
   *  Get the number of elements<br>
   * <br>
   *         
   */
  public long numel_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_numel_(swigCPtr, this);
  }

  /**
   *  Get the first dimension (i.e. number of rows)<br>
   * <br>
   *         
   */
  public long size1_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_size1_(swigCPtr, this);
  }

  /**
   *  Get the number of rows, Octave-style syntax<br>
   * <br>
   *         
   */
  public long rows() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_rows(swigCPtr, this);
  }

  /**
   *  Get the second dimension (i.e. number of columns)<br>
   * <br>
   *         
   */
  public long size2_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_size2_(swigCPtr, this);
  }

  /**
   *  Get the number of columns, Octave-style syntax<br>
   * <br>
   *         
   */
  public long columns() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_columns(swigCPtr, this);
  }

  /**
   *  Get string representation of dimensions.<br>
   * <br>
   *         The representation is e.g. "4x5" or  "4x5,10nz"<br>
   * <br>
   *         
   */
  public String dim_(boolean with_nz) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_dim___SWIG_0(swigCPtr, this, with_nz);
  }

  /**
   *  Get string representation of dimensions.<br>
   * <br>
   *         The representation is e.g. "4x5" or  "4x5,10nz"<br>
   * <br>
   *         
   */
  public String dim_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_dim___SWIG_1(swigCPtr, this);
  }

  /**
   *  Get the shape<br>
   * <br>
   *         
   */
  public SWIGTYPE_p_std__pairT_long_long_long_long_t size_() {
    return new SWIGTYPE_p_std__pairT_long_long_long_long_t(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_size___SWIG_0(swigCPtr, this), true);
  }

  /**
   *  Get the size along a particular dimensions<br>
   * <br>
   *         
   */
  public long size_(long axis) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_size___SWIG_1(swigCPtr, this, axis);
  }

  /**
   *  Check if the sparsity is empty, i.e. if one of the dimensions is zero<br>
   * <br>
   * (or optionally both dimensions)<br>
   * <br>
   *         
   */
  public boolean is_empty_(boolean both) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_empty___SWIG_0(swigCPtr, this, both);
  }

  /**
   *  Check if the sparsity is empty, i.e. if one of the dimensions is zero<br>
   * <br>
   * (or optionally both dimensions)<br>
   * <br>
   *         
   */
  public boolean is_empty_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_empty___SWIG_1(swigCPtr, this);
  }

  /**
   *  Check if the matrix expression is dense<br>
   * <br>
   *         
   */
  public boolean is_dense_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_dense_(swigCPtr, this);
  }

  /**
   *  Check if the matrix expression is scalar<br>
   * <br>
   *         
   */
  public boolean is_scalar_(boolean scalar_and_dense) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_scalar___SWIG_0(swigCPtr, this, scalar_and_dense);
  }

  /**
   *  Check if the matrix expression is scalar<br>
   * <br>
   *         
   */
  public boolean is_scalar_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_scalar___SWIG_1(swigCPtr, this);
  }

  /**
   *  Check if the matrix expression is square<br>
   * <br>
   *         
   */
  public boolean is_square() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_square(swigCPtr, this);
  }

  /**
   *  Check if the matrix is a row or column vector<br>
   * <br>
   *         
   */
  public boolean is_vector_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_vector_(swigCPtr, this);
  }

  /**
   *  Check if the matrix is a row vector (i.e. size1()==1)<br>
   * <br>
   *         
   */
  public boolean is_row_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_row_(swigCPtr, this);
  }

  /**
   *  Check if the matrix is a column vector (i.e. size2()==1)<br>
   * <br>
   *         
   */
  public boolean is_column_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_column_(swigCPtr, this);
  }

  /**
   *  Check if the matrix is upper triangular<br>
   * <br>
   *         
   */
  public boolean is_triu_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_triu_(swigCPtr, this);
  }

  /**
   *  Check if the matrix is lower triangular<br>
   * <br>
   *         
   */
  public boolean is_tril_() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_is_tril_(swigCPtr, this);
  }

  /**
   * Get the sparsity pattern. See the Sparsity class for details.<br>
   * <br>
   *         
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt get_row() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_row(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt get_colind() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_get_colind(swigCPtr, this), true);
  }

  public SWIGTYPE_p_long_long row_() {throw new UnsupportedOperationException();}

  public SWIGTYPE_p_long_long colind_() {throw new UnsupportedOperationException();}

  public long row_(long el) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_row___SWIG_1(swigCPtr, this, el);
  }

  public long colind_(long col) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_colind___SWIG_1(swigCPtr, this, col);
  }

  public String toString(boolean more) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_toString__SWIG_0(swigCPtr, this, more);
  }

  public String toString() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_MX_toString__SWIG_1(swigCPtr, this);
  }

  public MX(de.dhbw.rahmlab.casadi.impl.casadi.MX other) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_MX__SWIG_11(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(other), other), true);
  }

}
