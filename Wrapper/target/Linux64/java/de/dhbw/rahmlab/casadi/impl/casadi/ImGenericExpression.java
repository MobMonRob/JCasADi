/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.casadi;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

/**
 *  Expression interface<br>
 * <br>
 *   This is a common base class for SX, MX and Matrix&lt;&gt;, introducing a uniform syntax and implementing<br>
 *   common functionality using the curiously recurring template pattern (CRTP) idiom.<br>
 * <br>
 * <br>
 *   @author Joel Andersson<br>
 *   2012<br>
 * <br>
 *       
 */
public class ImGenericExpression implements IImGenericExpression {
  private final long swigCPtr;

  public ImGenericExpression(long cPtr, boolean cMemoryOwn) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, cPtr, ImGenericExpression::delete);
  	}
  }

  /**
  * <pre>
  * In C++, deleting a pointer twice is undefined behavior!
  * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
  * Using this baseclass constructor for subtypes prevents that.
  * </pre>
  */
  protected ImGenericExpression(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
	  }
  }

  public static long getCPtr(ImGenericExpression obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_casadi_ImGenericExpression(swigCPtr);
}

  public long IImGenericExpression_GetInterfaceCPtr() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_IImGenericExpression_GetInterfaceCPtr(swigCPtr);
  }

  /**
   * Addition: (x,y) -&gt; x + y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM plus(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_plus(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Subtraction: (x,y) -&gt; x - y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM minus(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_minus(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Elementwise multiplication: (x,y) -&gt; x .* y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM times(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_times(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Elementwise division: (x,y) -&gt; x ./ y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM rdivide(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_rdivide(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical less than: (x,y) -&gt; x &lt; y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM lt(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_lt(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical less or equal to: (x,y) -&gt; x &lt;= y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM le(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_le(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical greater than: (x,y) -&gt; x &gt; y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM gt(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_gt(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical greater or equal to: (x,y) -&gt; x &gt;= y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM ge(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_ge(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical equal to: (x,y) -&gt; x == y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM eq(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_eq(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical not equal to: (x,y) -&gt; x != y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM ne(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_ne(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical `and`<br>
   * <br>
   * Returns (an expression evaluating to) 1 if both<br>
   * expressions are nonzero and 0 otherwise<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM logic_and(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_logic_and(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical `or`<br>
   * <br>
   * returns (an expression evaluating to) 1 if at<br>
   * least one expression is nonzero and 0 otherwise<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM logic_or(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_logic_or(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical `not` x -&gt; !x<br>
   * <br>
   * Returns (an expression evaluating to) 1 if<br>
   * expression is zero and 0 otherwise<br>
   * <br>
   *        
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM logic_not(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_logic_not(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Absolute value: x -&gt; abs(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM abs(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_abs(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Square root: x -&gt; sqrt(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM sqrt(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_sqrt(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Square: x -&gt; x^2<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM sq(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_sq(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Sine: x -&gt; sin(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM sin(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_sin(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Cosine: x -&gt; cos(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM cos(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_cos(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Tangent: x -&gt; tan(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM tan(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_tan(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Arc tangent: x -&gt; atan(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM atan(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_atan(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Arc sine: x -&gt; asin(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM asin(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_asin(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Arc cosine: x -&gt; acos(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM acos(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_acos(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Hyperbolic tangent: x -&gt; tanh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM tanh(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_tanh(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Hyperbolic sin: x -&gt; sinh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM sinh(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_sinh(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Hyperbolic cosine: x -&gt; cosh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM cosh(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_cosh(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Inverse hyperbolic tangent: x -&gt; atanh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM atanh(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_atanh(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Inverse hyperbolic sin: x -&gt; asinh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM asinh(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_asinh(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Inverse hyperbolic cosine: x -&gt; acosh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM acosh(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_acosh(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Elementwise exponential: x -&gt; exp(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM exp(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_exp(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Natural logarithm: x -&gt; log(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM log(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_log(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Base-10 logarithm: x -&gt; log10(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM log10(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_log10(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Precision variant for natural logarithm: x -&gt; log(x+1)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM log1p(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_log1p(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Precision variant for elementwise exponential: x -&gt; exp(x)-1<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM expm1(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_expm1(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Round down to nearest integer: x -&gt; floor(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM floor(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_floor(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Round up to nearest integer: x -&gt; ceil(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM ceil(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_ceil(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Error function: x -&gt; erf(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM erf(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_erf(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Inverse error function: x -&gt; erfinv(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM erfinv(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_erfinv(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Sign function:<br>
   * <br>
   *         sign(x)   := -1 for x&lt;0<br>
   *         sign(x)   :=  1 for x&gt;0,<br>
   *         sign(0)   :=  0<br>
   *         sign(NaN) :=  NaN<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM sign(de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_sign(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Elementwise power: (x,y) -&gt; x.^y<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM pow(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_pow(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Remainder after division: (x,y) -&gt; fmod(x,y)<br>
   * <br>
   *     This Function follows the convention of https://en.cppreference.com/w/c/numeric/math/fmod<br>
   * <br>
   *     Notably:<br>
   *       - fmod(5,3)   -&gt; 2<br>
   *       - fmod(5,-3)  -&gt; 2<br>
   *       - fmod(-5,3)  -&gt; -2<br>
   *       - fmod(-5,-3) -&gt; -2<br>
   * <br>
   *     This is equivalent to Python's numpy.fmod and Matlab's rem.<br>
   * <br>
   *     remainder<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM mod(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_mod(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Remainder after division: (x,y) -&gt; remainder(x,y)<br>
   * <br>
   *     This Function follows the convention of https://en.cppreference.com/w/c/numeric/math/remainder<br>
   * <br>
   *     Notably:<br>
   *       - remainder(5,3)   -&gt; -1<br>
   *       - remainder(5,-3)  -&gt; -1<br>
   *       - remainder(-5,3)  -&gt; 1<br>
   *       - remainder(-5,-3) -&gt; 1<br>
   * <br>
   *     This is equivalent to Python's math.remainder. There is no equivalence in Matlab.<br>
   * <br>
   *     fmod<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM remainder(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_remainder(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Two argument arc tangent: (y,x) -&gt; atan2(y,x)<br>
   * <br>
   * theta = atan2(y,x) corresponds to x = r cos(theta), y = r sin(theta)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM atan2(de.dhbw.rahmlab.casadi.impl.casadi.IM y, de.dhbw.rahmlab.casadi.impl.casadi.IM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_atan2(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Conditional assignment: (x,y) -&gt; x ? y : 0<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM if_else_zero(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_if_else_zero(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Smallest of two values: (x,y) -&gt; min(x,y)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM fmin(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_fmin(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Largest of two values: (x,y) -&gt; max(x,y)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM fmax(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_fmax(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * <br>
   *  Copy sign
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM copysign(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_copysign(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * <br>
   *  Elementwise power with const power
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM constpow(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_constpow(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Precision variant for 2 norm: (x,y) -&gt; sqrt(x^2+y^2)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.IM hypot(de.dhbw.rahmlab.casadi.impl.casadi.IM x, de.dhbw.rahmlab.casadi.impl.casadi.IM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.IM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_ImGenericExpression_hypot(de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.IM.getCPtr(y), y), true);
  }

  public ImGenericExpression() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_ImGenericExpression__SWIG_0(), true);
  }

  public ImGenericExpression(de.dhbw.rahmlab.casadi.impl.casadi.IImGenericExpression other) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_ImGenericExpression__SWIG_1(other.IImGenericExpression_GetInterfaceCPtr(), other), true);
  }

}
