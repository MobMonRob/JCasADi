/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.casadi;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

/**
 *  Expression interface<br>
 * <br>
 *   This is a common base class for SX, MX and Matrix&lt;&gt;, introducing a uniform syntax and implementing<br>
 *   common functionality using the curiously recurring template pattern (CRTP) idiom.<br>
 * <br>
 * <br>
 *   @author Joel Andersson<br>
 *   2012<br>
 * <br>
 *       
 */
public class DmGenericExpression implements IDmGenericExpression {
  private final long swigCPtr;

  public DmGenericExpression(long cPtr, boolean cMemoryOwn) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, cPtr, DmGenericExpression::delete);
  	}
  }

  /**
  * <pre>
  * In C++, deleting a pointer twice is undefined behavior!
  * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
  * Using this baseclass constructor for subtypes prevents that.
  * </pre>
  */
  protected DmGenericExpression(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
	  }
  }

  public static long getCPtr(DmGenericExpression obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_casadi_DmGenericExpression(swigCPtr);
}

  public long IDmGenericExpression_GetInterfaceCPtr() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_IDmGenericExpression_GetInterfaceCPtr(swigCPtr);
  }

  /**
   * Addition: (x,y) -&gt; x + y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM plus(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_plus(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Subtraction: (x,y) -&gt; x - y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM minus(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_minus(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Elementwise multiplication: (x,y) -&gt; x .* y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM times(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_times(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Elementwise division: (x,y) -&gt; x ./ y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM rdivide(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_rdivide(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical less than: (x,y) -&gt; x &lt; y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM lt(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_lt(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical less or equal to: (x,y) -&gt; x &lt;= y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM le(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_le(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical greater than: (x,y) -&gt; x &gt; y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM gt(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_gt(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical greater or equal to: (x,y) -&gt; x &gt;= y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM ge(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_ge(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical equal to: (x,y) -&gt; x == y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM eq(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_eq(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical not equal to: (x,y) -&gt; x != y<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM ne(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_ne(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical `and`<br>
   * <br>
   * Returns (an expression evaluating to) 1 if both<br>
   * expressions are nonzero and 0 otherwise<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM logic_and(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_logic_and(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical `or`<br>
   * <br>
   * returns (an expression evaluating to) 1 if at<br>
   * least one expression is nonzero and 0 otherwise<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM logic_or(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_logic_or(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Logical `not` x -&gt; !x<br>
   * <br>
   * Returns (an expression evaluating to) 1 if<br>
   * expression is zero and 0 otherwise<br>
   * <br>
   *        
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM logic_not(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_logic_not(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Absolute value: x -&gt; abs(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM abs(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_abs(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Square root: x -&gt; sqrt(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM sqrt(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_sqrt(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Square: x -&gt; x^2<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM sq(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_sq(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Sine: x -&gt; sin(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM sin(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_sin(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Cosine: x -&gt; cos(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM cos(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_cos(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Tangent: x -&gt; tan(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM tan(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_tan(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Arc tangent: x -&gt; atan(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM atan(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_atan(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Arc sine: x -&gt; asin(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM asin(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_asin(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Arc cosine: x -&gt; acos(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM acos(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_acos(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Hyperbolic tangent: x -&gt; tanh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM tanh(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_tanh(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Hyperbolic sin: x -&gt; sinh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM sinh(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_sinh(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Hyperbolic cosine: x -&gt; cosh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM cosh(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_cosh(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Inverse hyperbolic tangent: x -&gt; atanh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM atanh(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_atanh(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Inverse hyperbolic sin: x -&gt; asinh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM asinh(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_asinh(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Inverse hyperbolic cosine: x -&gt; acosh(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM acosh(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_acosh(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Elementwise exponential: x -&gt; exp(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM exp(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_exp(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Natural logarithm: x -&gt; log(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM log(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_log(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Base-10 logarithm: x -&gt; log10(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM log10(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_log10(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Precision variant for natural logarithm: x -&gt; log(x+1)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM log1p(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_log1p(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Precision variant for elementwise exponential: x -&gt; exp(x)-1<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM expm1(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_expm1(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Round down to nearest integer: x -&gt; floor(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM floor(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_floor(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Round up to nearest integer: x -&gt; ceil(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM ceil(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_ceil(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Error function: x -&gt; erf(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM erf(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_erf(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Inverse error function: x -&gt; erfinv(x)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM erfinv(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_erfinv(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Sign function:<br>
   * <br>
   *         sign(x)   := -1 for x&lt;0<br>
   *         sign(x)   :=  1 for x&gt;0,<br>
   *         sign(0)   :=  0<br>
   *         sign(NaN) :=  NaN<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM sign(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_sign(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Elementwise power: (x,y) -&gt; x.^y<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM pow(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_pow(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Remainder after division: (x,y) -&gt; fmod(x,y)<br>
   * <br>
   *     This Function follows the convention of https://en.cppreference.com/w/c/numeric/math/fmod<br>
   * <br>
   *     Notably:<br>
   *       - fmod(5,3)   -&gt; 2<br>
   *       - fmod(5,-3)  -&gt; 2<br>
   *       - fmod(-5,3)  -&gt; -2<br>
   *       - fmod(-5,-3) -&gt; -2<br>
   * <br>
   *     This is equivalent to Python's numpy.fmod and Matlab's rem.<br>
   * <br>
   *     remainder<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM mod(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_mod(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Remainder after division: (x,y) -&gt; remainder(x,y)<br>
   * <br>
   *     This Function follows the convention of https://en.cppreference.com/w/c/numeric/math/remainder<br>
   * <br>
   *     Notably:<br>
   *       - remainder(5,3)   -&gt; -1<br>
   *       - remainder(5,-3)  -&gt; -1<br>
   *       - remainder(-5,3)  -&gt; 1<br>
   *       - remainder(-5,-3) -&gt; 1<br>
   * <br>
   *     This is equivalent to Python's math.remainder. There is no equivalence in Matlab.<br>
   * <br>
   *     fmod<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM remainder(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_remainder(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Two argument arc tangent: (y,x) -&gt; atan2(y,x)<br>
   * <br>
   * theta = atan2(y,x) corresponds to x = r cos(theta), y = r sin(theta)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM atan2(de.dhbw.rahmlab.casadi.impl.casadi.DM y, de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_atan2(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  /**
   * <br>
   * Conditional assignment: (x,y) -&gt; x ? y : 0<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM if_else_zero(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_if_else_zero(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Smallest of two values: (x,y) -&gt; min(x,y)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM fmin(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_fmin(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Largest of two values: (x,y) -&gt; max(x,y)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM fmax(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_fmax(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * <br>
   *  Copy sign
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM copysign(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_copysign(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * <br>
   *  Elementwise power with const power
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM constpow(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_constpow(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  /**
   * <br>
   * Precision variant for 2 norm: (x,y) -&gt; sqrt(x^2+y^2)<br>
   * <br>
   *         
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.DM hypot(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.casadi.DM y) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_DmGenericExpression_hypot(de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(y), y), true);
  }

  public DmGenericExpression() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_DmGenericExpression__SWIG_0(), true);
  }

  public DmGenericExpression(de.dhbw.rahmlab.casadi.impl.casadi.IDmGenericExpression other) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_DmGenericExpression__SWIG_1(other.IDmGenericExpression_GetInterfaceCPtr(), other), true);
  }

}
