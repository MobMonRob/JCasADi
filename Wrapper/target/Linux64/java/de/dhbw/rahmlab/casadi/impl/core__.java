/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl;

public class core__ implements core__Constants {
  public static void _function_buffer_eval(SWIGTYPE_p_void raw) {
    core__JNI._function_buffer_eval(SWIGTYPE_p_void.getCPtr(raw));
  }

  /**
   *  Hash a sparsity pattern<br>
   * <br>
   *       
   */
  public static long hash_sparsity(long nrow, long ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt colind, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt row) {
    return core__JNI.hash_sparsity__SWIG_0(nrow, ncol, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(colind), colind, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(row), row);
  }

  public static long hash_sparsity(long nrow, long ncol, SWIGTYPE_p_long_long colind, SWIGTYPE_p_long_long row) {
    return core__JNI.hash_sparsity__SWIG_1(nrow, ncol, SWIGTYPE_p_long_long.getCPtr(colind), SWIGTYPE_p_long_long.getCPtr(row));
  }

  /**
   *  Combine two dicts. First has priority <br>
   * <br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.Dict combine(de.dhbw.rahmlab.casadi.impl.std.Dict first, de.dhbw.rahmlab.casadi.impl.std.Dict second, boolean recurse) {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(core__JNI.combine__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(first), first, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(second), second, recurse), true);
  }

  /**
   *  Combine two dicts. First has priority <br>
   * <br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.Dict combine(de.dhbw.rahmlab.casadi.impl.std.Dict first, de.dhbw.rahmlab.casadi.impl.std.Dict second) {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(core__JNI.combine__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(first), first, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(second), second), true);
  }

  /**
   *  Update the target dictionary in place with source elements<br>
   * <br>
   *       
   */
  public static void update_dict(de.dhbw.rahmlab.casadi.impl.std.Dict target, de.dhbw.rahmlab.casadi.impl.std.Dict source, boolean recurse) {
    core__JNI.update_dict__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(target), target, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(source), source, recurse);
  }

  /**
   *  Update the target dictionary in place with source elements<br>
   * <br>
   *       
   */
  public static void update_dict(de.dhbw.rahmlab.casadi.impl.std.Dict target, de.dhbw.rahmlab.casadi.impl.std.Dict source) {
    core__JNI.update_dict__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(target), target, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(source), source);
  }

  public static void update_dict(de.dhbw.rahmlab.casadi.impl.std.Dict target, String key, de.dhbw.rahmlab.casadi.impl.casadi.GenericType value, boolean recurse) {
    core__JNI.update_dict__SWIG_2(de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(target), target, key, de.dhbw.rahmlab.casadi.impl.casadi.GenericType.getCPtr(value), value, recurse);
  }

  public static void update_dict(de.dhbw.rahmlab.casadi.impl.std.Dict target, String key, de.dhbw.rahmlab.casadi.impl.casadi.GenericType value) {
    core__JNI.update_dict__SWIG_3(de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(target), target, key, de.dhbw.rahmlab.casadi.impl.casadi.GenericType.getCPtr(value), value);
  }

  /**
   *  Construct from an index vector (requires is_slice(v) to be true)
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Slice to_slice(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt v, boolean ind1) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Slice(core__JNI.to_slice__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(v), v, ind1), true);
  }

  /**
   *  Construct from an index vector (requires is_slice(v) to be true)
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Slice to_slice(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt v) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Slice(core__JNI.to_slice__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(v), v), true);
  }

  /**
   *  Construct nested slices from an index vector (requires is_slice2(v) to be true)
   */
  public static SWIGTYPE_p_std__pairT_casadi__Slice_casadi__Slice_t to_slice2(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt v) {
    return new SWIGTYPE_p_std__pairT_casadi__Slice_casadi__Slice_t(core__JNI.to_slice2(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(v), v), true);
  }

  /**
   *  Check if an index vector can be represented more efficiently as a slice
   */
  public static boolean is_slice(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt v, boolean ind1) {
    return core__JNI.is_slice__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(v), v, ind1);
  }

  /**
   *  Check if an index vector can be represented more efficiently as a slice
   */
  public static boolean is_slice(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt v) {
    return core__JNI.is_slice__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(v), v);
  }

  /**
   *  Check if an index vector can be represented more efficiently as two nested slices
   */
  public static boolean is_slice2(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt v) {
    return core__JNI.is_slice2(de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(v), v);
  }

  /**
   *  Load an external function from a shared library<br>
   * <br>
   * @param name Name as in the label assigned to a CasADi Function object:<br>
   *             Function(name,...,...)<br>
   *             Will be used to look up symbols/functions named eg. &lt;name&gt;_eval<br>
   *             Use `nm` (linux/osx) or `depends.exe` (win) to check which symbols are present<br>
   *             in your shared library<br>
   * <br>
   * File name is assumed to be ./&lt;name&gt;.so<br>
   * <br>
   *     
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function external(String name, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.external__SWIG_0(name, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Load an external function from a shared library<br>
   * <br>
   * @param name Name as in the label assigned to a CasADi Function object:<br>
   *             Function(name,...,...)<br>
   *             Will be used to look up symbols/functions named eg. &lt;name&gt;_eval<br>
   *             Use `nm` (linux/osx) or `depends.exe` (win) to check which symbols are present<br>
   *             in your shared library<br>
   * <br>
   * File name is assumed to be ./&lt;name&gt;.so<br>
   * <br>
   *     
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function external(String name) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.external__SWIG_1(name), true);
  }

  /**
   *  Load an external function from a shared library<br>
   * <br>
   * @param name Name as in the label assigned to a CasADi Function object:<br>
   *             Function(name,...,...)<br>
   *             Will be used to look up symbols/functions named eg. &lt;name&gt;_eval<br>
   *             Use `nm` (linux/osx) or `depends.exe` (win) to check which symbols are present<br>
   *             in your shared library<br>
   * @param bin_name File name of the shared library<br>
   * <br>
   *     
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function external(String name, String bin_name, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.external__SWIG_2(name, bin_name, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Load an external function from a shared library<br>
   * <br>
   * @param name Name as in the label assigned to a CasADi Function object:<br>
   *             Function(name,...,...)<br>
   *             Will be used to look up symbols/functions named eg. &lt;name&gt;_eval<br>
   *             Use `nm` (linux/osx) or `depends.exe` (win) to check which symbols are present<br>
   *             in your shared library<br>
   * @param bin_name File name of the shared library<br>
   * <br>
   *     
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function external(String name, String bin_name) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.external__SWIG_3(name, bin_name), true);
  }

  /**
   *  Load a just-in-time compiled external function<br>
   * <br>
   * File name given<br>
   * <br>
   *     
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function external(String name, de.dhbw.rahmlab.casadi.impl.casadi.Importer li, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.external__SWIG_4(name, de.dhbw.rahmlab.casadi.impl.casadi.Importer.getCPtr(li), li, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Load a just-in-time compiled external function<br>
   * <br>
   * File name given<br>
   * <br>
   *     
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function external(String name, de.dhbw.rahmlab.casadi.impl.casadi.Importer li) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.external__SWIG_5(name, de.dhbw.rahmlab.casadi.impl.casadi.Importer.getCPtr(li), li), true);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_0(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_1(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_2(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_3(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function dae, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_4(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function dae) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_5(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(dae), dae), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, double t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble tout, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_6(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(tout), tout, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, double t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble tout) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_7(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(tout), tout), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, double t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble tout, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_8(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(tout), tout, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, double t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble tout) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_9(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(tout), tout), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function dae, double t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble tout, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_10(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(dae), dae, t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(tout), tout, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function dae, double t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble tout) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_11(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(dae), dae, t0, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(tout), tout), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, double t0, double tf, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_12(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, t0, tf, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, double t0, double tf) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_13(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, t0, tf), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, double t0, double tf, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_14(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, t0, tf, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, double t0, double tf) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_15(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, t0, tf), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function dae, double t0, double tf, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_16(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(dae), dae, t0, tf, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function integrator(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function dae, double t0, double tf) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.integrator__SWIG_17(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(dae), dae, t0, tf), true);
  }

  /**
   * <br>
   *  Check if a particular plugin is available
   */
  public static boolean has_integrator(String name) {
    return core__JNI.has_integrator(name);
  }

  /**
   *  Explicitly load a plugin dynamically
   */
  public static void load_integrator(String name) {
    core__JNI.load_integrator(name);
  }

  /**
   *  Get the documentation string for a plugin
   */
  public static String doc_integrator(String name) {
    return core__JNI.doc_integrator(name);
  }

  /**
   *  Get input scheme of integrators<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString integrator_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.integrator_in__SWIG_0(), true);
  }

  /**
   *  Get integrator output scheme of integrators<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString integrator_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.integrator_out__SWIG_0(), true);
  }

  /**
   *  Get integrator input scheme name by index<br>
   * <br>
   *       
   */
  public static String integrator_in(long ind) {
    return core__JNI.integrator_in__SWIG_1(ind);
  }

  /**
   *  Get output scheme name by index<br>
   * <br>
   *       
   */
  public static String integrator_out(long ind) {
    return core__JNI.integrator_out__SWIG_1(ind);
  }

  /**
   *  Get the number of integrator inputs<br>
   * <br>
   *       
   */
  public static long integrator_n_in() {
    return core__JNI.integrator_n_in();
  }

  /**
   *  Get the number of integrator outputs<br>
   * <br>
   *       
   */
  public static long integrator_n_out() {
    return core__JNI.integrator_n_out();
  }

  /**
   *  Get input scheme of a DAE function<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString dyn_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.dyn_in__SWIG_0(), true);
  }

  /**
   *  Get output scheme of a DAE function<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString dyn_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.dyn_out__SWIG_0(), true);
  }

  /**
   *  Get input scheme of a DAE function by index<br>
   * <br>
   *       
   */
  public static String dyn_in(long ind) {
    return core__JNI.dyn_in__SWIG_1(ind);
  }

  /**
   *  Get output scheme of a DAE function by index<br>
   * <br>
   *       
   */
  public static String dyn_out(long ind) {
    return core__JNI.dyn_out__SWIG_1(ind);
  }

  /**
   *  Get the number of inputs for a DAE function<br>
   * <br>
   *       
   */
  public static long dyn_n_in() {
    return core__JNI.dyn_n_in();
  }

  /**
   *  Get the number of outputs for a DAE function<br>
   * <br>
   *       
   */
  public static long dyn_n_out() {
    return core__JNI.dyn_n_out();
  }

  /**
   *  Get input scheme of an event transition function<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString event_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.event_in(), true);
  }

  /**
   *  Get output scheme of an event transition functions<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString event_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.event_out(), true);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function conic(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSparsity qp, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.conic__SWIG_0(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSparsity.getCPtr(qp), qp, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function conic(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSparsity qp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.conic__SWIG_1(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSparsity.getCPtr(qp), qp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function qpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX qp, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.qpsol__SWIG_0(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(qp), qp, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function qpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX qp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.qpsol__SWIG_1(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(qp), qp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function qpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX qp, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.qpsol__SWIG_2(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(qp), qp, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function qpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX qp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.qpsol__SWIG_3(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(qp), qp), true);
  }

  /**
   * Get input scheme of QP solvers<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString conic_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.conic_in__SWIG_0(), true);
  }

  /**
   *  Get QP solver output scheme of QP solvers<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString conic_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.conic_out__SWIG_0(), true);
  }

  /**
   *  Get QP solver input scheme name by index<br>
   * <br>
   *       
   */
  public static String conic_in(long ind) {
    return core__JNI.conic_in__SWIG_1(ind);
  }

  /**
   *  Get output scheme name by index<br>
   * <br>
   *       
   */
  public static String conic_out(long ind) {
    return core__JNI.conic_out__SWIG_1(ind);
  }

  /**
   *  Get the number of QP solver inputs<br>
   * <br>
   *       
   */
  public static long conic_n_in() {
    return core__JNI.conic_n_in();
  }

  /**
   *  Get the number of QP solver outputs<br>
   * <br>
   *       
   */
  public static long conic_n_out() {
    return core__JNI.conic_n_out();
  }

  /**
   *  Get all options for a plugin<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString conic_options(String name) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.conic_options(name), true);
  }

  /**
   *  Get type info for a particular option<br>
   * <br>
   *       
   */
  public static String conic_option_type(String name, String op) {
    return core__JNI.conic_option_type(name, op);
  }

  /**
   *  Get documentation for a particular option<br>
   * <br>
   *       
   */
  public static String conic_option_info(String name, String op) {
    return core__JNI.conic_option_info(name, op);
  }

  /**
   *  Check if a particular plugin is available
   */
  public static boolean has_conic(String name) {
    return core__JNI.has_conic(name);
  }

  /**
   *  Explicitly load a plugin dynamically
   */
  public static void load_conic(String name) {
    core__JNI.load_conic(name);
  }

  /**
   *  Get the documentation string for a plugin
   */
  public static String doc_conic(String name) {
    return core__JNI.doc_conic(name);
  }

  /**
   *  Generate native code in the interfaced language for debugging 
   */
  public static void conic_debug(de.dhbw.rahmlab.casadi.impl.casadi.Function f, String filename) {
    core__JNI.conic_debug__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, filename);
  }

  /**
   *  Generate native code in the interfaced language for debugging 
   */
  public static void conic_debug(de.dhbw.rahmlab.casadi.impl.casadi.Function f, SWIGTYPE_p_std__ostream file) {
    core__JNI.conic_debug__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, SWIGTYPE_p_std__ostream.getCPtr(file));
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX nlp, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_0(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(nlp), nlp, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX nlp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_1(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(nlp), nlp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX nlp, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_2(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(nlp), nlp, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX nlp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_3(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(nlp), nlp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, String fname, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_4(name, solver, fname, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, String fname) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_5(name, solver, fname), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Importer compiler, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_6(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Importer.getCPtr(compiler), compiler, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Importer compiler) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_7(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Importer.getCPtr(compiler), compiler), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.NlpBuilder nl, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_8(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.NlpBuilder.getCPtr(nl), nl, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.NlpBuilder nl) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_9(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.NlpBuilder.getCPtr(nl), nl), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function nlp, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_10(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(nlp), nlp, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function nlpsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function nlp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.nlpsol__SWIG_11(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(nlp), nlp), true);
  }

  /**
   * Get input scheme of NLP solvers<br>
   * <br>
   * If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString nlpsol_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.nlpsol_in__SWIG_0(), true);
  }

  /**
   *  Get NLP solver output scheme of NLP solvers<br>
   * <br>
   * If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString nlpsol_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.nlpsol_out__SWIG_0(), true);
  }

  /**
   *  Get NLP solver input scheme name by index<br>
   * <br>
   * If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   *       
   */
  public static String nlpsol_in(long ind) {
    return core__JNI.nlpsol_in__SWIG_1(ind);
  }

  /**
   *  Get output scheme name by index<br>
   * <br>
   * If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   *       
   */
  public static String nlpsol_out(long ind) {
    return core__JNI.nlpsol_out__SWIG_1(ind);
  }

  /**
   *  Number of NLP solver inputs<br>
   * <br>
   *       
   */
  public static long nlpsol_n_in() {
    return core__JNI.nlpsol_n_in();
  }

  /**
   *  Number of NLP solver outputs<br>
   * <br>
   *       
   */
  public static long nlpsol_n_out() {
    return core__JNI.nlpsol_n_out();
  }

  /**
   * Default input for an NLP solver<br>
   * <br>
   *       
   */
  public static double nlpsol_default_in(long ind) {
    return core__JNI.nlpsol_default_in__SWIG_0(ind);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble nlpsol_default_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble(core__JNI.nlpsol_default_in__SWIG_1(), true);
  }

  /**
   * Get all options for a plugin<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString nlpsol_options(String name) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.nlpsol_options(name), true);
  }

  /**
   *  Get type info for a particular option<br>
   * <br>
   *       
   */
  public static String nlpsol_option_type(String name, String op) {
    return core__JNI.nlpsol_option_type(name, op);
  }

  /**
   *  Get documentation for a particular option<br>
   * <br>
   *       
   */
  public static String nlpsol_option_info(String name, String op) {
    return core__JNI.nlpsol_option_info(name, op);
  }

  /**
   *  Check if a particular plugin is available
   */
  public static boolean has_nlpsol(String name) {
    return core__JNI.has_nlpsol(name);
  }

  /**
   *  Explicitly load a plugin dynamically
   */
  public static void load_nlpsol(String name) {
    core__JNI.load_nlpsol(name);
  }

  /**
   *  Get the documentation string for a plugin
   */
  public static String doc_nlpsol(String name) {
    return core__JNI.doc_nlpsol(name);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function rootfinder(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX rfp, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.rootfinder__SWIG_0(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(rfp), rfp, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function rootfinder(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX rfp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.rootfinder__SWIG_1(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(rfp), rfp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function rootfinder(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX rfp, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.rootfinder__SWIG_2(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(rfp), rfp, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function rootfinder(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX rfp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.rootfinder__SWIG_3(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(rfp), rfp), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function rootfinder(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function f, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.rootfinder__SWIG_4(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function rootfinder(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Function f) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.rootfinder__SWIG_5(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f), true);
  }

  /**
   * Get rootfinder input scheme<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString rootfinder_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.rootfinder_in__SWIG_0(), true);
  }

  /**
   *  Get rootfinder output scheme<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString rootfinder_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.rootfinder_out__SWIG_0(), true);
  }

  /**
   *  Get rootfinder input scheme name by index<br>
   * <br>
   *       
   */
  public static String rootfinder_in(long ind) {
    return core__JNI.rootfinder_in__SWIG_1(ind);
  }

  /**
   *  Get rootfinder output scheme name by index<br>
   * <br>
   *       
   */
  public static String rootfinder_out(long ind) {
    return core__JNI.rootfinder_out__SWIG_1(ind);
  }

  /**
   *  Number of rootfinder inputs<br>
   * <br>
   *       
   */
  public static long rootfinder_n_in() {
    return core__JNI.rootfinder_n_in();
  }

  /**
   *  Number of rootfinder outputs<br>
   * <br>
   *       
   */
  public static long rootfinder_n_out() {
    return core__JNI.rootfinder_n_out();
  }

  /**
   *  Get all options for a plugin<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString rootfinder_options(String name) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.rootfinder_options(name), true);
  }

  /**
   *  Get type info for a particular option<br>
   * <br>
   *       
   */
  public static String rootfinder_option_type(String name, String op) {
    return core__JNI.rootfinder_option_type(name, op);
  }

  /**
   *  Get documentation for a particular option<br>
   * <br>
   *       
   */
  public static String rootfinder_option_info(String name, String op) {
    return core__JNI.rootfinder_option_info(name, op);
  }

  /**
   *  Check if a particular plugin is available
   */
  public static boolean has_rootfinder(String name) {
    return core__JNI.has_rootfinder(name);
  }

  /**
   *  Explicitly load a plugin dynamically
   */
  public static void load_rootfinder(String name) {
    core__JNI.load_rootfinder(name);
  }

  /**
   *  Get the documentation string for a plugin
   */
  public static String doc_rootfinder(String name) {
    return core__JNI.doc_rootfinder(name);
  }

  /**
   *  Check if a particular plugin is available
   */
  public static boolean has_linsol(String name) {
    return core__JNI.has_linsol(name);
  }

  /**
   *  Explicitly load a plugin dynamically
   */
  public static void load_linsol(String name) {
    core__JNI.load_linsol(name);
  }

  /**
   *  Get the documentation string for a plugin
   */
  public static String doc_linsol(String name) {
    return core__JNI.doc_linsol(name);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function dplesol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSparsity st, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.dplesol__SWIG_0(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSparsity.getCPtr(st), st, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function dplesol(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSparsity st) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.dplesol__SWIG_1(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSparsity.getCPtr(st), st), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX dplesol(de.dhbw.rahmlab.casadi.impl.casadi.MX A, de.dhbw.rahmlab.casadi.impl.casadi.MX V, String solver, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(core__JNI.dplesol__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(V), V, solver, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.MX dplesol(de.dhbw.rahmlab.casadi.impl.casadi.MX A, de.dhbw.rahmlab.casadi.impl.casadi.MX V, String solver) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(core__JNI.dplesol__SWIG_3(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(V), V, solver), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX dplesol(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX A, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX V, String solver, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(core__JNI.dplesol__SWIG_4(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(V), V, solver, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorMX dplesol(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX A, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX V, String solver) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(core__JNI.dplesol__SWIG_5(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(V), V, solver), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorDM dplesol(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM A, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM V, String solver, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(core__JNI.dplesol__SWIG_6(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(V), V, solver, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorDM dplesol(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM A, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM V, String solver) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDM(core__JNI.dplesol__SWIG_7(de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.std.StdVectorDM.getCPtr(V), V, solver), true);
  }

  /**
   * Get input scheme of DPLE solvers<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString dple_in() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.dple_in__SWIG_0(), true);
  }

  /**
   *  Get output scheme of DPLE solvers<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString dple_out() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString(core__JNI.dple_out__SWIG_0(), true);
  }

  /**
   *  Get DPLE input scheme name by index<br>
   * <br>
   *       
   */
  public static String dple_in(long ind) {
    return core__JNI.dple_in__SWIG_1(ind);
  }

  /**
   *  Get DPLE output scheme name by index<br>
   * <br>
   *       
   */
  public static String dple_out(long ind) {
    return core__JNI.dple_out__SWIG_1(ind);
  }

  /**
   *  Get the number of QP solver inputs<br>
   * <br>
   *       
   */
  public static long dple_n_in() {
    return core__JNI.dple_n_in();
  }

  /**
   *  Get the number of QP solver outputs<br>
   * <br>
   *       
   */
  public static long dple_n_out() {
    return core__JNI.dple_n_out();
  }

  /**
   *  Check if a particular plugin is available
   */
  public static boolean has_dple(String name) {
    return core__JNI.has_dple(name);
  }

  /**
   *  Explicitly load a plugin dynamically
   */
  public static void load_dple(String name) {
    core__JNI.load_dple(name);
  }

  /**
   *  Get the documentation string for a plugin
   */
  public static String doc_dple(String name) {
    return core__JNI.doc_dple(name);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function expmsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity A, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.expmsol__SWIG_0(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(A), A, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function expmsol(String name, String solver, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity A) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.expmsol__SWIG_1(name, solver, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(A), A), true);
  }

  /**
   * Get the number of expm solver inputs<br>
   * <br>
   *       
   */
  public static long expm_n_in() {
    return core__JNI.expm_n_in();
  }

  /**
   *  Get the number of expm solver outputs<br>
   * <br>
   *       
   */
  public static long expm_n_out() {
    return core__JNI.expm_n_out();
  }

  /**
   *  Check if a particular plugin is available
   */
  public static boolean has_expm(String name) {
    return core__JNI.has_expm(name);
  }

  /**
   *  Explicitly load a plugin dynamically
   */
  public static void load_expm(String name) {
    core__JNI.load_expm(name);
  }

  /**
   *  Get the documentation string for a plugin
   */
  public static String doc_expm(String name) {
    return core__JNI.doc_expm(name);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble grid, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble values, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_0(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(grid), grid, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(values), values, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  If: EXPANDED {<br>
   * }<br>
   * <br>
   * <br>
   * 
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble grid, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble values) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_1(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(grid), grid, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(values), values), true);
  }

  /**
   *  Parametric variant of interpolant<br>
   * <br>
   * The resulting function will have an additional argument for the coefficients<br>
   * <br>
   * By default, derivatives wrt the coefficients are not supported (zero).<br>
   * Some interpolant plugins may support the `inline=true` which enables correct derivatives<br>
   * <br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble grid, long m, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_2(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(grid), grid, m, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Parametric variant of interpolant<br>
   * <br>
   * The resulting function will have an additional argument for the coefficients<br>
   * <br>
   * By default, derivatives wrt the coefficients are not supported (zero).<br>
   * Some interpolant plugins may support the `inline=true` which enables correct derivatives<br>
   * <br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble grid, long m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_3(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(grid), grid, m), true);
  }

  /**
   *  Parametric variant of interpolant<br>
   * <br>
   * The resulting function will have an additional argument for the coefficients<br>
   * <br>
   * By default, derivatives wrt the coefficients are not supported (zero).<br>
   * Some interpolant plugins may support the `inline=true` which enables correct derivatives<br>
   * <br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble grid) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_4(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(grid), grid), true);
  }

  /**
   * Parametric variant of interpolant<br>
   * <br>
   * The resulting function will have additional arguments for the grid and coefficients<br>
   * <br>
   * By default, derivatives wrt the coefficients are not supported (zero).<br>
   * Some interpolant plugins may support the `inline=true` which enables correct derivatives<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt grid_dims, long m, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_5(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(grid_dims), grid_dims, m, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   * Parametric variant of interpolant<br>
   * <br>
   * The resulting function will have additional arguments for the grid and coefficients<br>
   * <br>
   * By default, derivatives wrt the coefficients are not supported (zero).<br>
   * Some interpolant plugins may support the `inline=true` which enables correct derivatives<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt grid_dims, long m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_6(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(grid_dims), grid_dims, m), true);
  }

  /**
   * Parametric variant of interpolant<br>
   * <br>
   * The resulting function will have additional arguments for the grid and coefficients<br>
   * <br>
   * By default, derivatives wrt the coefficients are not supported (zero).<br>
   * Some interpolant plugins may support the `inline=true` which enables correct derivatives<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt grid_dims) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_7(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(grid_dims), grid_dims), true);
  }

  /**
   *  Parametric variant of interpolant<br>
   * <br>
   * The resulting function will have an additional argument for the grid<br>
   * <br>
   * By default, derivatives wrt the coefficients are not supported (zero).<br>
   * Some interpolant plugins may support the `inline=true` which enables correct derivatives<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt grid_dims, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble values, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_8(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(grid_dims), grid_dims, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(values), values, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Parametric variant of interpolant<br>
   * <br>
   * The resulting function will have an additional argument for the grid<br>
   * <br>
   * By default, derivatives wrt the coefficients are not supported (zero).<br>
   * Some interpolant plugins may support the `inline=true` which enables correct derivatives<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function interpolant(String name, String solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt grid_dims, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble values) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.interpolant__SWIG_9(name, solver, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(grid_dims), grid_dims, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(values), values), true);
  }

  /**
   *  Check if a particular plugin is available
   */
  public static boolean has_interpolant(String name) {
    return core__JNI.has_interpolant(name);
  }

  /**
   *  Explicitly load a plugin dynamically
   */
  public static void load_interpolant(String name) {
    core__JNI.load_interpolant(name);
  }

  /**
   *  Get the documentation string for a plugin
   */
  public static String doc_interpolant(String name) {
    return core__JNI.doc_interpolant(name);
  }

  /**
   * Obtain collocation points of specific order and scheme<br>
   * <br>
   *   @param order Which order (1 to 9 supported)<br>
   *   @param scheme  'radau' or 'legendre'<br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble collocation_points(long order, String scheme) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble(core__JNI.collocation_points__SWIG_0(order, scheme), true);
  }

  /**
   * Obtain collocation points of specific order and scheme<br>
   * <br>
   *   @param order Which order (1 to 9 supported)<br>
   *   <br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble collocation_points(long order) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble(core__JNI.collocation_points__SWIG_1(order), true);
  }

  /**
   * Obtain collocation interpolating matrices<br>
   * <br>
   *   A collocation method poses a polynomial Pi that interpolates exactly through<br>
   *   an initial state (0,X_0) and helper states at collocation points (tau_j,X:collPoint(j)).<br>
   * <br>
   *   This function computes the linear mapping between dPi/dt and coefficients Z=[X_0 X:collPoints].<br>
   * <br>
   *   @param tau  location of collocation points, as obtained from collocation_points<br>
   *   <br>
   * <br>
   *     {@literal 
        dPi/dt @Z_j = (1/h) Sum_i C[j][i]*Z_i,
      }<br>
   * <br>
   *     with h the length of the integration interval.<br>
   * <br>
   *   <br>
   * <br>
   *     {@literal 
        Pi @X_f = Sum_i D[i]*Z_i
      }<br>
   * <br>
   *   
   */
  public static void collocation_interpolators(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble tau, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble arg2) {
    core__JNI.collocation_interpolators(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(tau), tau, de.dhbw.rahmlab.casadi.impl.std.StdVectorVectorDouble.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(arg2), arg2);
  }

  /**
   *  Obtain collocation interpolating matrices<br>
   * <br>
   *   A collocation method poses a polynomial Pi that interpolates exactly through<br>
   *   an initial state (0,X_0) and helper states at collocation points (tau_j,Xc_j)<br>
   *   with j=1..degree.<br>
   * <br>
   *   This function computes the linear mapping between dPi/dt and coefficients Z=[X_0 Xc].<br>
   * <br>
   *   @param tau  location of collocation points (length: degree), as obtained from collocation_points<br>
   *   <br>
   * <br>
   *     You may find the slopes of Pi at the collocation points as<br>
   *     {@literal 
        dPi/dt @ Xc = (1/h) Z*C,
      }<br>
   * <br>
   *     with h the length of the integration interval.<br>
   * <br>
   *   <br>
   * <br>
   *     You may find the end point of Pi as<br>
   *     {@literal 
        Pi @X_f = Z*D
      }<br>
   * <br>
   *   <br>
   * <br>
   *     Given quadrature righ-hand-sides 'quad' evaluated at the collocation points,<br>
   *     you may find the integrated quadratures as<br>
   *     {@literal 
        q = quad*B*h
      }<br>
   * <br>
   *   
   */
  public static void collocation_coeff(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble tau, de.dhbw.rahmlab.casadi.impl.casadi.DM OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.DM arg2, de.dhbw.rahmlab.casadi.impl.casadi.DM arg3) {
    core__JNI.collocation_coeff(de.dhbw.rahmlab.casadi.impl.std.StdVectorDouble.getCPtr(tau), tau, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(arg2), arg2, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(arg3), arg3);
  }

  /**
   *  Construct an explicit Runge-Kutta integrator<br>
   * <br>
   * The constructed function has three inputs,<br>
   * corresponding to initial state (x0), parameter (p) and integration time (h)<br>
   * and one output, corresponding to final state (xf).<br>
   * <br>
   * @param f     ODE function with two inputs (x and p) and one output (xdot)<br>
   * @param N     Number of integrator steps<br>
   * @param order Order of interpolating polynomials<br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleRK(de.dhbw.rahmlab.casadi.impl.casadi.Function f, long N, long order) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleRK__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, N, order), true);
  }

  /**
   *  Construct an explicit Runge-Kutta integrator<br>
   * <br>
   * The constructed function has three inputs,<br>
   * corresponding to initial state (x0), parameter (p) and integration time (h)<br>
   * and one output, corresponding to final state (xf).<br>
   * <br>
   * @param f     ODE function with two inputs (x and p) and one output (xdot)<br>
   * @param N     Number of integrator steps<br>
   * <br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleRK(de.dhbw.rahmlab.casadi.impl.casadi.Function f, long N) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleRK__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, N), true);
  }

  /**
   *  Construct an explicit Runge-Kutta integrator<br>
   * <br>
   * The constructed function has three inputs,<br>
   * corresponding to initial state (x0), parameter (p) and integration time (h)<br>
   * and one output, corresponding to final state (xf).<br>
   * <br>
   * @param f     ODE function with two inputs (x and p) and one output (xdot)<br>
   * <br>
   * <br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleRK(de.dhbw.rahmlab.casadi.impl.casadi.Function f) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleRK__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f), true);
  }

  /**
   *  Construct an implicit Runge-Kutta integrator using a collocation scheme<br>
   * <br>
   * The constructed function has three inputs,<br>
   * corresponding to initial state (x0), parameter (p) and integration time (h)<br>
   * and one output, corresponding to final state (xf).<br>
   * <br>
   * @param f      ODE function with two inputs (x and p) and one output (xdot)<br>
   * @param N      Number of integrator steps<br>
   * @param order  Order of interpolating polynomials<br>
   * @param scheme Collocation scheme, as excepted by collocationPoints function.<br>
   * @param solver Solver plugin<br>
   * @param solver_options Options to be passed to the solver plugin<br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleIRK(de.dhbw.rahmlab.casadi.impl.casadi.Function f, long N, long order, String scheme, String solver, de.dhbw.rahmlab.casadi.impl.std.Dict solver_options) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleIRK__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, N, order, scheme, solver, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(solver_options), solver_options), true);
  }

  /**
   *  Construct an implicit Runge-Kutta integrator using a collocation scheme<br>
   * <br>
   * The constructed function has three inputs,<br>
   * corresponding to initial state (x0), parameter (p) and integration time (h)<br>
   * and one output, corresponding to final state (xf).<br>
   * <br>
   * @param f      ODE function with two inputs (x and p) and one output (xdot)<br>
   * @param N      Number of integrator steps<br>
   * @param order  Order of interpolating polynomials<br>
   * @param scheme Collocation scheme, as excepted by collocationPoints function.<br>
   * @param solver Solver plugin<br>
   * <br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleIRK(de.dhbw.rahmlab.casadi.impl.casadi.Function f, long N, long order, String scheme, String solver) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleIRK__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, N, order, scheme, solver), true);
  }

  /**
   *  Construct an implicit Runge-Kutta integrator using a collocation scheme<br>
   * <br>
   * The constructed function has three inputs,<br>
   * corresponding to initial state (x0), parameter (p) and integration time (h)<br>
   * and one output, corresponding to final state (xf).<br>
   * <br>
   * @param f      ODE function with two inputs (x and p) and one output (xdot)<br>
   * @param N      Number of integrator steps<br>
   * @param order  Order of interpolating polynomials<br>
   * @param scheme Collocation scheme, as excepted by collocationPoints function.<br>
   * <br>
   * <br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleIRK(de.dhbw.rahmlab.casadi.impl.casadi.Function f, long N, long order, String scheme) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleIRK__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, N, order, scheme), true);
  }

  /**
   *  Construct an implicit Runge-Kutta integrator using a collocation scheme<br>
   * <br>
   * The constructed function has three inputs,<br>
   * corresponding to initial state (x0), parameter (p) and integration time (h)<br>
   * and one output, corresponding to final state (xf).<br>
   * <br>
   * @param f      ODE function with two inputs (x and p) and one output (xdot)<br>
   * @param N      Number of integrator steps<br>
   * @param order  Order of interpolating polynomials<br>
   * <br>
   * <br>
   * <br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleIRK(de.dhbw.rahmlab.casadi.impl.casadi.Function f, long N, long order) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleIRK__SWIG_3(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, N, order), true);
  }

  /**
   *  Construct an implicit Runge-Kutta integrator using a collocation scheme<br>
   * <br>
   * The constructed function has three inputs,<br>
   * corresponding to initial state (x0), parameter (p) and integration time (h)<br>
   * and one output, corresponding to final state (xf).<br>
   * <br>
   * @param f      ODE function with two inputs (x and p) and one output (xdot)<br>
   * @param N      Number of integrator steps<br>
   * <br>
   * <br>
   * <br>
   * <br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleIRK(de.dhbw.rahmlab.casadi.impl.casadi.Function f, long N) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleIRK__SWIG_4(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, N), true);
  }

  /**
   *  Construct an implicit Runge-Kutta integrator using a collocation scheme<br>
   * <br>
   * The constructed function has three inputs,<br>
   * corresponding to initial state (x0), parameter (p) and integration time (h)<br>
   * and one output, corresponding to final state (xf).<br>
   * <br>
   * @param f      ODE function with two inputs (x and p) and one output (xdot)<br>
   * <br>
   * <br>
   * <br>
   * <br>
   * <br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleIRK(de.dhbw.rahmlab.casadi.impl.casadi.Function f) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleIRK__SWIG_5(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f), true);
  }

  /**
   *  Simplified wrapper for the Integrator class<br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleIntegrator(de.dhbw.rahmlab.casadi.impl.casadi.Function f, String integrator, de.dhbw.rahmlab.casadi.impl.std.Dict integrator_options) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleIntegrator__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, integrator, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(integrator_options), integrator_options), true);
  }

  /**
   *  Simplified wrapper for the Integrator class<br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleIntegrator(de.dhbw.rahmlab.casadi.impl.casadi.Function f, String integrator) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleIntegrator__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f, integrator), true);
  }

  /**
   *  Simplified wrapper for the Integrator class<br>
   * <br>
   *   
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function simpleIntegrator(de.dhbw.rahmlab.casadi.impl.casadi.Function f) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.simpleIntegrator__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(f), f), true);
  }

  /**
   *  Reduce index<br>
   * <br>
   * <br>
   * Index reduction leads to a new set of variables and equations.<br>
   * <br>
   * In the process, a set of constraints (algebraic equations or derivatives) a.k.a invariants is constructed<br>
   * that are invariant to the problem: whenever an initial point satisfies these constraints,<br>
   * the boundary-value-problem outcome will keep satisfying those constraints automatically,<br>
   * even though they are *not* part of the reduced DAE.<br>
   * <br>
   * For any practical numerical integration method, there will be numerical drift away from satisfaction of those constraints.<br>
   * In other words, you will see the value of invariants slowly moving away from original zero.<br>
   * <br>
   * A classic mitigation technique is Baumgarte stabilization: you add these invariants to the reduced DAE<br>
   * as a correction term that acts in a way to make small (numerical) perturbations to the invariants decay to the origin<br>
   * as a dampened linear system.<br>
   * <br>
   * in which a certain set of constraints (algebraic equations or derivatives) has been dropped in favour of <br>
   * <br>
   * <br>
   * <br>
   * <br>
   * @param dae Expression dictionary describing the DAE<br>
   * <br>
   *   Each value must be a dense column vector.<br>
   * <br>
   *   keys:<br>
   *      - x_impl:  symbol for implicit differential states<br>
   *      - dx_impl: symbol for implicit differential state derivatives<br>
   *      - z:       symbol for algebraic variables<br>
   *      - alg:     expression for algebraic equations<br>
   *      - t:       symbol for time<br>
   *      - p:       symbol for parameters<br>
   * @param opts Option dictionary<br>
   * <br>
   * <br>
   *   'baumgarte_pole': double<br>
   *      Poles (inverse time constants) of the Baumgarte invariant correction term.<br>
   *      Must be &lt;0 to dampen out perturbations<br>
   *      0 (default) amounts to no correction.<br>
   *      Corresponds to -gamma of equation (1.5) in<br>
   *      Ascher, Uri M., Hongsheng Chin, and Sebastian Reich. "Stabilization of DAEs and invariant manifolds." Numerische Mathematik 67.2 (1994): 131-149.<br>
   * <br>
   * <br>
   * <br>
   * @return Expression dictionary describing the reduced DAE<br>
   * <br>
   *   In addition the fields allowed in the input DAE, the following keys occur:<br>
   * <br>
   *      - x:   symbol for explicit differential states<br>
   *      - ode: expression for right-hand-side of explicit differential states<br>
   *      - I:   expression for invariants<br>
   * <br>
   * <br>
   *       <br>
   *  
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae_reduce_index(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, de.dhbw.rahmlab.casadi.impl.std.Dict OUTPUT, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX(core__JNI.dae_reduce_index__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Reduce index<br>
   * <br>
   * <br>
   * Index reduction leads to a new set of variables and equations.<br>
   * <br>
   * In the process, a set of constraints (algebraic equations or derivatives) a.k.a invariants is constructed<br>
   * that are invariant to the problem: whenever an initial point satisfies these constraints,<br>
   * the boundary-value-problem outcome will keep satisfying those constraints automatically,<br>
   * even though they are *not* part of the reduced DAE.<br>
   * <br>
   * For any practical numerical integration method, there will be numerical drift away from satisfaction of those constraints.<br>
   * In other words, you will see the value of invariants slowly moving away from original zero.<br>
   * <br>
   * A classic mitigation technique is Baumgarte stabilization: you add these invariants to the reduced DAE<br>
   * as a correction term that acts in a way to make small (numerical) perturbations to the invariants decay to the origin<br>
   * as a dampened linear system.<br>
   * <br>
   * in which a certain set of constraints (algebraic equations or derivatives) has been dropped in favour of <br>
   * <br>
   * <br>
   * <br>
   * <br>
   * @param dae Expression dictionary describing the DAE<br>
   * <br>
   *   Each value must be a dense column vector.<br>
   * <br>
   *   keys:<br>
   *      - x_impl:  symbol for implicit differential states<br>
   *      - dx_impl: symbol for implicit differential state derivatives<br>
   *      - z:       symbol for algebraic variables<br>
   *      - alg:     expression for algebraic equations<br>
   *      - t:       symbol for time<br>
   *      - p:       symbol for parameters<br>
   * <br>
   * <br>
   * <br>
   *   'baumgarte_pole': double<br>
   *      Poles (inverse time constants) of the Baumgarte invariant correction term.<br>
   *      Must be &lt;0 to dampen out perturbations<br>
   *      0 (default) amounts to no correction.<br>
   *      Corresponds to -gamma of equation (1.5) in<br>
   *      Ascher, Uri M., Hongsheng Chin, and Sebastian Reich. "Stabilization of DAEs and invariant manifolds." Numerische Mathematik 67.2 (1994): 131-149.<br>
   * <br>
   * <br>
   * <br>
   * @return Expression dictionary describing the reduced DAE<br>
   * <br>
   *   In addition the fields allowed in the input DAE, the following keys occur:<br>
   * <br>
   *      - x:   symbol for explicit differential states<br>
   *      - ode: expression for right-hand-side of explicit differential states<br>
   *      - I:   expression for invariants<br>
   * <br>
   * <br>
   *       <br>
   *  
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae_reduce_index(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, de.dhbw.rahmlab.casadi.impl.std.Dict OUTPUT) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX(core__JNI.dae_reduce_index__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(OUTPUT), OUTPUT), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae_reduce_index(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, de.dhbw.rahmlab.casadi.impl.std.Dict OUTPUT, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX(core__JNI.dae_reduce_index__SWIG_2(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae_reduce_index(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, de.dhbw.rahmlab.casadi.impl.std.Dict OUTPUT) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX(core__JNI.dae_reduce_index__SWIG_3(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(OUTPUT), OUTPUT), true);
  }

  /**
   *  Turn a reduced DAE into a semi explicit form suitable for CasADi integrator<br>
   * <br>
   * @param dae Original (unreduced) DAE structure<br>
   * @param dae_red Reduced DAE (see dae_reduce_index)<br>
   * <br>
   * <br>
   * @return Semi explicit DAE dictionary, suitable to pass to a CasADi integrator<br>
   * <br>
   * @see dae_reduce_index<br>
   * <br>
   *   <br>
   *  
   */
  public static de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae_map_semi_expl(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae_red, de.dhbw.rahmlab.casadi.impl.casadi.Function OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Function arg3) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX(core__JNI.dae_map_semi_expl__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae_red), dae_red, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(arg3), arg3), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae_map_semi_expl(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae_red, de.dhbw.rahmlab.casadi.impl.casadi.Function OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Function arg3) {
    return new de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX(core__JNI.dae_map_semi_expl__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae_red), dae_red, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(arg3), arg3), true);
  }

  /**
   *  Obtain a generator Function for producing consistent initial guesses of a reduced DAE<br>
   * <br>
   * @param dae Original (unreduced) DAE structure<br>
   * @param dae_red Reduced DAE (see dae_reduce_index) <br>
   * @param init_solver NLP solver plugin name for nlpsol used to construct an initial guess<br>
   * @param init_strength Influence the nature of the NLP<br>
   *               Structure with keys x_impl, dx_impl, z corresponding to inputs of init_gen<br>
   *               Each key maps to a DM that should match the variable size corresponding to that key.<br>
   *               For each variable the meaning of the corresponding DM value is as follows:<br>
   *                When &gt;=0, indicates that the provided initial guess is used in a quadratic penalty (value used as weight)<br>
   *                When -1, indicates that the provided initial guess must be observed (simple bound on variable)<br>
   * @param init_solver_options NLP solver options to be passed to nlpsol<br>
   * <br>
   * @return init_gen A function to generate a consistent initial guess that can<br>
   *             be used to pass to an integrator constructed from a semi explict reduced DAE<br>
   *             Inputs:<br>
   *               - x_impl, dx_impl, z: initial guesses in the original DAE space<br>
   *               - p: parameters<br>
   *               - t: time<br>
   *             Outputs:<br>
   *               - x0, z0: (semi explicit) integrator states and algebraic variables;<br>
   *                         typically used as input for integrators<br>
   * <br>
   * @see dae_reduce_index<br>
   * <br>
   *   <br>
   *  
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function dae_init_gen(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae_red, String init_solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM init_strength, de.dhbw.rahmlab.casadi.impl.std.Dict init_solver_options) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.dae_init_gen__SWIG_0(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae_red), dae_red, init_solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(init_strength), init_strength, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(init_solver_options), init_solver_options), true);
  }

  /**
   *  Obtain a generator Function for producing consistent initial guesses of a reduced DAE<br>
   * <br>
   * @param dae Original (unreduced) DAE structure<br>
   * @param dae_red Reduced DAE (see dae_reduce_index) <br>
   * @param init_solver NLP solver plugin name for nlpsol used to construct an initial guess<br>
   * @param init_strength Influence the nature of the NLP<br>
   *               Structure with keys x_impl, dx_impl, z corresponding to inputs of init_gen<br>
   *               Each key maps to a DM that should match the variable size corresponding to that key.<br>
   *               For each variable the meaning of the corresponding DM value is as follows:<br>
   *                When &gt;=0, indicates that the provided initial guess is used in a quadratic penalty (value used as weight)<br>
   *                When -1, indicates that the provided initial guess must be observed (simple bound on variable)<br>
   * <br>
   * <br>
   * @return init_gen A function to generate a consistent initial guess that can<br>
   *             be used to pass to an integrator constructed from a semi explict reduced DAE<br>
   *             Inputs:<br>
   *               - x_impl, dx_impl, z: initial guesses in the original DAE space<br>
   *               - p: parameters<br>
   *               - t: time<br>
   *             Outputs:<br>
   *               - x0, z0: (semi explicit) integrator states and algebraic variables;<br>
   *                         typically used as input for integrators<br>
   * <br>
   * @see dae_reduce_index<br>
   * <br>
   *   <br>
   *  
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function dae_init_gen(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae_red, String init_solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM init_strength) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.dae_init_gen__SWIG_1(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae_red), dae_red, init_solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(init_strength), init_strength), true);
  }

  /**
   *  Obtain a generator Function for producing consistent initial guesses of a reduced DAE<br>
   * <br>
   * @param dae Original (unreduced) DAE structure<br>
   * @param dae_red Reduced DAE (see dae_reduce_index) <br>
   * @param init_solver NLP solver plugin name for nlpsol used to construct an initial guess<br>
   * <br>
   * <br>
   * <br>
   * @return init_gen A function to generate a consistent initial guess that can<br>
   *             be used to pass to an integrator constructed from a semi explict reduced DAE<br>
   *             Inputs:<br>
   *               - x_impl, dx_impl, z: initial guesses in the original DAE space<br>
   *               - p: parameters<br>
   *               - t: time<br>
   *             Outputs:<br>
   *               - x0, z0: (semi explicit) integrator states and algebraic variables;<br>
   *                         typically used as input for integrators<br>
   * <br>
   * @see dae_reduce_index<br>
   * <br>
   *   <br>
   *  
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.Function dae_init_gen(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dae_red, String init_solver) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.dae_init_gen__SWIG_2(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dae_red), dae_red, init_solver), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function dae_init_gen(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae_red, String init_solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM init_strength, de.dhbw.rahmlab.casadi.impl.std.Dict init_solver_options) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.dae_init_gen__SWIG_3(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae_red), dae_red, init_solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(init_strength), init_strength, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(init_solver_options), init_solver_options), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function dae_init_gen(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae_red, String init_solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM init_strength) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.dae_init_gen__SWIG_4(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae_red), dae_red, init_solver, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToDM.getCPtr(init_strength), init_strength), true);
  }

  public static de.dhbw.rahmlab.casadi.impl.casadi.Function dae_init_gen(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX dae_red, String init_solver) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(core__JNI.dae_init_gen__SWIG_5(de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae), dae, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToSX.getCPtr(dae_red), dae_red, init_solver), true);
  }

  /**
   *  Detect simple bounds from general constraints<br>
   * <br>
   * Given parametric constraints:<br>
   * {@literal 
    subject to lbg(p) <= g(x,p) <= ubg(p)
  }<br>
   * <br>
   * Returns an equivalent set<br>
   * {@literal 
    subject to  lbg(p)(gi) <= g(x,p)(gi) <= ubg(p)(gi)
                lbx(p) <= x                 <= ubx(p)
  }<br>
   * <br>
   * <br>
   * <br>
   * <br>
   *       
   */
  public static void detect_simple_bounds(de.dhbw.rahmlab.casadi.impl.casadi.SX xX, de.dhbw.rahmlab.casadi.impl.casadi.SX p, de.dhbw.rahmlab.casadi.impl.casadi.SX g, de.dhbw.rahmlab.casadi.impl.casadi.SX lbg, de.dhbw.rahmlab.casadi.impl.casadi.SX ubg, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.SX arg6, de.dhbw.rahmlab.casadi.impl.casadi.SX arg7, de.dhbw.rahmlab.casadi.impl.casadi.Function arg8, de.dhbw.rahmlab.casadi.impl.casadi.Function arg9) {
    core__JNI.detect_simple_bounds__SWIG_0(de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(xX), xX, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(p), p, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(g), g, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(lbg), lbg, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(ubg), ubg, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(arg6), arg6, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(arg7), arg7, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(arg8), arg8, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(arg9), arg9);
  }

  public static void detect_simple_bounds(de.dhbw.rahmlab.casadi.impl.casadi.MX xX, de.dhbw.rahmlab.casadi.impl.casadi.MX p, de.dhbw.rahmlab.casadi.impl.casadi.MX g, de.dhbw.rahmlab.casadi.impl.casadi.MX lbg, de.dhbw.rahmlab.casadi.impl.casadi.MX ubg, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.MX arg6, de.dhbw.rahmlab.casadi.impl.casadi.MX arg7, de.dhbw.rahmlab.casadi.impl.casadi.Function arg8, de.dhbw.rahmlab.casadi.impl.casadi.Function arg9) {
    core__JNI.detect_simple_bounds__SWIG_1(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(xX), xX, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(p), p, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(g), g, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(lbg), lbg, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(ubg), ubg, de.dhbw.rahmlab.casadi.impl.std.StdVectorCasadiInt.getCPtr(OUTPUT), OUTPUT, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(arg6), arg6, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(arg7), arg7, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(arg8), arg8, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(arg9), arg9);
  }

}
