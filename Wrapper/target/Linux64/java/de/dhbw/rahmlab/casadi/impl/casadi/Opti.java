/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package de.dhbw.rahmlab.casadi.impl.casadi;

import de.dhbw.rahmlab.casadi.impl.*;
import static de.dhbw.rahmlab.casadi.impl.core__.*;
import java.util.function.LongConsumer;
import static de.dhbw.rahmlab.casadi.implUtil.WrapUtil.*;

/**
 *  A simplified interface for NLP modeling/solving<br>
 * <br>
 *       This class offers a view with model description facilities<br>
 *       The API is guaranteed to be stable.<br>
 * <br>
 * <br>
 *       Example NLP:<br>
 *       {@literal 
      opti = casadi.Opti();

      x = opti.variable();
      y = opti.variable();

      opti.minimize(  (y-x^2)^2   );
      opti.subject_to( x^2+y^2==1 );
      opti.subject_to(     x+y>=1 );

      opti.solver('ipopt');
      sol = opti.solve();

      sol.value(x)
      sol.value(y)
      }<br>
 * <br>
 *       Example parametric NLP:<br>
 *       {@literal 
      opti = casadi.Opti();

      x = opti.variable(2,1);
      p = opti.parameter();

      opti.minimize(  (p*x(2)-x(1)^2)^2   );
      opti.subject_to( 1<=sum(x)<=2 );

      opti.solver('ipopt');

      opti.set_value(p, 3);
      sol = opti.solve();
      sol.value(x)

      opti.set_value(p, 5);
      sol = opti.solve();
      sol.value(x)
      }<br>
 * <br>
 *       2017<br>
 *       @author Joris Gillis, Erik Lambrechts, Joel Andersson<br>
 * <br>
 *     
 */
public class Opti implements ISharedObject {
  private final long swigCPtr;

  public Opti(long cPtr, boolean cMemoryOwn) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, cPtr, Opti::delete);
  	}
  }

  /**
  * <pre>
  * In C++, deleting a pointer twice is undefined behavior!
  * In C++, deleting an object polymorphically is undefined behavior if the base class does not declare it's constructor as virtual!
  * Using this baseclass constructor for subtypes prevents that.
  * </pre>
  */
  protected Opti(long cPtr, boolean cMemoryOwn, long subtype_cPtr, LongConsumer subtype_deleteFunction) {
    this.swigCPtr = cPtr;
	  if (cMemoryOwn) {
		  REGISTER_DELETION(this, subtype_cPtr, subtype_deleteFunction);
	  }
  }

  public static long getCPtr(Opti obj) {
    return obj.swigCPtr;
  }

  private static void delete(long swigCPtr) {
  de.dhbw.rahmlab.casadi.impl.core__JNI.delete_casadi_Opti(swigCPtr);
}

  public long ISharedObject_GetInterfaceCPtr() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_ISharedObject_GetInterfaceCPtr(swigCPtr);
  }

  /**
   *  Create Opti Context<br>
   * <br>
   * @param problem_type of optimization 'nlp' or 'conic' (default nlp)<br>
   * <br>
   *       
   */
  public Opti(String problem_type) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Opti__SWIG_0(problem_type), true);
  }

  /**
   *  Create Opti Context<br>
   * <br>
   * <br>
   * <br>
   *       
   */
  public Opti() {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Opti__SWIG_1(), true);
  }

  /**
   *  Create a decision variable (symbol)<br>
   * <br>
   * The order of creation matters.<br>
   * The order will be reflected in the optimization problem.<br>
   * It is not required for decision variables to actualy appear in the optimization problem.<br>
   * <br>
   * @param n number of rows (default 1)<br>
   * @param m number of columnss (default 1)<br>
   * @param attribute: 'full' (default) or 'symmetric'<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX variable(long n, long m, String attribute) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_variable__SWIG_0(swigCPtr, this, n, m, attribute), true);
  }

  /**
   *  Create a decision variable (symbol)<br>
   * <br>
   * The order of creation matters.<br>
   * The order will be reflected in the optimization problem.<br>
   * It is not required for decision variables to actualy appear in the optimization problem.<br>
   * <br>
   * @param n number of rows (default 1)<br>
   * @param m number of columnss (default 1)<br>
   * <br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX variable(long n, long m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_variable__SWIG_1(swigCPtr, this, n, m), true);
  }

  /**
   *  Create a decision variable (symbol)<br>
   * <br>
   * The order of creation matters.<br>
   * The order will be reflected in the optimization problem.<br>
   * It is not required for decision variables to actualy appear in the optimization problem.<br>
   * <br>
   * @param n number of rows (default 1)<br>
   * <br>
   * <br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX variable(long n) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_variable__SWIG_2(swigCPtr, this, n), true);
  }

  /**
   *  Create a decision variable (symbol)<br>
   * <br>
   * The order of creation matters.<br>
   * The order will be reflected in the optimization problem.<br>
   * It is not required for decision variables to actualy appear in the optimization problem.<br>
   * <br>
   * <br>
   * <br>
   * <br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX variable() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_variable__SWIG_3(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX variable(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, String attribute) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_variable__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, attribute), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX variable(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_variable__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX variable(de.dhbw.rahmlab.casadi.impl.casadi.MX symbol, String attribute) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_variable__SWIG_6(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(symbol), symbol, attribute), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX variable(de.dhbw.rahmlab.casadi.impl.casadi.MX symbol) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_variable__SWIG_7(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(symbol), symbol), true);
  }

  /**
   *  Create a parameter (symbol); fixed during optimization<br>
   * <br>
   * The order of creation does not matter.<br>
   * It is not required for parameter to actualy appear in the optimization problem.<br>
   * Parameters that do appear, must be given a value before the problem can be solved.<br>
   * <br>
   * @param n number of rows (default 1)<br>
   * @param m number of columnss (default 1)<br>
   * @param attribute: 'full' (default) or 'symmetric'<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX parameter(long n, long m, String attribute) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_parameter__SWIG_0(swigCPtr, this, n, m, attribute), true);
  }

  /**
   *  Create a parameter (symbol); fixed during optimization<br>
   * <br>
   * The order of creation does not matter.<br>
   * It is not required for parameter to actualy appear in the optimization problem.<br>
   * Parameters that do appear, must be given a value before the problem can be solved.<br>
   * <br>
   * @param n number of rows (default 1)<br>
   * @param m number of columnss (default 1)<br>
   * <br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX parameter(long n, long m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_parameter__SWIG_1(swigCPtr, this, n, m), true);
  }

  /**
   *  Create a parameter (symbol); fixed during optimization<br>
   * <br>
   * The order of creation does not matter.<br>
   * It is not required for parameter to actualy appear in the optimization problem.<br>
   * Parameters that do appear, must be given a value before the problem can be solved.<br>
   * <br>
   * @param n number of rows (default 1)<br>
   * <br>
   * <br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX parameter(long n) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_parameter__SWIG_2(swigCPtr, this, n), true);
  }

  /**
   *  Create a parameter (symbol); fixed during optimization<br>
   * <br>
   * The order of creation does not matter.<br>
   * It is not required for parameter to actualy appear in the optimization problem.<br>
   * Parameters that do appear, must be given a value before the problem can be solved.<br>
   * <br>
   * <br>
   * <br>
   * <br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX parameter() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_parameter__SWIG_3(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX parameter(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp, String attribute) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_parameter__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp, attribute), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX parameter(de.dhbw.rahmlab.casadi.impl.casadi.Sparsity sp) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_parameter__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Sparsity.getCPtr(sp), sp), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX parameter(de.dhbw.rahmlab.casadi.impl.casadi.MX symbol, String attribute) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_parameter__SWIG_6(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(symbol), symbol, attribute), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX parameter(de.dhbw.rahmlab.casadi.impl.casadi.MX symbol) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_parameter__SWIG_7(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(symbol), symbol), true);
  }

  /**
   *  Set objective<br>
   * <br>
   * Objective must be a scalar. Default objective: 0<br>
   * When method is called multiple times, the last call takes effect<br>
   * <br>
   *       
   */
  public void minimize(de.dhbw.rahmlab.casadi.impl.casadi.MX f, double linear_scale) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_minimize__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(f), f, linear_scale);
  }

  /**
   *  Set objective<br>
   * <br>
   * Objective must be a scalar. Default objective: 0<br>
   * When method is called multiple times, the last call takes effect<br>
   * <br>
   *       
   */
  public void minimize(de.dhbw.rahmlab.casadi.impl.casadi.MX f) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_minimize__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(f), f);
  }

  /**
   *  Add constraints<br>
   * <br>
   * Examples:<br>
   * {@literal 
  \begin{itemize}
  opti.subject_to( sqrt(x+y) >= 1);
  opti.subject_to( sqrt(x+y) > 1)}: same as above
  opti.subject_to( 1<= sqrt(x+y) )}: same as above
  opti.subject_to( 5*x+y==1 )}: equality
  
  Python
  opti.subject_to([x*y>=1,x==3])
  opti.subject_to(opti.bounded(0,x,1))
  
  MATLAB
  opti.subject_to({x*y>=1,x==3})
  opti.subject_to( 0<=x<=1 )
  }<br>
   * <br>
   * <br>
   * Related functionalities:<br>
   *  - opti.lbg,opti.g,opti.ubg represent the vector of flattened constraints<br>
   *  - opti.debug.show_infeasibilities() may be used to inspect which constraints are violated<br>
   * <br>
   *       
   */
  public void subject_to(de.dhbw.rahmlab.casadi.impl.casadi.MX g, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_subject_to__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(g), g, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options);
  }

  /**
   *  Add constraints<br>
   * <br>
   * Examples:<br>
   * {@literal 
  \begin{itemize}
  opti.subject_to( sqrt(x+y) >= 1);
  opti.subject_to( sqrt(x+y) > 1)}: same as above
  opti.subject_to( 1<= sqrt(x+y) )}: same as above
  opti.subject_to( 5*x+y==1 )}: equality
  
  Python
  opti.subject_to([x*y>=1,x==3])
  opti.subject_to(opti.bounded(0,x,1))
  
  MATLAB
  opti.subject_to({x*y>=1,x==3})
  opti.subject_to( 0<=x<=1 )
  }<br>
   * <br>
   * <br>
   * Related functionalities:<br>
   *  - opti.lbg,opti.g,opti.ubg represent the vector of flattened constraints<br>
   *  - opti.debug.show_infeasibilities() may be used to inspect which constraints are violated<br>
   * <br>
   *       
   */
  public void subject_to(de.dhbw.rahmlab.casadi.impl.casadi.MX g) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_subject_to__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(g), g);
  }

  public void subject_to(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX g, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_subject_to__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(g), g, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options);
  }

  public void subject_to(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX g) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_subject_to__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(g), g);
  }

  public void subject_to(de.dhbw.rahmlab.casadi.impl.casadi.MX g, de.dhbw.rahmlab.casadi.impl.casadi.DM linear_scale, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_subject_to__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(g), g, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(linear_scale), linear_scale, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options);
  }

  public void subject_to(de.dhbw.rahmlab.casadi.impl.casadi.MX g, de.dhbw.rahmlab.casadi.impl.casadi.DM linear_scale) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_subject_to__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(g), g, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(linear_scale), linear_scale);
  }

  public void subject_to(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX g, de.dhbw.rahmlab.casadi.impl.casadi.DM linear_scale, de.dhbw.rahmlab.casadi.impl.std.Dict options) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_subject_to__SWIG_6(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(g), g, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(linear_scale), linear_scale, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(options), options);
  }

  public void subject_to(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX g, de.dhbw.rahmlab.casadi.impl.casadi.DM linear_scale) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_subject_to__SWIG_7(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(g), g, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(linear_scale), linear_scale);
  }

  /**
   *  <br>
   *  Clear constraints
   */
  public void subject_to() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_subject_to__SWIG_8(swigCPtr, this);
  }

  /**
   *  Set a solver<br>
   * <br>
   * @param solver any of the nlpsol plugins can be used here<br>
   *            In practice, not all nlpsol plugins may be supported yet<br>
   * <br>
   * <br>
   * <br>
   *       
   */
  public void solver(String solver, de.dhbw.rahmlab.casadi.impl.std.Dict plugin_options, de.dhbw.rahmlab.casadi.impl.std.Dict solver_options) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_solver__SWIG_0(swigCPtr, this, solver, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(plugin_options), plugin_options, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(solver_options), solver_options);
  }

  /**
   *  Set a solver<br>
   * <br>
   * @param solver any of the nlpsol plugins can be used here<br>
   *            In practice, not all nlpsol plugins may be supported yet<br>
   * <br>
   * <br>
   * <br>
   *       
   */
  public void solver(String solver, de.dhbw.rahmlab.casadi.impl.std.Dict plugin_options) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_solver__SWIG_1(swigCPtr, this, solver, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(plugin_options), plugin_options);
  }

  /**
   *  Set a solver<br>
   * <br>
   * @param solver any of the nlpsol plugins can be used here<br>
   *            In practice, not all nlpsol plugins may be supported yet<br>
   * <br>
   * <br>
   * <br>
   *       
   */
  public void solver(String solver) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_solver__SWIG_2(swigCPtr, this, solver);
  }

  /**
   *  Set initial guess for decision variables<br>
   * {@literal 
  opti.set_initial(x, 2)
  opti.set_initial(10*x(1), 2)
  }
   */
  public void set_initial(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.DM v) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_set_initial__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(v), v);
  }

  public void set_initial(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX assignments) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_set_initial__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(assignments), assignments);
  }

  /**
   *  <br>
   *  Set value of parameter<br>
   * <br>
   * Each parameter must be given a value before 'solve' can be called<br>
   * <br>
   *       
   */
  public void set_value(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.DM v) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_set_value__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(v), v);
  }

  public void set_value(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX assignments) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_set_value__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(assignments), assignments);
  }

  /**
   *  <br>
   *  Set domain of a decision variable<br>
   * <br>
   * @param x decision variable<br>
   * <br>
   * <br>
   * {@literal 
  opti.set_domain(x, "real")
  opti.set_domain(x, "integer")
  }<br>
   * <br>
   *       
   */
  public void set_domain(de.dhbw.rahmlab.casadi.impl.casadi.MX x, String domain) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_set_domain(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, domain);
  }

  /**
   *  Set scale of a decision variable<br>
   * <br>
   * (x-offset)/scale will be used in the optimization problem<br>
   * <br>
   * @param x decision variable<br>
   * @param scale scaling value (default: 1)<br>
   * @param offset scaling value (default: 0)<br>
   * <br>
   * {@literal 
  opti.set_linear_scale(x, 20)
  opti.set_linear_scale(x, 20, 273.15)
  }<br>
   * <br>
   *       
   */
  public void set_linear_scale(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.DM scale, de.dhbw.rahmlab.casadi.impl.casadi.DM offset) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_set_linear_scale__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(scale), scale, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(offset), offset);
  }

  /**
   *  Set scale of a decision variable<br>
   * <br>
   * (x-offset)/scale will be used in the optimization problem<br>
   * <br>
   * @param x decision variable<br>
   * @param scale scaling value (default: 1)<br>
   * <br>
   * <br>
   * {@literal 
  opti.set_linear_scale(x, 20)
  opti.set_linear_scale(x, 20, 273.15)
  }<br>
   * <br>
   *       
   */
  public void set_linear_scale(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.casadi.DM scale) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_set_linear_scale__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(scale), scale);
  }

  /**
   *  Crunch the numbers; solve the problem
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.OptiSol solve() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.OptiSol(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_solve(swigCPtr, this), true);
  }

  /**
   *  Crunch the numbers; solve the problem<br>
   * <br>
   * Allows the solver to return without error when<br>
   * an iteration or time limit is reached<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.OptiSol solve_limited() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.OptiSol(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_solve_limited(swigCPtr, this), true);
  }

  /**
   *  Obtain value of expression at the current value<br>
   * <br>
   * In regular mode, teh current value is the converged solution<br>
   * In debug mode, the value can be non-converged<br>
   * <br>
   * @param values Optional assignment expressions (e.g. x==3)<br>
   *            to overrule the current value
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.DM value(de.dhbw.rahmlab.casadi.impl.casadi.MX x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX values) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_value__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(values), values), true);
  }

  /**
   *  Obtain value of expression at the current value<br>
   * <br>
   * In regular mode, teh current value is the converged solution<br>
   * In debug mode, the value can be non-converged<br>
   * <br>
   * 
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.DM value(de.dhbw.rahmlab.casadi.impl.casadi.MX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_value__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(x), x), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.DM value(de.dhbw.rahmlab.casadi.impl.casadi.DM x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX values) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_value__SWIG_2(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(values), values), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.DM value(de.dhbw.rahmlab.casadi.impl.casadi.DM x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_value__SWIG_3(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.DM.getCPtr(x), x), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.DM value(de.dhbw.rahmlab.casadi.impl.casadi.SX x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX values) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_value__SWIG_4(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(x), x, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(values), values), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.DM value(de.dhbw.rahmlab.casadi.impl.casadi.SX x) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_value__SWIG_5(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.SX.getCPtr(x), x), true);
  }

  /**
   *  Get statistics<br>
   * <br>
   * nlpsol stats are passed as-is.<br>
   * No stability can be guaranteed about this part of the API<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.std.Dict stats() {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_stats(swigCPtr, this), true);
  }

  /**
   *  Get return status of solver<br>
   * <br>
   *          passed as-is from nlpsol<br>
   * No stability can be guaranteed about this part of the API<br>
   * <br>
   *       
   */
  public String return_status() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_return_status(swigCPtr, this);
  }

  /**
   *  get assignment expressions for initial values<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX initial() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_initial(swigCPtr, this), true);
  }

  /**
   *  get assignment expressions for latest values<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX value_variables() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_value_variables(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.std.StdVectorMX value_parameters() {
    return new de.dhbw.rahmlab.casadi.impl.std.StdVectorMX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_value_parameters(swigCPtr, this), true);
  }

  /**
   *  Scale a helper function constructed via opti.x, opti.g, ...<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function scale_helper(de.dhbw.rahmlab.casadi.impl.casadi.Function h) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_scale_helper(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.Function.getCPtr(h), h), true);
  }

  /**
   *  get the dual variable<br>
   * <br>
   * m must be a constraint expression.<br>
   * The returned value is still a symbolic expression.<br>
   * Use `value` on it to obtain the numerical value.<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX dual(de.dhbw.rahmlab.casadi.impl.casadi.MX m) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_dual(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m), true);
  }

  /**
   *  Number of (scalarised) decision variables<br>
   * <br>
   *       
   */
  public long nx() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_nx(swigCPtr, this);
  }

  /**
   *  Number of (scalarised) parameters<br>
   * <br>
   *       
   */
  public long np() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_np(swigCPtr, this);
  }

  /**
   *  Number of (scalarised) constraints<br>
   * <br>
   *       
   */
  public long ng() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_ng(swigCPtr, this);
  }

  /**
   *  Get all (scalarised) decision variables as a symbolic column vector<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX x() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_x(swigCPtr, this), true);
  }

  /**
   *  Get all (scalarised) parameters as a symbolic column vector<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX p() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_p(swigCPtr, this), true);
  }

  /**
   *  Get all (scalarised) constraint expressions as a column vector<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX g() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_g(swigCPtr, this), true);
  }

  /**
   *  Get objective expression<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX f() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_f(swigCPtr, this), true);
  }

  /**
   *  Get all (scalarised) bounds on constraints as a column vector<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX lbg() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_lbg(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.MX ubg() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_ubg(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.DM x_linear_scale() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_x_linear_scale(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.DM x_linear_scale_offset() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_x_linear_scale_offset(swigCPtr, this), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.DM g_linear_scale() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.DM(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_g_linear_scale(swigCPtr, this), true);
  }

  public double f_linear_scale() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_f_linear_scale(swigCPtr, this);
  }

  /**
   *  Get all (scalarised) dual variables as a symbolic column vector<br>
   * <br>
   * Useful for obtaining the Lagrange Hessian:<br>
   * {@literal 
  sol.value(hessian(opti.f+opti.lam_g'*opti.g,opti.x)) % MATLAB
  sol.value(hessian(opti.f+dot(opti.lam_g,opti.g),opti.x)[0]) # Python
  }<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.MX lam_g() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_lam_g(swigCPtr, this), true);
  }

  /**
   *  Create a CasADi Function from the Opti solver<br>
   * <br>
   * @param name Name of the resulting CasADi Function<br>
   * @param args List of parameters and decision/dual variables<br>
   *                (which can be given an initial guess) with the resulting Function<br>
   * @param res List of expressions that will get evaluated at the optimal solution<br>
   * @param opts Standard CasADi Funcion options<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function to_function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX args, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX res, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_to_function__SWIG_0(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(args), args, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(res), res, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  /**
   *  Create a CasADi Function from the Opti solver<br>
   * <br>
   * @param name Name of the resulting CasADi Function<br>
   * @param args List of parameters and decision/dual variables<br>
   *                (which can be given an initial guess) with the resulting Function<br>
   * @param res List of expressions that will get evaluated at the optimal solution<br>
   * <br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Function to_function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX args, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX res) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_to_function__SWIG_1(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(args), args, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(res), res), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function to_function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX args, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX res, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_to_function__SWIG_2(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(args), args, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(res), res, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function to_function(String name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX args, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX res, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_to_function__SWIG_3(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(args), args, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(res), res, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function to_function(String name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out, de.dhbw.rahmlab.casadi.impl.std.Dict opts) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_to_function__SWIG_4(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dict), dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(opts), opts), true);
  }

  public de.dhbw.rahmlab.casadi.impl.casadi.Function to_function(String name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString name_out) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Function(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_to_function__SWIG_5(swigCPtr, this, name, de.dhbw.rahmlab.casadi.impl.std.StdMapStringToMX.getCPtr(dict), dict, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_in), name_in, de.dhbw.rahmlab.casadi.impl.std.StdVectorStdString.getCPtr(name_out), name_out), true);
  }

  /**
   *  Construct a double inequality<br>
   * <br>
   * Constructs:  lb(p) &lt;= g(x,p) &lt;= ub(p)<br>
   * <br>
   * Python prohibits such syntax directly<br>
   * <br>
   *       
   */
  public static de.dhbw.rahmlab.casadi.impl.casadi.MX bounded(de.dhbw.rahmlab.casadi.impl.casadi.MX lb, de.dhbw.rahmlab.casadi.impl.casadi.MX expr, de.dhbw.rahmlab.casadi.impl.casadi.MX ub) {
    return new de.dhbw.rahmlab.casadi.impl.casadi.MX(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_bounded(de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(lb), lb, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(expr), expr, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(ub), ub), true);
  }

  /**
   *  Get a copy with advanced functionality<br>
   * <br>
   * You get access to more methods, but you have no guarantees about API stability<br>
   * <br>
   * The copy is effectively a deep copy:<br>
   * Updating the state of the copy does not update the original.<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.OptiAdvanced debug() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.OptiAdvanced(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_debug(swigCPtr, this), true);
  }

  /**
   *  Get a copy with advanced functionality<br>
   * <br>
   * You get access to more methods, but you have no guarantees about API stability<br>
   * <br>
   * The copy is effectively a deep copy:<br>
   * Updating the state of the copy does not update the original.<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.OptiAdvanced advanced() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.OptiAdvanced(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_advanced(swigCPtr, this), true);
  }

  /**
   *  Get a copy of the<br>
   * <br>
   * The copy is effectively a deep copy:<br>
   * Updating the state of the copy does not update the original.<br>
   * <br>
   *       
   */
  public de.dhbw.rahmlab.casadi.impl.casadi.Opti copy() {
    return new de.dhbw.rahmlab.casadi.impl.casadi.Opti(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_copy(swigCPtr, this), true);
  }

  /**
   *  add user data<br>
   * <br>
   * Add arbitrary data in the form of a dictionary to symbols<br>
   * or constraints<br>
   * <br>
   *       
   */
  public void update_user_dict(de.dhbw.rahmlab.casadi.impl.casadi.MX m, de.dhbw.rahmlab.casadi.impl.std.Dict meta) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_update_user_dict__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(meta), meta);
  }

  public void update_user_dict(de.dhbw.rahmlab.casadi.impl.std.StdVectorMX m, de.dhbw.rahmlab.casadi.impl.std.Dict meta) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_update_user_dict__SWIG_1(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.std.StdVectorMX.getCPtr(m), m, de.dhbw.rahmlab.casadi.impl.std.Dict.getCPtr(meta), meta);
  }

  /**
   *  Get user data
   */
  public de.dhbw.rahmlab.casadi.impl.std.Dict user_dict(de.dhbw.rahmlab.casadi.impl.casadi.MX m) {
    return new de.dhbw.rahmlab.casadi.impl.std.Dict(de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_user_dict(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.MX.getCPtr(m), m), true);
  }

  /**
   *  Readable name of the class
   */
  public String type_name() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_type_name(swigCPtr, this);
  }

  /**
   *   Print representation
   */
  public void disp(SWIGTYPE_p_std__ostream stream, boolean more) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_disp__SWIG_0(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(stream), more);
  }

  /**
   *   Print representation
   */
  public void disp(SWIGTYPE_p_std__ostream stream) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_disp__SWIG_1(swigCPtr, this, SWIGTYPE_p_std__ostream.getCPtr(stream));
  }

  /**
   *  Get string representation
   */
  public String toString(boolean more) {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_toString__SWIG_0(swigCPtr, this, more);
  }

  /**
   *  Get string representation
   */
  public String toString() {
    return de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_toString__SWIG_1(swigCPtr, this);
  }

  /**
   * Helper methods for callback()<br>
   * <br>
   * Do not use directly.<br>
   * <br>
   *       
   */
  public void callback_class(de.dhbw.rahmlab.casadi.impl.casadi.OptiCallback callback) {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_callback_class__SWIG_0(swigCPtr, this, de.dhbw.rahmlab.casadi.impl.casadi.OptiCallback.getCPtr(callback), callback);
  }

  public void callback_class() {
    de.dhbw.rahmlab.casadi.impl.core__JNI.casadi_Opti_callback_class__SWIG_1(swigCPtr, this);
  }

  public Opti(de.dhbw.rahmlab.casadi.impl.casadi.Opti other) {
    this(de.dhbw.rahmlab.casadi.impl.core__JNI.new_casadi_Opti__SWIG_2(de.dhbw.rahmlab.casadi.impl.casadi.Opti.getCPtr(other), other), true);
  }

}
